—≥
LD:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModulePhysics2D.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class "
DOTweenModulePhysics2D +
{ 
public 
static 
TweenerCore !
<! "
Vector2" )
,) *
Vector2+ 2
,2 3
VectorOptions4 A
>A B
DOMoveC I
(I J
thisJ N
Rigidbody2DO Z
target[ a
,a b
Vector2c j
endValuek s
,s t
floatu z
duration	{ É
,
É Ñ
bool
Ö â
snapping
ä í
=
ì î
false
ï ö
)
ö õ
{ 	
TweenerCore 
< 
Vector2 
,  
Vector2! (
,( )
VectorOptions* 7
>7 8
t9 :
=; <
DOTween= D
.D E
ToE G
(G H
(H I
)I J
=>K M
targetN T
.T U
positionU ]
,] ^
target_ e
.e f
MovePositionf r
,r s
endValuet |
,| }
duration	~ Ü
)
Ü á
;
á à
t 
. 

SetOptions 
( 
snapping !
)! "
." #
	SetTarget# ,
(, -
target- 3
)3 4
;4 5
return 
t 
; 
} 	
public$$ 
static$$ 
TweenerCore$$ !
<$$! "
Vector2$$" )
,$$) *
Vector2$$+ 2
,$$2 3
VectorOptions$$4 A
>$$A B
DOMoveX$$C J
($$J K
this$$K O
Rigidbody2D$$P [
target$$\ b
,$$b c
float$$d i
endValue$$j r
,$$r s
float$$t y
duration	$$z Ç
,
$$Ç É
bool
$$Ñ à
snapping
$$â ë
=
$$í ì
false
$$î ô
)
$$ô ö
{%% 	
TweenerCore&& 
<&& 
Vector2&& 
,&&  
Vector2&&! (
,&&( )
VectorOptions&&* 7
>&&7 8
t&&9 :
=&&; <
DOTween&&= D
.&&D E
To&&E G
(&&G H
(&&H I
)&&I J
=>&&K M
target&&N T
.&&T U
position&&U ]
,&&] ^
target&&_ e
.&&e f
MovePosition&&f r
,&&r s
new&&t w
Vector2&&x 
(	&& Ä
endValue
&&Ä à
,
&&à â
$num
&&ä ã
)
&&ã å
,
&&å ç
duration
&&é ñ
)
&&ñ ó
;
&&ó ò
t'' 
.'' 

SetOptions'' 
('' 
AxisConstraint'' '
.''' (
X''( )
,'') *
snapping''+ 3
)''3 4
.''4 5
	SetTarget''5 >
(''> ?
target''? E
)''E F
;''F G
return(( 
t(( 
;(( 
})) 	
public// 
static// 
TweenerCore// !
<//! "
Vector2//" )
,//) *
Vector2//+ 2
,//2 3
VectorOptions//4 A
>//A B
DOMoveY//C J
(//J K
this//K O
Rigidbody2D//P [
target//\ b
,//b c
float//d i
endValue//j r
,//r s
float//t y
duration	//z Ç
,
//Ç É
bool
//Ñ à
snapping
//â ë
=
//í ì
false
//î ô
)
//ô ö
{00 	
TweenerCore11 
<11 
Vector211 
,11  
Vector211! (
,11( )
VectorOptions11* 7
>117 8
t119 :
=11; <
DOTween11= D
.11D E
To11E G
(11G H
(11H I
)11I J
=>11K M
target11N T
.11T U
position11U ]
,11] ^
target11_ e
.11e f
MovePosition11f r
,11r s
new11t w
Vector211x 
(	11 Ä
$num
11Ä Å
,
11Å Ç
endValue
11É ã
)
11ã å
,
11å ç
duration
11é ñ
)
11ñ ó
;
11ó ò
t22 
.22 

SetOptions22 
(22 
AxisConstraint22 '
.22' (
Y22( )
,22) *
snapping22+ 3
)223 4
.224 5
	SetTarget225 >
(22> ?
target22? E
)22E F
;22F G
return33 
t33 
;33 
}44 	
public99 
static99 
TweenerCore99 !
<99! "
float99" '
,99' (
float99) .
,99. /
FloatOptions990 <
>99< =
DORotate99> F
(99F G
this99G K
Rigidbody2D99L W
target99X ^
,99^ _
float99` e
endValue99f n
,99n o
float99p u
duration99v ~
)99~ 
{:: 	
TweenerCore;; 
<;; 
float;; 
,;; 
float;; $
,;;$ %
FloatOptions;;& 2
>;;2 3
t;;4 5
=;;6 7
DOTween;;8 ?
.;;? @
To;;@ B
(;;B C
(;;C D
);;D E
=>;;F H
target;;I O
.;;O P
rotation;;P X
,;;X Y
target;;Z `
.;;` a
MoveRotation;;a m
,;;m n
endValue;;o w
,;;w x
duration	;;y Å
)
;;Å Ç
;
;;Ç É
t<< 
.<< 
	SetTarget<< 
(<< 
target<< 
)<< 
;<<  
return== 
t== 
;== 
}>> 	
publicKK 
staticKK 
SequenceKK 
DOJumpKK %
(KK% &
thisKK& *
Rigidbody2DKK+ 6
targetKK7 =
,KK= >
Vector2KK? F
endValueKKG O
,KKO P
floatKKQ V
	jumpPowerKKW `
,KK` a
intKKb e
numJumpsKKf n
,KKn o
floatKKp u
durationKKv ~
,KK~ 
bool
KKÄ Ñ
snapping
KKÖ ç
=
KKé è
false
KKê ï
)
KKï ñ
{LL 	
ifMM 
(MM 
numJumpsMM 
<MM 
$numMM 
)MM 
numJumpsMM &
=MM' (
$numMM) *
;MM* +
floatNN 
	startPosYNN 
=NN 
$numNN 
;NN  
floatOO 
offsetYOO 
=OO 
-OO 
$numOO 
;OO 
boolPP 

offsetYSetPP 
=PP 
falsePP #
;PP# $
SequenceQQ 
sQQ 
=QQ 
DOTweenQQ  
.QQ  !
SequenceQQ! )
(QQ) *
)QQ* +
;QQ+ ,
TweenRR 
yTweenRR 
=RR 
DOTweenRR "
.RR" #
ToRR# %
(RR% &
(RR& '
)RR' (
=>RR) +
targetRR, 2
.RR2 3
positionRR3 ;
,RR; <
xRR= >
=>RR? A
targetRRB H
.RRH I
positionRRI Q
=RRR S
xRRT U
,RRU V
newRRW Z
Vector2RR[ b
(RRb c
$numRRc d
,RRd e
	jumpPowerRRf o
)RRo p
,RRp q
durationRRr z
/RR{ |
(RR} ~
numJumps	RR~ Ü
*
RRá à
$num
RRâ ä
)
RRä ã
)
RRã å
.SS 

SetOptionsSS 
(SS 
AxisConstraintSS *
.SS* +
YSS+ ,
,SS, -
snappingSS. 6
)SS6 7
.SS7 8
SetEaseSS8 ?
(SS? @
EaseSS@ D
.SSD E
OutQuadSSE L
)SSL M
.SSM N
SetRelativeSSN Y
(SSY Z
)SSZ [
.TT 
SetLoopsTT 
(TT 
numJumpsTT "
*TT# $
$numTT% &
,TT& '
LoopTypeTT( 0
.TT0 1
YoyoTT1 5
)TT5 6
.UU 
OnStartUU 
(UU 
(UU 
)UU 
=>UU 
	startPosYUU (
=UU) *
targetUU+ 1
.UU1 2
positionUU2 :
.UU: ;
yUU; <
)UU< =
;UU= >
sVV 
.VV 
AppendVV 
(VV 
DOTweenVV 
.VV 
ToVV 
(VV  
(VV  !
)VV! "
=>VV# %
targetVV& ,
.VV, -
positionVV- 5
,VV5 6
xVV7 8
=>VV9 ;
targetVV< B
.VVB C
positionVVC K
=VVL M
xVVN O
,VVO P
newVVQ T
Vector2VVU \
(VV\ ]
endValueVV] e
.VVe f
xVVf g
,VVg h
$numVVi j
)VVj k
,VVk l
durationVVm u
)VVu v
.WW 

SetOptionsWW 
(WW  
AxisConstraintWW  .
.WW. /
XWW/ 0
,WW0 1
snappingWW2 :
)WW: ;
.WW; <
SetEaseWW< C
(WWC D
EaseWWD H
.WWH I
LinearWWI O
)WWO P
)XX 
.XX 
JoinXX 
(XX 
yTweenXX 
)XX 
.YY 
	SetTargetYY 
(YY 
targetYY !
)YY! "
.YY" #
SetEaseYY# *
(YY* +
DOTweenYY+ 2
.YY2 3
defaultEaseTypeYY3 B
)YYB C
;YYC D
yTweenZZ 
.ZZ 
OnUpdateZZ 
(ZZ 
(ZZ 
)ZZ 
=>ZZ !
{ZZ" #
if[[ 
([[ 
![[ 

offsetYSet[[ 
)[[  
{[[! "

offsetYSet\\ 
=\\  
true\\! %
;\\% &
offsetY]] 
=]] 
s]] 
.]]  

isRelative]]  *
?]]+ ,
endValue]]- 5
.]]5 6
y]]6 7
:]]8 9
endValue]]: B
.]]B C
y]]C D
-]]E F
	startPosY]]G P
;]]P Q
}^^ 
Vector3__ 
pos__ 
=__ 
target__ $
.__$ %
position__% -
;__- .
pos`` 
.`` 
y`` 
+=`` 
	DOVirtual`` "
.``" #

EasedValue``# -
(``- .
$num``. /
,``/ 0
offsetY``1 8
,``8 9
yTween``: @
.``@ A
ElapsedPercentage``A R
(``R S
)``S T
,``T U
Ease``V Z
.``Z [
OutQuad``[ b
)``b c
;``c d
targetaa 
.aa 
MovePositionaa #
(aa# $
posaa$ '
)aa' (
;aa( )
}bb 
)bb 
;bb 
returncc 
scc 
;cc 
}dd 	
publicrr 
staticrr 
TweenerCorerr !
<rr! "
Vector3rr" )
,rr) *
Pathrr+ /
,rr/ 0
PathOptionsrr1 <
>rr< =
DOPathrr> D
(rrD E
thisss 
Rigidbody2Dss 
targetss #
,ss# $
Vector2ss% ,
[ss, -
]ss- .
pathss/ 3
,ss3 4
floatss5 :
durationss; C
,ssC D
PathTypessE M
pathTypessN V
=ssW X
PathTypessY a
.ssa b
Linearssb h
,ssh i
PathModett 
pathModett 
=tt 
PathModett  (
.tt( )
Full3Dtt) /
,tt/ 0
inttt1 4

resolutiontt5 ?
=tt@ A
$numttB D
,ttD E
ColorttF K
?ttK L

gizmoColorttM W
=ttX Y
nullttZ ^
)uu 	
{vv 	
ifww 
(ww 

resolutionww 
<ww 
$numww 
)ww 

resolutionww  *
=ww+ ,
$numww- .
;ww. /
intxx 
lenxx 
=xx 
pathxx 
.xx 
Lengthxx !
;xx! "
Vector3yy 
[yy 
]yy 
path3Dyy 
=yy 
newyy "
Vector3yy# *
[yy* +
lenyy+ .
]yy. /
;yy/ 0
forzz 
(zz 
intzz 
izz 
=zz 
$numzz 
;zz 
izz 
<zz 
lenzz  #
;zz# $
++zz% '
izz' (
)zz( )
path3Dzz* 0
[zz0 1
izz1 2
]zz2 3
=zz4 5
pathzz6 :
[zz: ;
izz; <
]zz< =
;zz= >
TweenerCore{{ 
<{{ 
Vector3{{ 
,{{  
Path{{! %
,{{% &
PathOptions{{' 2
>{{2 3
t{{4 5
={{6 7
DOTween{{8 ?
.{{? @
To{{@ B
({{B C

PathPlugin{{C M
.{{M N
Get{{N Q
({{Q R
){{R S
,{{S T
({{U V
){{V W
=>{{X Z
target{{[ a
.{{a b
position{{b j
,{{j k
x{{l m
=>{{n p
target{{q w
.{{w x
MovePosition	{{x Ñ
(
{{Ñ Ö
x
{{Ö Ü
)
{{Ü á
,
{{á à
new
{{â å
Path
{{ç ë
(
{{ë í
pathType
{{í ö
,
{{ö õ
path3D
{{ú ¢
,
{{¢ £

resolution
{{§ Æ
,
{{Æ Ø

gizmoColor
{{∞ ∫
)
{{∫ ª
,
{{ª º
duration
{{Ω ≈
)
{{≈ ∆
.|| 
	SetTarget|| 
(|| 
target|| !
)||! "
.||" #
	SetUpdate||# ,
(||, -

UpdateType||- 7
.||7 8
Fixed||8 =
)||= >
;||> ?
t~~ 
.~~ 
plugOptions~~ 
.~~ 
isRigidbody2D~~ '
=~~( )
true~~* .
;~~. /
t 
. 
plugOptions 
. 
mode 
=  
pathMode! )
;) *
return
ÄÄ 
t
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
public
éé 
static
éé 
TweenerCore
éé !
<
éé! "
Vector3
éé" )
,
éé) *
Path
éé+ /
,
éé/ 0
PathOptions
éé1 <
>
éé< =
DOLocalPath
éé> I
(
ééI J
this
èè 
Rigidbody2D
èè 
target
èè #
,
èè# $
Vector2
èè% ,
[
èè, -
]
èè- .
path
èè/ 3
,
èè3 4
float
èè5 :
duration
èè; C
,
èèC D
PathType
èèE M
pathType
èèN V
=
èèW X
PathType
èèY a
.
èèa b
Linear
èèb h
,
èèh i
PathMode
êê 
pathMode
êê 
=
êê 
PathMode
êê  (
.
êê( )
Full3D
êê) /
,
êê/ 0
int
êê1 4

resolution
êê5 ?
=
êê@ A
$num
êêB D
,
êêD E
Color
êêF K
?
êêK L

gizmoColor
êêM W
=
êêX Y
null
êêZ ^
)
ëë 	
{
íí 	
if
ìì 
(
ìì 

resolution
ìì 
<
ìì 
$num
ìì 
)
ìì 

resolution
ìì  *
=
ìì+ ,
$num
ìì- .
;
ìì. /
int
îî 
len
îî 
=
îî 
path
îî 
.
îî 
Length
îî !
;
îî! "
Vector3
ïï 
[
ïï 
]
ïï 
path3D
ïï 
=
ïï 
new
ïï "
Vector3
ïï# *
[
ïï* +
len
ïï+ .
]
ïï. /
;
ïï/ 0
for
ññ 
(
ññ 
int
ññ 
i
ññ 
=
ññ 
$num
ññ 
;
ññ 
i
ññ 
<
ññ 
len
ññ  #
;
ññ# $
++
ññ% '
i
ññ' (
)
ññ( )
path3D
ññ* 0
[
ññ0 1
i
ññ1 2
]
ññ2 3
=
ññ4 5
path
ññ6 :
[
ññ: ;
i
ññ; <
]
ññ< =
;
ññ= >
	Transform
óó 
trans
óó 
=
óó 
target
óó $
.
óó$ %
	transform
óó% .
;
óó. /
TweenerCore
òò 
<
òò 
Vector3
òò 
,
òò  
Path
òò! %
,
òò% &
PathOptions
òò' 2
>
òò2 3
t
òò4 5
=
òò6 7
DOTween
òò8 ?
.
òò? @
To
òò@ B
(
òòB C

PathPlugin
òòC M
.
òòM N
Get
òòN Q
(
òòQ R
)
òòR S
,
òòS T
(
òòU V
)
òòV W
=>
òòX Z
trans
òò[ `
.
òò` a
localPosition
òòa n
,
òòn o
x
òòp q
=>
òòr t
target
òòu {
.
òò{ |
MovePositionòò| à
(òòà â
transòòâ é
.òòé è
parentòòè ï
==òòñ ò
nullòòô ù
?òòû ü
xòò† °
:òò¢ £
transòò§ ©
.òò© ™
parentòò™ ∞
.òò∞ ±
TransformPointòò± ø
(òòø ¿
xòò¿ ¡
)òò¡ ¬
)òò¬ √
,òò√ ƒ
newòò≈ »
Pathòò… Õ
(òòÕ Œ
pathTypeòòŒ ÷
,òò÷ ◊
path3Dòòÿ ﬁ
,òòﬁ ﬂ

resolutionòò‡ Í
,òòÍ Î

gizmoColoròòÏ ˆ
)òòˆ ˜
,òò˜ ¯
durationòò˘ Å
)òòÅ Ç
.
ôô 
	SetTarget
ôô 
(
ôô 
target
ôô !
)
ôô! "
.
ôô" #
	SetUpdate
ôô# ,
(
ôô, -

UpdateType
ôô- 7
.
ôô7 8
Fixed
ôô8 =
)
ôô= >
;
ôô> ?
t
õõ 
.
õõ 
plugOptions
õõ 
.
õõ 
isRigidbody2D
õõ '
=
õõ( )
true
õõ* .
;
õõ. /
t
úú 
.
úú 
plugOptions
úú 
.
úú 
mode
úú 
=
úú  
pathMode
úú! )
;
úú) *
t
ùù 
.
ùù 
plugOptions
ùù 
.
ùù 
useLocalPosition
ùù *
=
ùù+ ,
true
ùù- 1
;
ùù1 2
return
ûû 
t
ûû 
;
ûû 
}
üü 	
internal
°° 
static
°° 
TweenerCore
°° #
<
°°# $
Vector3
°°$ +
,
°°+ ,
Path
°°- 1
,
°°1 2
PathOptions
°°3 >
>
°°> ?
DOPath
°°@ F
(
°°F G
this
¢¢ 
Rigidbody2D
¢¢ 
target
¢¢ #
,
¢¢# $
Path
¢¢% )
path
¢¢* .
,
¢¢. /
float
¢¢0 5
duration
¢¢6 >
,
¢¢> ?
PathMode
¢¢@ H
pathMode
¢¢I Q
=
¢¢R S
PathMode
¢¢T \
.
¢¢\ ]
Full3D
¢¢] c
)
££ 	
{
§§ 	
TweenerCore
•• 
<
•• 
Vector3
•• 
,
••  
Path
••! %
,
••% &
PathOptions
••' 2
>
••2 3
t
••4 5
=
••6 7
DOTween
••8 ?
.
••? @
To
••@ B
(
••B C

PathPlugin
••C M
.
••M N
Get
••N Q
(
••Q R
)
••R S
,
••S T
(
••U V
)
••V W
=>
••X Z
target
••[ a
.
••a b
position
••b j
,
••j k
x
••l m
=>
••n p
target
••q w
.
••w x
MovePosition••x Ñ
(••Ñ Ö
x••Ö Ü
)••Ü á
,••á à
path••â ç
,••ç é
duration••è ó
)••ó ò
.
¶¶ 
	SetTarget
¶¶ 
(
¶¶ 
target
¶¶ !
)
¶¶! "
;
¶¶" #
t
®® 
.
®® 
plugOptions
®® 
.
®® 
isRigidbody2D
®® '
=
®®( )
true
®®* .
;
®®. /
t
©© 
.
©© 
plugOptions
©© 
.
©© 
mode
©© 
=
©©  
pathMode
©©! )
;
©©) *
return
™™ 
t
™™ 
;
™™ 
}
´´ 	
internal
¨¨ 
static
¨¨ 
TweenerCore
¨¨ #
<
¨¨# $
Vector3
¨¨$ +
,
¨¨+ ,
Path
¨¨- 1
,
¨¨1 2
PathOptions
¨¨3 >
>
¨¨> ?
DOLocalPath
¨¨@ K
(
¨¨K L
this
≠≠ 
Rigidbody2D
≠≠ 
target
≠≠ #
,
≠≠# $
Path
≠≠% )
path
≠≠* .
,
≠≠. /
float
≠≠0 5
duration
≠≠6 >
,
≠≠> ?
PathMode
≠≠@ H
pathMode
≠≠I Q
=
≠≠R S
PathMode
≠≠T \
.
≠≠\ ]
Full3D
≠≠] c
)
ÆÆ 	
{
ØØ 	
	Transform
∞∞ 
trans
∞∞ 
=
∞∞ 
target
∞∞ $
.
∞∞$ %
	transform
∞∞% .
;
∞∞. /
TweenerCore
±± 
<
±± 
Vector3
±± 
,
±±  
Path
±±! %
,
±±% &
PathOptions
±±' 2
>
±±2 3
t
±±4 5
=
±±6 7
DOTween
±±8 ?
.
±±? @
To
±±@ B
(
±±B C

PathPlugin
±±C M
.
±±M N
Get
±±N Q
(
±±Q R
)
±±R S
,
±±S T
(
±±U V
)
±±V W
=>
±±X Z
trans
±±[ `
.
±±` a
localPosition
±±a n
,
±±n o
x
±±p q
=>
±±r t
target
±±u {
.
±±{ |
MovePosition±±| à
(±±à â
trans±±â é
.±±é è
parent±±è ï
==±±ñ ò
null±±ô ù
?±±û ü
x±±† °
:±±¢ £
trans±±§ ©
.±±© ™
parent±±™ ∞
.±±∞ ±
TransformPoint±±± ø
(±±ø ¿
x±±¿ ¡
)±±¡ ¬
)±±¬ √
,±±√ ƒ
path±±≈ …
,±±…  
duration±±À ”
)±±” ‘
.
≤≤ 
	SetTarget
≤≤ 
(
≤≤ 
target
≤≤ !
)
≤≤! "
;
≤≤" #
t
¥¥ 
.
¥¥ 
plugOptions
¥¥ 
.
¥¥ 
isRigidbody2D
¥¥ '
=
¥¥( )
true
¥¥* .
;
¥¥. /
t
µµ 
.
µµ 
plugOptions
µµ 
.
µµ 
mode
µµ 
=
µµ  
pathMode
µµ! )
;
µµ) *
t
∂∂ 
.
∂∂ 
plugOptions
∂∂ 
.
∂∂ 
useLocalPosition
∂∂ *
=
∂∂+ ,
true
∂∂- 1
;
∂∂1 2
return
∑∑ 
t
∑∑ 
;
∑∑ 
}
∏∏ 	
}
øø 
}¿¿ æı
OD:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModuleUnityVersion.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class %
DOTweenModuleUnityVersion .
{ 
public 
static 
Sequence 
DOGradientColor .
(. /
this/ 3
Material4 <
target= C
,C D
GradientE M
gradientN V
,V W
floatX ]
duration^ f
)f g
{ 	
Sequence   
s   
=   
DOTween    
.    !
Sequence  ! )
(  ) *
)  * +
;  + ,
GradientColorKey!! 
[!! 
]!! 
colors!! %
=!!& '
gradient!!( 0
.!!0 1
	colorKeys!!1 :
;!!: ;
int"" 
len"" 
="" 
colors"" 
."" 
Length"" #
;""# $
for## 
(## 
int## 
i## 
=## 
$num## 
;## 
i## 
<## 
len##  #
;### $
++##% '
i##' (
)##( )
{##* +
GradientColorKey$$  
c$$! "
=$$# $
colors$$% +
[$$+ ,
i$$, -
]$$- .
;$$. /
if%% 
(%% 
i%% 
==%% 
$num%% 
&&%% 
c%% 
.%%  
time%%  $
<=%%% '
$num%%( )
)%%) *
{%%+ ,
target&& 
.&& 
color&&  
=&&! "
c&&# $
.&&$ %
color&&% *
;&&* +
continue'' 
;'' 
}(( 
float)) 
colorDuration)) #
=))$ %
i))& '
==))( *
len))+ .
-))/ 0
$num))1 2
?** 
duration** 
-**  
s**! "
.**" #
Duration**# +
(**+ ,
false**, 1
)**1 2
:++ 
duration++ 
*++  
(++! "
i++" #
==++$ &
$num++' (
?++) *
c+++ ,
.++, -
time++- 1
:++2 3
c++4 5
.++5 6
time++6 :
-++; <
colors++= C
[++C D
i++D E
-++F G
$num++H I
]++I J
.++J K
time++K O
)++O P
;++P Q
s,, 
.,, 
Append,, 
(,, 
target,, 
.,,  
DOColor,,  '
(,,' (
c,,( )
.,,) *
color,,* /
,,,/ 0
colorDuration,,1 >
),,> ?
.,,? @
SetEase,,@ G
(,,G H
Ease,,H L
.,,L M
Linear,,M S
),,S T
),,T U
;,,U V
}-- 
s.. 
... 
	SetTarget.. 
(.. 
target.. 
).. 
;..  
return// 
s// 
;// 
}00 	
public77 
static77 
Sequence77 
DOGradientColor77 .
(77. /
this77/ 3
Material774 <
target77= C
,77C D
Gradient77E M
gradient77N V
,77V W
string77X ^
property77_ g
,77g h
float77i n
duration77o w
)77w x
{88 	
Sequence99 
s99 
=99 
DOTween99  
.99  !
Sequence99! )
(99) *
)99* +
;99+ ,
GradientColorKey:: 
[:: 
]:: 
colors:: %
=::& '
gradient::( 0
.::0 1
	colorKeys::1 :
;::: ;
int;; 
len;; 
=;; 
colors;; 
.;; 
Length;; #
;;;# $
for<< 
(<< 
int<< 
i<< 
=<< 
$num<< 
;<< 
i<< 
<<< 
len<<  #
;<<# $
++<<% '
i<<' (
)<<( )
{<<* +
GradientColorKey==  
c==! "
===# $
colors==% +
[==+ ,
i==, -
]==- .
;==. /
if>> 
(>> 
i>> 
==>> 
$num>> 
&&>> 
c>> 
.>>  
time>>  $
<=>>% '
$num>>( )
)>>) *
{>>+ ,
target?? 
.?? 
SetColor?? #
(??# $
property??$ ,
,??, -
c??. /
.??/ 0
color??0 5
)??5 6
;??6 7
continue@@ 
;@@ 
}AA 
floatBB 
colorDurationBB #
=BB$ %
iBB& '
==BB( *
lenBB+ .
-BB/ 0
$numBB1 2
?CC 
durationCC 
-CC  
sCC! "
.CC" #
DurationCC# +
(CC+ ,
falseCC, 1
)CC1 2
:DD 
durationDD 
*DD  
(DD! "
iDD" #
==DD$ &
$numDD' (
?DD) *
cDD+ ,
.DD, -
timeDD- 1
:DD2 3
cDD4 5
.DD5 6
timeDD6 :
-DD; <
colorsDD= C
[DDC D
iDDD E
-DDF G
$numDDH I
]DDI J
.DDJ K
timeDDK O
)DDO P
;DDP Q
sEE 
.EE 
AppendEE 
(EE 
targetEE 
.EE  
DOColorEE  '
(EE' (
cEE( )
.EE) *
colorEE* /
,EE/ 0
propertyEE1 9
,EE9 :
colorDurationEE; H
)EEH I
.EEI J
SetEaseEEJ Q
(EEQ R
EaseEER V
.EEV W
LinearEEW ]
)EE] ^
)EE^ _
;EE_ `
}FF 
sGG 
.GG 
	SetTargetGG 
(GG 
targetGG 
)GG 
;GG  
returnHH 
sHH 
;HH 
}II 	
publicZZ 
staticZZ "
CustomYieldInstructionZZ ,
WaitForCompletionZZ- >
(ZZ> ?
thisZZ? C
TweenZZD I
tZZJ K
,ZZK L
boolZZM Q(
returnCustomYieldInstructionZZR n
)ZZn o
{[[ 	
if\\ 
(\\ 
!\\ 
t\\ 
.\\ 
active\\ 
)\\ 
{\\ 
if]] 
(]] 
Debugger]] 
.]] 
logPriority]] (
>]]) *
$num]]+ ,
)]], -
Debugger]]. 6
.]]6 7
LogInvalidTween]]7 F
(]]F G
t]]G H
)]]H I
;]]I J
return^^ 
null^^ 
;^^ 
}__ 
return`` 
new``  
DOTweenCYInstruction`` +
.``+ ,
WaitForCompletion``, =
(``= >
t``> ?
)``? @
;``@ A
}aa 	
publichh 
statichh "
CustomYieldInstructionhh ,
WaitForRewindhh- :
(hh: ;
thishh; ?
Tweenhh@ E
thhF G
,hhG H
boolhhI M(
returnCustomYieldInstructionhhN j
)hhj k
{ii 	
ifjj 
(jj 
!jj 
tjj 
.jj 
activejj 
)jj 
{jj 
ifkk 
(kk 
Debuggerkk 
.kk 
logPrioritykk (
>kk) *
$numkk+ ,
)kk, -
Debuggerkk. 6
.kk6 7
LogInvalidTweenkk7 F
(kkF G
tkkG H
)kkH I
;kkI J
returnll 
nullll 
;ll 
}mm 
returnnn 
newnn  
DOTweenCYInstructionnn +
.nn+ ,
WaitForRewindnn, 9
(nn9 :
tnn: ;
)nn; <
;nn< =
}oo 	
publicvv 
staticvv "
CustomYieldInstructionvv ,
WaitForKillvv- 8
(vv8 9
thisvv9 =
Tweenvv> C
tvvD E
,vvE F
boolvvG K(
returnCustomYieldInstructionvvL h
)vvh i
{ww 	
ifxx 
(xx 
!xx 
txx 
.xx 
activexx 
)xx 
{xx 
ifyy 
(yy 
Debuggeryy 
.yy 
logPriorityyy (
>yy) *
$numyy+ ,
)yy, -
Debuggeryy. 6
.yy6 7
LogInvalidTweenyy7 F
(yyF G
tyyG H
)yyH I
;yyI J
returnzz 
nullzz 
;zz 
}{{ 
return|| 
new||  
DOTweenCYInstruction|| +
.||+ ,
WaitForKill||, 7
(||7 8
t||8 9
)||9 :
;||: ;
}}} 	
public
ÖÖ 
static
ÖÖ $
CustomYieldInstruction
ÖÖ ,!
WaitForElapsedLoops
ÖÖ- @
(
ÖÖ@ A
this
ÖÖA E
Tween
ÖÖF K
t
ÖÖL M
,
ÖÖM N
int
ÖÖO R
elapsedLoops
ÖÖS _
,
ÖÖ_ `
bool
ÖÖa e+
returnCustomYieldInstructionÖÖf Ç
)ÖÖÇ É
{
ÜÜ 	
if
áá 
(
áá 
!
áá 
t
áá 
.
áá 
active
áá 
)
áá 
{
áá 
if
àà 
(
àà 
Debugger
àà 
.
àà 
logPriority
àà (
>
àà) *
$num
àà+ ,
)
àà, -
Debugger
àà. 6
.
àà6 7
LogInvalidTween
àà7 F
(
ààF G
t
ààG H
)
ààH I
;
ààI J
return
ââ 
null
ââ 
;
ââ 
}
ää 
return
ãã 
new
ãã "
DOTweenCYInstruction
ãã +
.
ãã+ ,!
WaitForElapsedLoops
ãã, ?
(
ãã? @
t
ãã@ A
,
ããA B
elapsedLoops
ããC O
)
ããO P
;
ããP Q
}
åå 	
public
ïï 
static
ïï $
CustomYieldInstruction
ïï ,
WaitForPosition
ïï- <
(
ïï< =
this
ïï= A
Tween
ïïB G
t
ïïH I
,
ïïI J
float
ïïK P
position
ïïQ Y
,
ïïY Z
bool
ïï[ _*
returnCustomYieldInstruction
ïï` |
)
ïï| }
{
ññ 	
if
óó 
(
óó 
!
óó 
t
óó 
.
óó 
active
óó 
)
óó 
{
óó 
if
òò 
(
òò 
Debugger
òò 
.
òò 
logPriority
òò (
>
òò) *
$num
òò+ ,
)
òò, -
Debugger
òò. 6
.
òò6 7
LogInvalidTween
òò7 F
(
òòF G
t
òòG H
)
òòH I
;
òòI J
return
ôô 
null
ôô 
;
ôô 
}
öö 
return
õõ 
new
õõ "
DOTweenCYInstruction
õõ +
.
õõ+ ,
WaitForPosition
õõ, ;
(
õõ; <
t
õõ< =
,
õõ= >
position
õõ? G
)
õõG H
;
õõH I
}
úú 	
public
§§ 
static
§§ $
CustomYieldInstruction
§§ ,
WaitForStart
§§- 9
(
§§9 :
this
§§: >
Tween
§§? D
t
§§E F
,
§§F G
bool
§§H L*
returnCustomYieldInstruction
§§M i
)
§§i j
{
•• 	
if
¶¶ 
(
¶¶ 
!
¶¶ 
t
¶¶ 
.
¶¶ 
active
¶¶ 
)
¶¶ 
{
¶¶ 
if
ßß 
(
ßß 
Debugger
ßß 
.
ßß 
logPriority
ßß (
>
ßß) *
$num
ßß+ ,
)
ßß, -
Debugger
ßß. 6
.
ßß6 7
LogInvalidTween
ßß7 F
(
ßßF G
t
ßßG H
)
ßßH I
;
ßßI J
return
®® 
null
®® 
;
®® 
}
©© 
return
™™ 
new
™™ "
DOTweenCYInstruction
™™ +
.
™™+ ,
WaitForStart
™™, 8
(
™™8 9
t
™™9 :
)
™™: ;
;
™™; <
}
´´ 	
public
ºº 
static
ºº 
TweenerCore
ºº !
<
ºº! "
Vector2
ºº" )
,
ºº) *
Vector2
ºº+ 2
,
ºº2 3
VectorOptions
ºº4 A
>
ººA B
DOOffset
ººC K
(
ººK L
this
ººL P
Material
ººQ Y
target
ººZ `
,
ºº` a
Vector2
ººb i
endValue
ººj r
,
ººr s
int
ººt w

propertyIDººx Ç
,ººÇ É
floatººÑ â
durationººä í
)ººí ì
{
ΩΩ 	
if
ææ 
(
ææ 
!
ææ 
target
ææ 
.
ææ 
HasProperty
ææ #
(
ææ# $

propertyID
ææ$ .
)
ææ. /
)
ææ/ 0
{
ææ1 2
if
øø 
(
øø 
Debugger
øø 
.
øø 
logPriority
øø (
>
øø) *
$num
øø+ ,
)
øø, -
Debugger
øø. 6
.
øø6 7(
LogMissingMaterialProperty
øø7 Q
(
øøQ R

propertyID
øøR \
)
øø\ ]
;
øø] ^
return
¿¿ 
null
¿¿ 
;
¿¿ 
}
¡¡ 
TweenerCore
¬¬ 
<
¬¬ 
Vector2
¬¬ 
,
¬¬  
Vector2
¬¬! (
,
¬¬( )
VectorOptions
¬¬* 7
>
¬¬7 8
t
¬¬9 :
=
¬¬; <
DOTween
¬¬= D
.
¬¬D E
To
¬¬E G
(
¬¬G H
(
¬¬H I
)
¬¬I J
=>
¬¬K M
target
¬¬N T
.
¬¬T U
GetTextureOffset
¬¬U e
(
¬¬e f

propertyID
¬¬f p
)
¬¬p q
,
¬¬q r
x
¬¬s t
=>
¬¬u w
target
¬¬x ~
.
¬¬~ 
SetTextureOffset¬¬ è
(¬¬è ê

propertyID¬¬ê ö
,¬¬ö õ
x¬¬ú ù
)¬¬ù û
,¬¬û ü
endValue¬¬† ®
,¬¬® ©
duration¬¬™ ≤
)¬¬≤ ≥
;¬¬≥ ¥
t
√√ 
.
√√ 
	SetTarget
√√ 
(
√√ 
target
√√ 
)
√√ 
;
√√  
return
ƒƒ 
t
ƒƒ 
;
ƒƒ 
}
≈≈ 	
public
ÃÃ 
static
ÃÃ 
TweenerCore
ÃÃ !
<
ÃÃ! "
Vector2
ÃÃ" )
,
ÃÃ) *
Vector2
ÃÃ+ 2
,
ÃÃ2 3
VectorOptions
ÃÃ4 A
>
ÃÃA B
DOTiling
ÃÃC K
(
ÃÃK L
this
ÃÃL P
Material
ÃÃQ Y
target
ÃÃZ `
,
ÃÃ` a
Vector2
ÃÃb i
endValue
ÃÃj r
,
ÃÃr s
int
ÃÃt w

propertyIDÃÃx Ç
,ÃÃÇ É
floatÃÃÑ â
durationÃÃä í
)ÃÃí ì
{
ÕÕ 	
if
ŒŒ 
(
ŒŒ 
!
ŒŒ 
target
ŒŒ 
.
ŒŒ 
HasProperty
ŒŒ #
(
ŒŒ# $

propertyID
ŒŒ$ .
)
ŒŒ. /
)
ŒŒ/ 0
{
ŒŒ1 2
if
œœ 
(
œœ 
Debugger
œœ 
.
œœ 
logPriority
œœ (
>
œœ) *
$num
œœ+ ,
)
œœ, -
Debugger
œœ. 6
.
œœ6 7(
LogMissingMaterialProperty
œœ7 Q
(
œœQ R

propertyID
œœR \
)
œœ\ ]
;
œœ] ^
return
–– 
null
–– 
;
–– 
}
—— 
TweenerCore
““ 
<
““ 
Vector2
““ 
,
““  
Vector2
““! (
,
““( )
VectorOptions
““* 7
>
““7 8
t
““9 :
=
““; <
DOTween
““= D
.
““D E
To
““E G
(
““G H
(
““H I
)
““I J
=>
““K M
target
““N T
.
““T U
GetTextureScale
““U d
(
““d e

propertyID
““e o
)
““o p
,
““p q
x
““r s
=>
““t v
target
““w }
.
““} ~
SetTextureScale““~ ç
(““ç é

propertyID““é ò
,““ò ô
x““ö õ
)““õ ú
,““ú ù
endValue““û ¶
,““¶ ß
duration““® ∞
)““∞ ±
;““± ≤
t
”” 
.
”” 
	SetTarget
”” 
(
”” 
target
”” 
)
”” 
;
””  
return
‘‘ 
t
‘‘ 
;
‘‘ 
}
’’ 	
public
‰‰ 
static
‰‰ 
async
‰‰ 
System
‰‰ "
.
‰‰" #
	Threading
‰‰# ,
.
‰‰, -
Tasks
‰‰- 2
.
‰‰2 3
Task
‰‰3 7$
AsyncWaitForCompletion
‰‰8 N
(
‰‰N O
this
‰‰O S
Tween
‰‰T Y
t
‰‰Z [
)
‰‰[ \
{
ÂÂ 	
if
ÊÊ 
(
ÊÊ 
!
ÊÊ 
t
ÊÊ 
.
ÊÊ 
active
ÊÊ 
)
ÊÊ 
{
ÊÊ 
if
ÁÁ 
(
ÁÁ 
Debugger
ÁÁ 
.
ÁÁ 
logPriority
ÁÁ (
>
ÁÁ) *
$num
ÁÁ+ ,
)
ÁÁ, -
Debugger
ÁÁ. 6
.
ÁÁ6 7
LogInvalidTween
ÁÁ7 F
(
ÁÁF G
t
ÁÁG H
)
ÁÁH I
;
ÁÁI J
return
ËË 
;
ËË 
}
ÈÈ 
while
ÍÍ 
(
ÍÍ 
t
ÍÍ 
.
ÍÍ 
active
ÍÍ 
&&
ÍÍ 
!
ÍÍ  
t
ÍÍ  !
.
ÍÍ! "

IsComplete
ÍÍ" ,
(
ÍÍ, -
)
ÍÍ- .
)
ÍÍ. /
await
ÍÍ0 5
System
ÍÍ6 <
.
ÍÍ< =
	Threading
ÍÍ= F
.
ÍÍF G
Tasks
ÍÍG L
.
ÍÍL M
Task
ÍÍM Q
.
ÍÍQ R
Yield
ÍÍR W
(
ÍÍW X
)
ÍÍX Y
;
ÍÍY Z
}
ÎÎ 	
public
ÚÚ 
static
ÚÚ 
async
ÚÚ 
System
ÚÚ "
.
ÚÚ" #
	Threading
ÚÚ# ,
.
ÚÚ, -
Tasks
ÚÚ- 2
.
ÚÚ2 3
Task
ÚÚ3 7 
AsyncWaitForRewind
ÚÚ8 J
(
ÚÚJ K
this
ÚÚK O
Tween
ÚÚP U
t
ÚÚV W
)
ÚÚW X
{
ÛÛ 	
if
ÙÙ 
(
ÙÙ 
!
ÙÙ 
t
ÙÙ 
.
ÙÙ 
active
ÙÙ 
)
ÙÙ 
{
ÙÙ 
if
ıı 
(
ıı 
Debugger
ıı 
.
ıı 
logPriority
ıı (
>
ıı) *
$num
ıı+ ,
)
ıı, -
Debugger
ıı. 6
.
ıı6 7
LogInvalidTween
ıı7 F
(
ııF G
t
ııG H
)
ııH I
;
ııI J
return
ˆˆ 
;
ˆˆ 
}
˜˜ 
while
¯¯ 
(
¯¯ 
t
¯¯ 
.
¯¯ 
active
¯¯ 
&&
¯¯ 
(
¯¯  
!
¯¯  !
t
¯¯! "
.
¯¯" #

playedOnce
¯¯# -
||
¯¯. 0
t
¯¯1 2
.
¯¯2 3
position
¯¯3 ;
*
¯¯< =
(
¯¯> ?
t
¯¯? @
.
¯¯@ A
CompletedLoops
¯¯A O
(
¯¯O P
)
¯¯P Q
+
¯¯R S
$num
¯¯T U
)
¯¯U V
>
¯¯W X
$num
¯¯Y Z
)
¯¯Z [
)
¯¯[ \
await
¯¯] b
System
¯¯c i
.
¯¯i j
	Threading
¯¯j s
.
¯¯s t
Tasks
¯¯t y
.
¯¯y z
Task
¯¯z ~
.
¯¯~ 
Yield¯¯ Ñ
(¯¯Ñ Ö
)¯¯Ö Ü
;¯¯Ü á
}
˘˘ 	
public
ÄÄ 
static
ÄÄ 
async
ÄÄ 
System
ÄÄ "
.
ÄÄ" #
	Threading
ÄÄ# ,
.
ÄÄ, -
Tasks
ÄÄ- 2
.
ÄÄ2 3
Task
ÄÄ3 7
AsyncWaitForKill
ÄÄ8 H
(
ÄÄH I
this
ÄÄI M
Tween
ÄÄN S
t
ÄÄT U
)
ÄÄU V
{
ÅÅ 	
if
ÇÇ 
(
ÇÇ 
!
ÇÇ 
t
ÇÇ 
.
ÇÇ 
active
ÇÇ 
)
ÇÇ 
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 
Debugger
ÉÉ 
.
ÉÉ 
logPriority
ÉÉ (
>
ÉÉ) *
$num
ÉÉ+ ,
)
ÉÉ, -
Debugger
ÉÉ. 6
.
ÉÉ6 7
LogInvalidTween
ÉÉ7 F
(
ÉÉF G
t
ÉÉG H
)
ÉÉH I
;
ÉÉI J
return
ÑÑ 
;
ÑÑ 
}
ÖÖ 
while
ÜÜ 
(
ÜÜ 
t
ÜÜ 
.
ÜÜ 
active
ÜÜ 
)
ÜÜ 
await
ÜÜ "
System
ÜÜ# )
.
ÜÜ) *
	Threading
ÜÜ* 3
.
ÜÜ3 4
Tasks
ÜÜ4 9
.
ÜÜ9 :
Task
ÜÜ: >
.
ÜÜ> ?
Yield
ÜÜ? D
(
ÜÜD E
)
ÜÜE F
;
ÜÜF G
}
áá 	
public
èè 
static
èè 
async
èè 
System
èè "
.
èè" #
	Threading
èè# ,
.
èè, -
Tasks
èè- 2
.
èè2 3
Task
èè3 7&
AsyncWaitForElapsedLoops
èè8 P
(
èèP Q
this
èèQ U
Tween
èèV [
t
èè\ ]
,
èè] ^
int
èè_ b
elapsedLoops
èèc o
)
èèo p
{
êê 	
if
ëë 
(
ëë 
!
ëë 
t
ëë 
.
ëë 
active
ëë 
)
ëë 
{
ëë 
if
íí 
(
íí 
Debugger
íí 
.
íí 
logPriority
íí (
>
íí) *
$num
íí+ ,
)
íí, -
Debugger
íí. 6
.
íí6 7
LogInvalidTween
íí7 F
(
ííF G
t
ííG H
)
ííH I
;
ííI J
return
ìì 
;
ìì 
}
îî 
while
ïï 
(
ïï 
t
ïï 
.
ïï 
active
ïï 
&&
ïï 
t
ïï  
.
ïï  !
CompletedLoops
ïï! /
(
ïï/ 0
)
ïï0 1
<
ïï2 3
elapsedLoops
ïï4 @
)
ïï@ A
await
ïïB G
System
ïïH N
.
ïïN O
	Threading
ïïO X
.
ïïX Y
Tasks
ïïY ^
.
ïï^ _
Task
ïï_ c
.
ïïc d
Yield
ïïd i
(
ïïi j
)
ïïj k
;
ïïk l
}
ññ 	
public
üü 
static
üü 
async
üü 
System
üü "
.
üü" #
	Threading
üü# ,
.
üü, -
Tasks
üü- 2
.
üü2 3
Task
üü3 7"
AsyncWaitForPosition
üü8 L
(
üüL M
this
üüM Q
Tween
üüR W
t
üüX Y
,
üüY Z
float
üü[ `
position
üüa i
)
üüi j
{
†† 	
if
°° 
(
°° 
!
°° 
t
°° 
.
°° 
active
°° 
)
°° 
{
°° 
if
¢¢ 
(
¢¢ 
Debugger
¢¢ 
.
¢¢ 
logPriority
¢¢ (
>
¢¢) *
$num
¢¢+ ,
)
¢¢, -
Debugger
¢¢. 6
.
¢¢6 7
LogInvalidTween
¢¢7 F
(
¢¢F G
t
¢¢G H
)
¢¢H I
;
¢¢I J
return
££ 
;
££ 
}
§§ 
while
•• 
(
•• 
t
•• 
.
•• 
active
•• 
&&
•• 
t
••  
.
••  !
position
••! )
*
••* +
(
••, -
t
••- .
.
••. /
CompletedLoops
••/ =
(
••= >
)
••> ?
+
••@ A
$num
••B C
)
••C D
<
••E F
position
••G O
)
••O P
await
••Q V
System
••W ]
.
••] ^
	Threading
••^ g
.
••g h
Tasks
••h m
.
••m n
Task
••n r
.
••r s
Yield
••s x
(
••x y
)
••y z
;
••z {
}
¶¶ 	
public
≠≠ 
static
≠≠ 
async
≠≠ 
System
≠≠ "
.
≠≠" #
	Threading
≠≠# ,
.
≠≠, -
Tasks
≠≠- 2
.
≠≠2 3
Task
≠≠3 7
AsyncWaitForStart
≠≠8 I
(
≠≠I J
this
≠≠J N
Tween
≠≠O T
t
≠≠U V
)
≠≠V W
{
ÆÆ 	
if
ØØ 
(
ØØ 
!
ØØ 
t
ØØ 
.
ØØ 
active
ØØ 
)
ØØ 
{
ØØ 
if
∞∞ 
(
∞∞ 
Debugger
∞∞ 
.
∞∞ 
logPriority
∞∞ (
>
∞∞) *
$num
∞∞+ ,
)
∞∞, -
Debugger
∞∞. 6
.
∞∞6 7
LogInvalidTween
∞∞7 F
(
∞∞F G
t
∞∞G H
)
∞∞H I
;
∞∞I J
return
±± 
;
±± 
}
≤≤ 
while
≥≥ 
(
≥≥ 
t
≥≥ 
.
≥≥ 
active
≥≥ 
&&
≥≥ 
!
≥≥  
t
≥≥  !
.
≥≥! "

playedOnce
≥≥" ,
)
≥≥, -
await
≥≥. 3
System
≥≥4 :
.
≥≥: ;
	Threading
≥≥; D
.
≥≥D E
Tasks
≥≥E J
.
≥≥J K
Task
≥≥K O
.
≥≥O P
Yield
≥≥P U
(
≥≥U V
)
≥≥V W
;
≥≥W X
}
¥¥ 	
}
ΩΩ 
public
ƒƒ 

static
ƒƒ 
class
ƒƒ "
DOTweenCYInstruction
ƒƒ ,
{
≈≈ 
public
∆∆ 
class
∆∆ 
WaitForCompletion
∆∆ &
:
∆∆' ($
CustomYieldInstruction
∆∆) ?
{
«« 	
public
»» 
override
»» 
bool
»»  
keepWaiting
»»! ,
{
»»- .
get
»»/ 2
{
»»3 4
return
…… 
t
…… 
.
…… 
active
…… 
&&
……  "
!
……# $
t
……$ %
.
……% &

IsComplete
……& 0
(
……0 1
)
……1 2
;
……2 3
}
   
}
   
readonly
ÀÀ 
Tween
ÀÀ 
t
ÀÀ 
;
ÀÀ 
public
ÃÃ 
WaitForCompletion
ÃÃ $
(
ÃÃ$ %
Tween
ÃÃ% *
tween
ÃÃ+ 0
)
ÃÃ0 1
{
ÕÕ 
t
ŒŒ 
=
ŒŒ 
tween
ŒŒ 
;
ŒŒ 
}
œœ 
}
–– 	
public
““ 
class
““ 
WaitForRewind
““ "
:
““# $$
CustomYieldInstruction
““% ;
{
”” 	
public
‘‘ 
override
‘‘ 
bool
‘‘  
keepWaiting
‘‘! ,
{
‘‘- .
get
‘‘/ 2
{
‘‘3 4
return
’’ 
t
’’ 
.
’’ 
active
’’ 
&&
’’  "
(
’’# $
!
’’$ %
t
’’% &
.
’’& '

playedOnce
’’' 1
||
’’2 4
t
’’5 6
.
’’6 7
position
’’7 ?
*
’’@ A
(
’’B C
t
’’C D
.
’’D E
CompletedLoops
’’E S
(
’’S T
)
’’T U
+
’’V W
$num
’’X Y
)
’’Y Z
>
’’[ \
$num
’’] ^
)
’’^ _
;
’’_ `
}
÷÷ 
}
÷÷ 
readonly
◊◊ 
Tween
◊◊ 
t
◊◊ 
;
◊◊ 
public
ÿÿ 
WaitForRewind
ÿÿ  
(
ÿÿ  !
Tween
ÿÿ! &
tween
ÿÿ' ,
)
ÿÿ, -
{
ŸŸ 
t
⁄⁄ 
=
⁄⁄ 
tween
⁄⁄ 
;
⁄⁄ 
}
€€ 
}
‹‹ 	
public
ﬁﬁ 
class
ﬁﬁ 
WaitForKill
ﬁﬁ  
:
ﬁﬁ! "$
CustomYieldInstruction
ﬁﬁ# 9
{
ﬂﬂ 	
public
‡‡ 
override
‡‡ 
bool
‡‡  
keepWaiting
‡‡! ,
{
‡‡- .
get
‡‡/ 2
{
‡‡3 4
return
·· 
t
·· 
.
·· 
active
·· 
;
··  
}
‚‚ 
}
‚‚ 
readonly
„„ 
Tween
„„ 
t
„„ 
;
„„ 
public
‰‰ 
WaitForKill
‰‰ 
(
‰‰ 
Tween
‰‰ $
tween
‰‰% *
)
‰‰* +
{
ÂÂ 
t
ÊÊ 
=
ÊÊ 
tween
ÊÊ 
;
ÊÊ 
}
ÁÁ 
}
ËË 	
public
ÍÍ 
class
ÍÍ !
WaitForElapsedLoops
ÍÍ (
:
ÍÍ) *$
CustomYieldInstruction
ÍÍ+ A
{
ÎÎ 	
public
ÏÏ 
override
ÏÏ 
bool
ÏÏ  
keepWaiting
ÏÏ! ,
{
ÏÏ- .
get
ÏÏ/ 2
{
ÏÏ3 4
return
ÌÌ 
t
ÌÌ 
.
ÌÌ 
active
ÌÌ 
&&
ÌÌ  "
t
ÌÌ# $
.
ÌÌ$ %
CompletedLoops
ÌÌ% 3
(
ÌÌ3 4
)
ÌÌ4 5
<
ÌÌ6 7
elapsedLoops
ÌÌ8 D
;
ÌÌD E
}
ÓÓ 
}
ÓÓ 
readonly
ÔÔ 
Tween
ÔÔ 
t
ÔÔ 
;
ÔÔ 
readonly
 
int
 
elapsedLoops
 %
;
% &
public
ÒÒ !
WaitForElapsedLoops
ÒÒ &
(
ÒÒ& '
Tween
ÒÒ' ,
tween
ÒÒ- 2
,
ÒÒ2 3
int
ÒÒ4 7
elapsedLoops
ÒÒ8 D
)
ÒÒD E
{
ÚÚ 
t
ÛÛ 
=
ÛÛ 
tween
ÛÛ 
;
ÛÛ 
this
ÙÙ 
.
ÙÙ 
elapsedLoops
ÙÙ !
=
ÙÙ" #
elapsedLoops
ÙÙ$ 0
;
ÙÙ0 1
}
ıı 
}
ˆˆ 	
public
¯¯ 
class
¯¯ 
WaitForPosition
¯¯ $
:
¯¯% &$
CustomYieldInstruction
¯¯' =
{
˘˘ 	
public
˙˙ 
override
˙˙ 
bool
˙˙  
keepWaiting
˙˙! ,
{
˙˙- .
get
˙˙/ 2
{
˙˙3 4
return
˚˚ 
t
˚˚ 
.
˚˚ 
active
˚˚ 
&&
˚˚  "
t
˚˚# $
.
˚˚$ %
position
˚˚% -
*
˚˚. /
(
˚˚0 1
t
˚˚1 2
.
˚˚2 3
CompletedLoops
˚˚3 A
(
˚˚A B
)
˚˚B C
+
˚˚D E
$num
˚˚F G
)
˚˚G H
<
˚˚I J
position
˚˚K S
;
˚˚S T
}
¸¸ 
}
¸¸ 
readonly
˝˝ 
Tween
˝˝ 
t
˝˝ 
;
˝˝ 
readonly
˛˛ 
float
˛˛ 
position
˛˛ #
;
˛˛# $
public
ˇˇ 
WaitForPosition
ˇˇ "
(
ˇˇ" #
Tween
ˇˇ# (
tween
ˇˇ) .
,
ˇˇ. /
float
ˇˇ0 5
position
ˇˇ6 >
)
ˇˇ> ?
{
ÄÄ 
t
ÅÅ 
=
ÅÅ 
tween
ÅÅ 
;
ÅÅ 
this
ÇÇ 
.
ÇÇ 
position
ÇÇ 
=
ÇÇ 
position
ÇÇ  (
;
ÇÇ( )
}
ÉÉ 
}
ÑÑ 	
public
ÜÜ 
class
ÜÜ 
WaitForStart
ÜÜ !
:
ÜÜ" #$
CustomYieldInstruction
ÜÜ$ :
{
áá 	
public
àà 
override
àà 
bool
àà  
keepWaiting
àà! ,
{
àà- .
get
àà/ 2
{
àà3 4
return
ââ 
t
ââ 
.
ââ 
active
ââ 
&&
ââ  "
!
ââ# $
t
ââ$ %
.
ââ% &

playedOnce
ââ& 0
;
ââ0 1
}
ää 
}
ää 
readonly
ãã 
Tween
ãã 
t
ãã 
;
ãã 
public
åå 
WaitForStart
åå 
(
åå  
Tween
åå  %
tween
åå& +
)
åå+ ,
{
çç 
t
éé 
=
éé 
tween
éé 
;
éé 
}
èè 
}
êê 	
}
ëë 
}ìì O
MD:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModuleEPOOutline.cs”C
HD:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModuleUtils.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class 
DOTweenModuleUtils '
{ 
static 
bool 
_initialized  
;  !
[$$ 	
UnityEngine$$	 
.$$ 
	Scripting$$ 
.$$ 
Preserve$$ '
]$$' (
public&& 
static&& 
void&& 
Init&& 
(&&  
)&&  !
{'' 	
if(( 
((( 
_initialized(( 
)(( 
return(( $
;(($ %
_initialized** 
=** 
true** 
;**  "
DOTweenExternalCommand++ "
.++" # 
SetOrientationOnPath++# 7
+=++8 :
Physics++; B
.++B C 
SetOrientationOnPath++C W
;++W X
UnityEditor11 
.11 
EditorApplication11 )
.11) * 
playModeStateChanged11* >
+=11? A 
PlaymodeStateChanged11B V
;11V W
}44 	
[88 	
UnityEngine88	 
.88 
	Scripting88 
.88 
Preserve88 '
]88' (
static:: 
void:: 
	Preserver:: 
(:: 
):: 
{;; 	
Assembly<< 
[<< 
]<< 
loadedAssemblies<< '
=<<( )
	AppDomain<<* 3
.<<3 4
CurrentDomain<<4 A
.<<A B
GetAssemblies<<B O
(<<O P
)<<P Q
;<<Q R

MethodInfo== 
mi== 
=== 
typeof== "
(==" #
MonoBehaviour==# 0
)==0 1
.==1 2
	GetMethod==2 ;
(==; <
$str==< B
)==B C
;==C D
}>> 	
staticII 
voidII  
PlaymodeStateChangedII (
(II( )
UnityEditorII) 4
.II4 5
PlayModeStateChangeII5 H
stateIII N
)IIN O
{KK 	
ifLL 
(LL 
DOTweenLL 
.LL 
instanceLL  
==LL! #
nullLL$ (
)LL( )
returnLL* 0
;LL0 1
DOTweenMM 
.MM 
instanceMM 
.MM 
OnApplicationPauseMM /
(MM/ 0
UnityEditorMM0 ;
.MM; <
EditorApplicationMM< M
.MMM N
isPausedMMN V
)MMV W
;MMW X
}NN 	
publicUU 
staticUU 
classUU 
PhysicsUU #
{VV 	
publicXX 
staticXX 
voidXX  
SetOrientationOnPathXX 3
(XX3 4
PathOptionsXX4 ?
optionsXX@ G
,XXG H
TweenXXI N
tXXO P
,XXP Q

QuaternionXXR \
newRotXX] c
,XXc d
	TransformXXe n
transXXo t
)XXt u
{YY 
if[[ 
([[ 
options[[ 
.[[ 
isRigidbody[[ '
)[[' (
([[) *
([[* +
	Rigidbody[[+ 4
)[[4 5
t[[5 6
.[[6 7
target[[7 =
)[[= >
.[[> ?
rotation[[? G
=[[H I
newRot[[J P
;[[P Q
else\\ 
trans\\ 
.\\ 
rotation\\ #
=\\$ %
newRot\\& ,
;\\, -
}`` 
publiccc 
staticcc 
boolcc 
HasRigidbody2Dcc -
(cc- .
	Componentcc. 7
targetcc8 >
)cc> ?
{dd 
returnff 
targetff 
.ff 
GetComponentff *
<ff* +
Rigidbody2Dff+ 6
>ff6 7
(ff7 8
)ff8 9
!=ff: <
nullff= A
;ffA B
}jj 
[rr 
UnityEnginerr 
.rr 
	Scriptingrr "
.rr" #
Preserverr# +
]rr+ ,
publictt 
statictt 
booltt 
HasRigidbodytt +
(tt+ ,
	Componenttt, 5
targettt6 <
)tt< =
{uu 
returnww 
targetww 
.ww 
GetComponentww *
<ww* +
	Rigidbodyww+ 4
>ww4 5
(ww5 6
)ww6 7
!=ww8 :
nullww; ?
;ww? @
}{{ 
[ 
UnityEngine 
. 
	Scripting "
." #
Preserve# +
]+ ,
public
ÅÅ 
static
ÅÅ 
TweenerCore
ÅÅ %
<
ÅÅ% &
Vector3
ÅÅ& -
,
ÅÅ- .
Path
ÅÅ/ 3
,
ÅÅ3 4
PathOptions
ÅÅ5 @
>
ÅÅ@ A$
CreateDOTweenPathTween
ÅÅB X
(
ÅÅX Y
MonoBehaviour
ÇÇ 
target
ÇÇ $
,
ÇÇ$ %
bool
ÇÇ& *
tweenRigidbody
ÇÇ+ 9
,
ÇÇ9 :
bool
ÇÇ; ?
isLocal
ÇÇ@ G
,
ÇÇG H
Path
ÇÇI M
path
ÇÇN R
,
ÇÇR S
float
ÇÇT Y
duration
ÇÇZ b
,
ÇÇb c
PathMode
ÇÇd l
pathMode
ÇÇm u
)
ÉÉ 
{
ÉÉ 
TweenerCore
ÑÑ 
<
ÑÑ 
Vector3
ÑÑ #
,
ÑÑ# $
Path
ÑÑ% )
,
ÑÑ) *
PathOptions
ÑÑ+ 6
>
ÑÑ6 7
t
ÑÑ8 9
=
ÑÑ: ;
null
ÑÑ< @
;
ÑÑ@ A
bool
ÖÖ "
rBodyFoundAndTweened
ÖÖ )
=
ÖÖ* +
false
ÖÖ, 1
;
ÖÖ1 2
if
áá 
(
áá 
tweenRigidbody
áá "
)
áá" #
{
áá$ %
	Rigidbody
àà 
rBody
àà #
=
àà$ %
target
àà& ,
.
àà, -
GetComponent
àà- 9
<
àà9 :
	Rigidbody
àà: C
>
ààC D
(
ààD E
)
ààE F
;
ààF G
if
ââ 
(
ââ 
rBody
ââ 
!=
ââ  
null
ââ! %
)
ââ% &
{
ââ' ("
rBodyFoundAndTweened
ää ,
=
ää- .
true
ää/ 3
;
ää3 4
t
ãã 
=
ãã 
isLocal
ãã #
?
åå 
rBody
åå #
.
åå# $
DOLocalPath
åå$ /
(
åå/ 0
path
åå0 4
,
åå4 5
duration
åå6 >
,
åå> ?
pathMode
åå@ H
)
ååH I
:
çç 
rBody
çç #
.
çç# $
DOPath
çç$ *
(
çç* +
path
çç+ /
,
çç/ 0
duration
çç1 9
,
çç9 :
pathMode
çç; C
)
ççC D
;
ççD E
}
éé 
}
èè 
if
íí 
(
íí 
!
íí "
rBodyFoundAndTweened
íí )
&&
íí* ,
tweenRigidbody
íí- ;
)
íí; <
{
íí= >
Rigidbody2D
ìì 
rBody2D
ìì  '
=
ìì( )
target
ìì* 0
.
ìì0 1
GetComponent
ìì1 =
<
ìì= >
Rigidbody2D
ìì> I
>
ììI J
(
ììJ K
)
ììK L
;
ììL M
if
îî 
(
îî 
rBody2D
îî 
!=
îî  "
null
îî# '
)
îî' (
{
îî) *"
rBodyFoundAndTweened
ïï ,
=
ïï- .
true
ïï/ 3
;
ïï3 4
t
ññ 
=
ññ 
isLocal
ññ #
?
óó 
rBody2D
óó %
.
óó% &
DOLocalPath
óó& 1
(
óó1 2
path
óó2 6
,
óó6 7
duration
óó8 @
,
óó@ A
pathMode
óóB J
)
óóJ K
:
òò 
rBody2D
òò %
.
òò% &
DOPath
òò& ,
(
òò, -
path
òò- 1
,
òò1 2
duration
òò3 ;
,
òò; <
pathMode
òò= E
)
òòE F
;
òòF G
}
ôô 
}
öö 
if
úú 
(
úú 
!
úú "
rBodyFoundAndTweened
úú )
)
úú) *
{
úú+ ,
t
ùù 
=
ùù 
isLocal
ùù 
?
ûû 
target
ûû  
.
ûû  !
	transform
ûû! *
.
ûû* +
DOLocalPath
ûû+ 6
(
ûû6 7
path
ûû7 ;
,
ûû; <
duration
ûû= E
,
ûûE F
pathMode
ûûG O
)
ûûO P
:
üü 
target
üü  
.
üü  !
	transform
üü! *
.
üü* +
DOPath
üü+ 1
(
üü1 2
path
üü2 6
,
üü6 7
duration
üü8 @
,
üü@ A
pathMode
üüB J
)
üüJ K
;
üüK L
}
†† 
return
°° 
t
°° 
;
°° 
}
¢¢ 
}
•• 	
}
¶¶ 
}ßß †‘
3D:\REGame\Assets\Plugins\Trinary Software\Timing.cs
	namespace 	
MEC
 
{ 
public 

class 
Timing 
: 
MonoBehaviour '
{ 
[## 	
Tooltip##	 
(## 
$str## <
)##< =
]##= >
public$$ 
float$$ &
TimeBetweenSlowUpdateCalls$$ /
=$$0 1
$num$$2 4
/$$5 6
$num$$7 9
;$$9 :
[)) 	
Tooltip))	 
()) 
$str)) V
)))V W
]))W X
public** 
DebugInfoType** 
ProfilerDebugAmount** 0
;**0 1
[.. 	
Tooltip..	 
(.. 
$str.. Y
)..Y Z
,..Z [
Space..\ a
(..a b
$num..b d
)..d e
]..e f
public// 
int// 
UpdateCoroutines// #
;//# $
[33 	
Tooltip33	 
(33 
$str33 ^
)33^ _
]33_ `
public44 
int44 !
FixedUpdateCoroutines44 (
;44( )
[88 	
Tooltip88	 
(88 
$str88 ]
)88] ^
]88^ _
public99 
int99  
LateUpdateCoroutines99 '
;99' (
[== 	
Tooltip==	 
(== 
$str== ]
)==] ^
]==^ _
public>> 
int>>  
SlowUpdateCoroutines>> '
;>>' (
[BB 	
SystemBB	 
.BB 
NonSerializedBB 
]BB 
publicCC 
floatCC 
	localTimeCC 
;CC 
publicGG 
staticGG 
floatGG 
	LocalTimeGG %
{GG& '
getGG( +
{GG, -
returnGG. 4
InstanceGG5 =
.GG= >
	localTimeGG> G
;GGG H
}GGI J
}GGK L
[KK 	
SystemKK	 
.KK 
NonSerializedKK 
]KK 
publicLL 
floatLL 
	deltaTimeLL 
;LL 
publicPP 
staticPP 
floatPP 
	DeltaTimePP %
{PP& '
getPP( +
{PP, -
returnPP. 4
InstancePP5 =
.PP= >
	deltaTimePP> G
;PPG H
}PPI J
}PPK L
publicTT 
staticTT 
SystemTT 
.TT 
FuncTT !
<TT! "
IEnumeratorTT" -
<TT- .
floatTT. 3
>TT3 4
,TT4 5
CoroutineHandleTT6 E
,TTE F
IEnumeratorTTG R
<TTR S
floatTTS X
>TTX Y
>TTY Z
ReplacementFunctionTT[ n
;TTn o
publicXX 
staticXX 
eventXX 
SystemXX "
.XX" #
ActionXX# )
OnPreExecuteXX* 6
;XX6 7
public\\ 
const\\ 
float\\ 
WaitForOneFrame\\ *
=\\+ ,
float\\- 2
.\\2 3
NegativeInfinity\\3 C
;\\C D
public`` 
static`` 
System`` 
.`` 
	Threading`` &
.``& '
Thread``' -

MainThread``. 8
{``9 :
get``; >
;``> ?
private``@ G
set``H K
;``K L
}``M N
publicdd 
staticdd 
CoroutineHandledd %
CurrentCoroutinedd& 6
{ee 	
getff 
{gg 
forhh 
(hh 
inthh 
ihh 
=hh 
$numhh 
;hh 
ihh  !
<hh" #
ActiveInstanceshh$ 3
.hh3 4
Lengthhh4 :
;hh: ;
ihh< =
++hh= ?
)hh? @
ifii 
(ii 
ActiveInstancesii '
[ii' (
iii( )
]ii) *
!=ii+ -
nullii. 2
&&ii3 5
ActiveInstancesii6 E
[iiE F
iiiF G
]iiG H
.iiH I
currentCoroutineiiI Y
.iiY Z
IsValidiiZ a
)iia b
returnjj 
ActiveInstancesjj .
[jj. /
ijj/ 0
]jj0 1
.jj1 2
currentCoroutinejj2 B
;jjB C
returnkk 
defaultkk 
(kk 
CoroutineHandlekk .
)kk. /
;kk/ 0
}ll 
}mm 	
publicqq 
CoroutineHandleqq 
currentCoroutineqq /
{qq0 1
getqq2 5
;qq5 6
privateqq7 >
setqq? B
;qqB C
}qqD E
privatess 
staticss 
objectss 
_tmpRefss %
;ss% &
privatett 
statictt 
booltt 
_tmpBooltt $
;tt$ %
privateuu 
staticuu 
CoroutineHandleuu &

_tmpHandleuu' 1
;uu1 2
privateww 
intww 
_currentUpdateFrameww '
;ww' (
privatexx 
intxx #
_currentLateUpdateFramexx +
;xx+ ,
privateyy 
intyy #
_currentSlowUpdateFrameyy +
;yy+ ,
privatezz 
intzz "
_nextUpdateProcessSlotzz *
;zz* +
private{{ 
int{{ &
_nextLateUpdateProcessSlot{{ .
;{{. /
private|| 
int|| '
_nextFixedUpdateProcessSlot|| /
;||/ 0
private}} 
int}} &
_nextSlowUpdateProcessSlot}} .
;}}. /
private~~ 
int~~ "
_lastUpdateProcessSlot~~ *
;~~* +
private 
int &
_lastLateUpdateProcessSlot .
;. /
private
ÄÄ 
int
ÄÄ )
_lastFixedUpdateProcessSlot
ÄÄ /
;
ÄÄ/ 0
private
ÅÅ 
int
ÅÅ (
_lastSlowUpdateProcessSlot
ÅÅ .
;
ÅÅ. /
private
ÇÇ 
float
ÇÇ 
_lastUpdateTime
ÇÇ %
;
ÇÇ% &
private
ÉÉ 
float
ÉÉ !
_lastLateUpdateTime
ÉÉ )
;
ÉÉ) *
private
ÑÑ 
float
ÑÑ "
_lastFixedUpdateTime
ÑÑ *
;
ÑÑ* +
private
ÖÖ 
float
ÖÖ !
_lastSlowUpdateTime
ÖÖ )
;
ÖÖ) *
private
ÜÜ 
float
ÜÜ &
_lastSlowUpdateDeltaTime
ÜÜ .
;
ÜÜ. /
private
áá 
ushort
áá  
_framesSinceUpdate
áá )
;
áá) *
private
àà 
ushort
àà 
_expansions
àà "
=
àà# $
$num
àà% &
;
àà& '
[
ââ 	
SerializeField
ââ	 
,
ââ 
HideInInspector
ââ (
]
ââ( )
private
ää 
byte
ää 
_instanceID
ää  
;
ää  !
private
åå 
readonly
åå 

Dictionary
åå #
<
åå# $
CoroutineHandle
åå$ 3
,
åå3 4
HashSet
åå5 <
<
åå< =
CoroutineHandle
åå= L
>
ååL M
>
ååM N
_waitingTriggers
ååO _
=
åå` a
new
ååb e

Dictionary
ååf p
<
ååp q
CoroutineHandleååq Ä
,ååÄ Å
HashSetååÇ â
<ååâ ä
CoroutineHandleååä ô
>ååô ö
>ååö õ
(ååõ ú
)ååú ù
;ååù û
private
çç 
readonly
çç 
HashSet
çç  
<
çç  !
CoroutineHandle
çç! 0
>
çç0 1
_allWaiting
çç2 =
=
çç> ?
new
çç@ C
HashSet
ççD K
<
ççK L
CoroutineHandle
ççL [
>
çç[ \
(
çç\ ]
)
çç] ^
;
çç^ _
private
éé 
readonly
éé 

Dictionary
éé #
<
éé# $
CoroutineHandle
éé$ 3
,
éé3 4
ProcessIndex
éé5 A
>
ééA B
_handleToIndex
ééC Q
=
ééR S
new
ééT W

Dictionary
ééX b
<
ééb c
CoroutineHandle
ééc r
,
éér s
ProcessIndexéét Ä
>ééÄ Å
(ééÅ Ç
)ééÇ É
;ééÉ Ñ
private
èè 
readonly
èè 

Dictionary
èè #
<
èè# $
ProcessIndex
èè$ 0
,
èè0 1
CoroutineHandle
èè2 A
>
èèA B
_indexToHandle
èèC Q
=
èèR S
new
èèT W

Dictionary
èèX b
<
èèb c
ProcessIndex
èèc o
,
èèo p
CoroutineHandleèèq Ä
>èèÄ Å
(èèÅ Ç
)èèÇ É
;èèÉ Ñ
private
êê 
readonly
êê 

Dictionary
êê #
<
êê# $
CoroutineHandle
êê$ 3
,
êê3 4
string
êê5 ;
>
êê; <
_processTags
êê= I
=
êêJ K
new
êêL O

Dictionary
êêP Z
<
êêZ [
CoroutineHandle
êê[ j
,
êêj k
string
êêl r
>
êêr s
(
êês t
)
êêt u
;
êêu v
private
ëë 
readonly
ëë 

Dictionary
ëë #
<
ëë# $
string
ëë$ *
,
ëë* +
HashSet
ëë, 3
<
ëë3 4
CoroutineHandle
ëë4 C
>
ëëC D
>
ëëD E
_taggedProcesses
ëëF V
=
ëëW X
new
ëëY \

Dictionary
ëë] g
<
ëëg h
string
ëëh n
,
ëën o
HashSet
ëëp w
<
ëëw x
CoroutineHandleëëx á
>ëëá à
>ëëà â
(ëëâ ä
)ëëä ã
;ëëã å
private
ìì 
IEnumerator
ìì 
<
ìì 
float
ìì !
>
ìì! "
[
ìì" #
]
ìì# $
UpdateProcesses
ìì% 4
=
ìì5 6
new
ìì7 :
IEnumerator
ìì; F
<
ììF G
float
ììG L
>
ììL M
[
ììM N$
InitialBufferSizeLarge
ììN d
]
ììd e
;
ììe f
private
îî 
IEnumerator
îî 
<
îî 
float
îî !
>
îî! "
[
îî" #
]
îî# $!
LateUpdateProcesses
îî% 8
=
îî9 :
new
îî; >
IEnumerator
îî? J
<
îîJ K
float
îîK P
>
îîP Q
[
îîQ R$
InitialBufferSizeSmall
îîR h
]
îîh i
;
îîi j
private
ïï 
IEnumerator
ïï 
<
ïï 
float
ïï !
>
ïï! "
[
ïï" #
]
ïï# $"
FixedUpdateProcesses
ïï% 9
=
ïï: ;
new
ïï< ?
IEnumerator
ïï@ K
<
ïïK L
float
ïïL Q
>
ïïQ R
[
ïïR S%
InitialBufferSizeMedium
ïïS j
]
ïïj k
;
ïïk l
private
ññ 
IEnumerator
ññ 
<
ññ 
float
ññ !
>
ññ! "
[
ññ" #
]
ññ# $!
SlowUpdateProcesses
ññ% 8
=
ññ9 :
new
ññ; >
IEnumerator
ññ? J
<
ññJ K
float
ññK P
>
ññP Q
[
ññQ R%
InitialBufferSizeMedium
ññR i
]
ññi j
;
ññj k
private
òò 
bool
òò 
[
òò 
]
òò 
UpdatePaused
òò #
=
òò$ %
new
òò& )
bool
òò* .
[
òò. /$
InitialBufferSizeLarge
òò/ E
]
òòE F
;
òòF G
private
ôô 
bool
ôô 
[
ôô 
]
ôô 
LateUpdatePaused
ôô '
=
ôô( )
new
ôô* -
bool
ôô. 2
[
ôô2 3$
InitialBufferSizeSmall
ôô3 I
]
ôôI J
;
ôôJ K
private
öö 
bool
öö 
[
öö 
]
öö 
FixedUpdatePaused
öö (
=
öö) *
new
öö+ .
bool
öö/ 3
[
öö3 4%
InitialBufferSizeMedium
öö4 K
]
ööK L
;
ööL M
private
õõ 
bool
õõ 
[
õõ 
]
õõ 
SlowUpdatePaused
õõ '
=
õõ( )
new
õõ* -
bool
õõ. 2
[
õõ2 3%
InitialBufferSizeMedium
õõ3 J
]
õõJ K
;
õõK L
private
úú 
bool
úú 
[
úú 
]
úú 

UpdateHeld
úú !
=
úú" #
new
úú$ '
bool
úú( ,
[
úú, -$
InitialBufferSizeLarge
úú- C
]
úúC D
;
úúD E
private
ùù 
bool
ùù 
[
ùù 
]
ùù 
LateUpdateHeld
ùù %
=
ùù& '
new
ùù( +
bool
ùù, 0
[
ùù0 1$
InitialBufferSizeSmall
ùù1 G
]
ùùG H
;
ùùH I
private
ûû 
bool
ûû 
[
ûû 
]
ûû 
FixedUpdateHeld
ûû &
=
ûû' (
new
ûû) ,
bool
ûû- 1
[
ûû1 2%
InitialBufferSizeMedium
ûû2 I
]
ûûI J
;
ûûJ K
private
üü 
bool
üü 
[
üü 
]
üü 
SlowUpdateHeld
üü %
=
üü& '
new
üü( +
bool
üü, 0
[
üü0 1%
InitialBufferSizeMedium
üü1 H
]
üüH I
;
üüI J
private
°° 
const
°° 
ushort
°° $
FramesUntilMaintenance
°° 3
=
°°4 5
$num
°°6 8
;
°°8 9
private
¢¢ 
const
¢¢ 
int
¢¢ #
ProcessArrayChunkSize
¢¢ /
=
¢¢0 1
$num
¢¢2 4
;
¢¢4 5
private
££ 
const
££ 
int
££ $
InitialBufferSizeLarge
££ 0
=
££1 2
$num
££3 6
;
££6 7
private
§§ 
const
§§ 
int
§§ %
InitialBufferSizeMedium
§§ 1
=
§§2 3
$num
§§4 6
;
§§6 7
private
•• 
const
•• 
int
•• $
InitialBufferSizeSmall
•• 0
=
••1 2
$num
••3 4
;
••4 5
private
ßß 
static
ßß 
Timing
ßß 
[
ßß 
]
ßß 
ActiveInstances
ßß  /
=
ßß0 1
new
ßß2 5
Timing
ßß6 <
[
ßß< =
$num
ßß= ?
]
ßß? @
;
ßß@ A
private
®® 
static
®® 
Timing
®® 
	_instance
®® '
;
®®' (
public
™™ 
static
™™ 
Timing
™™ 
Instance
™™ %
{
´´ 	
get
¨¨ 
{
≠≠ 
if
ÆÆ 
(
ÆÆ 
	_instance
ÆÆ 
==
ÆÆ  
null
ÆÆ! %
||
ÆÆ& (
!
ÆÆ) *
	_instance
ÆÆ* 3
.
ÆÆ3 4

gameObject
ÆÆ4 >
)
ÆÆ> ?
{
ØØ 

GameObject
∞∞ 
instanceHome
∞∞ +
=
∞∞, -

GameObject
∞∞. 8
.
∞∞8 9
Find
∞∞9 =
(
∞∞= >
$str
∞∞> Q
)
∞∞Q R
;
∞∞R S
if
≤≤ 
(
≤≤ 
instanceHome
≤≤ $
==
≤≤% '
null
≤≤( ,
)
≤≤, -
{
≥≥ 
instanceHome
¥¥ $
=
¥¥% &
new
¥¥' *

GameObject
¥¥+ 5
{
¥¥6 7
name
¥¥8 <
=
¥¥= >
$str
¥¥? R
}
¥¥S T
;
¥¥T U
DontDestroyOnLoad
∂∂ )
(
∂∂) *
instanceHome
∂∂* 6
)
∂∂6 7
;
∂∂7 8
}
∑∑ 
	_instance
ππ 
=
ππ 
instanceHome
ππ  ,
.
ππ, -
GetComponent
ππ- 9
<
ππ9 :
Timing
ππ: @
>
ππ@ A
(
ππA B
)
ππB C
??
ππD F
instanceHome
ππG S
.
ππS T
AddComponent
ππT `
<
ππ` a
Timing
ππa g
>
ππg h
(
ππh i
)
ππi j
;
ππj k
	_instance
ªª 
.
ªª "
InitializeInstanceID
ªª 2
(
ªª2 3
)
ªª3 4
;
ªª4 5
}
ºº 
return
ææ 
	_instance
ææ  
;
ææ  !
}
øø 
set
¿¿ 
{
¿¿ 
	_instance
¿¿ 
=
¿¿ 
value
¿¿ #
;
¿¿# $
}
¿¿% &
}
¡¡ 	
void
√√ 
	OnDestroy
√√ 
(
√√ 
)
√√ 
{
ƒƒ 	
if
≈≈ 
(
≈≈ 
	_instance
≈≈ 
==
≈≈ 
this
≈≈ !
)
≈≈! "
	_instance
∆∆ 
=
∆∆ 
null
∆∆  
;
∆∆  !
}
«« 	
void
…… 
OnEnable
…… 
(
…… 
)
…… 
{
   	
if
ÀÀ 
(
ÀÀ 

MainThread
ÀÀ 
==
ÀÀ 
null
ÀÀ "
)
ÀÀ" #

MainThread
ÃÃ 
=
ÃÃ 
System
ÃÃ #
.
ÃÃ# $
	Threading
ÃÃ$ -
.
ÃÃ- .
Thread
ÃÃ. 4
.
ÃÃ4 5
CurrentThread
ÃÃ5 B
;
ÃÃB C"
InitializeInstanceID
ŒŒ  
(
ŒŒ  !
)
ŒŒ! "
;
ŒŒ" #
}
œœ 	
void
—— 
	OnDisable
—— 
(
—— 
)
—— 
{
““ 	
if
”” 
(
”” 
_instanceID
”” 
<
”” 
ActiveInstances
”” -
.
””- .
Length
””. 4
)
””4 5
ActiveInstances
‘‘ 
[
‘‘  
_instanceID
‘‘  +
]
‘‘+ ,
=
‘‘- .
null
‘‘/ 3
;
‘‘3 4
}
’’ 	
private
◊◊ 
void
◊◊ "
InitializeInstanceID
◊◊ )
(
◊◊) *
)
◊◊* +
{
ÿÿ 	
if
ŸŸ 
(
ŸŸ 
ActiveInstances
ŸŸ 
[
ŸŸ  
_instanceID
ŸŸ  +
]
ŸŸ+ ,
==
ŸŸ- /
null
ŸŸ0 4
)
ŸŸ4 5
{
⁄⁄ 
if
€€ 
(
€€ 
_instanceID
€€ 
==
€€  "
$num
€€# '
)
€€' (
_instanceID
‹‹ 
++
‹‹ !
;
‹‹! "
for
ﬁﬁ 
(
ﬁﬁ 
;
ﬁﬁ 
_instanceID
ﬁﬁ "
<=
ﬁﬁ# %
$num
ﬁﬁ& *
;
ﬁﬁ* +
_instanceID
ﬁﬁ, 7
++
ﬁﬁ7 9
)
ﬁﬁ9 :
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
_instanceID
‡‡ #
==
‡‡$ &
$num
‡‡' +
)
‡‡+ ,
{
·· 

GameObject
‚‚ "
.
‚‚" #
Destroy
‚‚# *
(
‚‚* +

gameObject
‚‚+ 5
)
‚‚5 6
;
‚‚6 7
throw
„„ 
new
„„ !
System
„„" (
.
„„( )
OverflowException
„„) :
(
„„: ;
$str„„; ä
)„„ä ã
;„„ã å
}
‰‰ 
if
ÊÊ 
(
ÊÊ 
ActiveInstances
ÊÊ '
[
ÊÊ' (
_instanceID
ÊÊ( 3
]
ÊÊ3 4
==
ÊÊ5 7
null
ÊÊ8 <
)
ÊÊ< =
{
ÁÁ 
ActiveInstances
ËË '
[
ËË' (
_instanceID
ËË( 3
]
ËË3 4
=
ËË5 6
this
ËË7 ;
;
ËË; <
break
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
void
ÔÔ 
Update
ÔÔ 
(
ÔÔ 
)
ÔÔ 
{
 	
if
ÒÒ 
(
ÒÒ 
OnPreExecute
ÒÒ 
!=
ÒÒ 
null
ÒÒ  $
)
ÒÒ$ %
OnPreExecute
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
if
ÙÙ 
(
ÙÙ !
_lastSlowUpdateTime
ÙÙ #
+
ÙÙ$ %(
TimeBetweenSlowUpdateCalls
ÙÙ& @
<
ÙÙA B
Time
ÙÙC G
.
ÙÙG H"
realtimeSinceStartup
ÙÙH \
&&
ÙÙ] _(
_nextSlowUpdateProcessSlot
ÙÙ` z
>
ÙÙ{ |
$num
ÙÙ} ~
)
ÙÙ~ 
{
ıı 
ProcessIndex
ˆˆ 
coindex
ˆˆ $
=
ˆˆ% &
new
ˆˆ' *
ProcessIndex
ˆˆ+ 7
{
ˆˆ8 9
seg
ˆˆ: =
=
ˆˆ> ?
Segment
ˆˆ@ G
.
ˆˆG H

SlowUpdate
ˆˆH R
}
ˆˆS T
;
ˆˆT U
if
˜˜ 
(
˜˜ 
UpdateTimeValues
˜˜ $
(
˜˜$ %
coindex
˜˜% ,
.
˜˜, -
seg
˜˜- 0
)
˜˜0 1
)
˜˜1 2(
_lastSlowUpdateProcessSlot
¯¯ .
=
¯¯/ 0(
_nextSlowUpdateProcessSlot
¯¯1 K
;
¯¯K L
for
˙˙ 
(
˙˙ 
coindex
˙˙ 
.
˙˙ 
i
˙˙ 
=
˙˙  
$num
˙˙! "
;
˙˙" #
coindex
˙˙$ +
.
˙˙+ ,
i
˙˙, -
<
˙˙. /(
_lastSlowUpdateProcessSlot
˙˙0 J
;
˙˙J K
coindex
˙˙L S
.
˙˙S T
i
˙˙T U
++
˙˙U W
)
˙˙W X
{
˚˚ 
try
¸¸ 
{
˝˝ 
if
˛˛ 
(
˛˛ 
!
˛˛ 
SlowUpdatePaused
˛˛ -
[
˛˛- .
coindex
˛˛. 5
.
˛˛5 6
i
˛˛6 7
]
˛˛7 8
&&
˛˛9 ;
!
˛˛< =
SlowUpdateHeld
˛˛= K
[
˛˛K L
coindex
˛˛L S
.
˛˛S T
i
˛˛T U
]
˛˛U V
&&
˛˛W Y!
SlowUpdateProcesses
˛˛Z m
[
˛˛m n
coindex
˛˛n u
.
˛˛u v
i
˛˛v w
]
˛˛w x
!=
˛˛y {
null˛˛| Ä
&&˛˛Å É
!˛˛Ñ Ö
(˛˛Ö Ü
	localTime˛˛Ü è
<˛˛ê ë#
SlowUpdateProcesses˛˛í •
[˛˛• ¶
coindex˛˛¶ ≠
.˛˛≠ Æ
i˛˛Æ Ø
]˛˛Ø ∞
.˛˛∞ ±
Current˛˛± ∏
)˛˛∏ π
)˛˛π ∫
{
ˇˇ 
currentCoroutine
ÄÄ ,
=
ÄÄ- .
_indexToHandle
ÄÄ/ =
[
ÄÄ= >
coindex
ÄÄ> E
]
ÄÄE F
;
ÄÄF G
if
ÇÇ 
(
ÇÇ  !
ProfilerDebugAmount
ÇÇ  3
!=
ÇÇ4 6
DebugInfoType
ÇÇ7 D
.
ÇÇD E
None
ÇÇE I
&&
ÇÇJ L
_indexToHandle
ÇÇM [
.
ÇÇ[ \
ContainsKey
ÇÇ\ g
(
ÇÇg h
coindex
ÇÇh o
)
ÇÇo p
)
ÇÇp q
{
ÉÉ 
Profiler
ÑÑ  (
.
ÑÑ( )
BeginSample
ÑÑ) 4
(
ÑÑ4 5!
ProfilerDebugAmount
ÑÑ5 H
==
ÑÑI K
DebugInfoType
ÑÑL Y
.
ÑÑY Z
SeperateTags
ÑÑZ f
?
ÑÑg h
(
ÑÑi j
$strÑÑj é
+ÑÑè ê
(
ÖÖ( )
_processTags
ÖÖ) 5
.
ÖÖ5 6
ContainsKey
ÖÖ6 A
(
ÖÖA B
_indexToHandle
ÖÖB P
[
ÖÖP Q
coindex
ÖÖQ X
]
ÖÖX Y
)
ÖÖY Z
?
ÖÖ[ \
$str
ÖÖ] e
+
ÖÖf g
_processTags
ÖÖh t
[
ÖÖt u
_indexToHandleÖÖu É
[ÖÖÉ Ñ
coindexÖÖÑ ã
]ÖÖã å
]ÖÖå ç
:ÖÖé è
$strÖÖê ö
)ÖÖö õ
)ÖÖõ ú
:
ÜÜ( )
$str
ÜÜ* N
)
ÜÜN O
;
ÜÜO P
}
áá 
if
ââ 
(
ââ  
!
ââ  !!
SlowUpdateProcesses
ââ! 4
[
ââ4 5
coindex
ââ5 <
.
ââ< =
i
ââ= >
]
ââ> ?
.
ââ? @
MoveNext
ââ@ H
(
ââH I
)
ââI J
)
ââJ K
{
ää 
if
ãã  "
(
ãã# $
_indexToHandle
ãã$ 2
.
ãã2 3
ContainsKey
ãã3 >
(
ãã> ?
coindex
ãã? F
)
ããF G
)
ããG H&
KillCoroutinesOnInstance
åå$ <
(
åå< =
_indexToHandle
åå= K
[
ååK L
coindex
ååL S
]
ååS T
)
ååT U
;
ååU V
}
çç 
else
éé  
if
éé! #
(
éé$ %!
SlowUpdateProcesses
éé% 8
[
éé8 9
coindex
éé9 @
.
éé@ A
i
ééA B
]
ééB C
!=
ééD F
null
ééG K
&&
ééL N
float
ééO T
.
ééT U
IsNaN
ééU Z
(
ééZ [!
SlowUpdateProcesses
éé[ n
[
één o
coindex
ééo v
.
éév w
i
ééw x
]
ééx y
.
ééy z
Currentééz Å
)ééÅ Ç
)ééÇ É
{
èè 
if
êê  "
(
êê# $!
ReplacementFunction
êê$ 7
!=
êê8 :
null
êê; ?
)
êê? @
{
ëë  !!
SlowUpdateProcesses
íí$ 7
[
íí7 8
coindex
íí8 ?
.
íí? @
i
íí@ A
]
ííA B
=
ííC D!
ReplacementFunction
ííE X
(
ííX Y!
SlowUpdateProcesses
ííY l
[
ííl m
coindex
íím t
.
íít u
i
ííu v
]
íív w
,
ííw x
_indexToHandleííy á
[ííá à
coindexííà è
]ííè ê
)ííê ë
;ííë í!
ReplacementFunction
ìì$ 7
=
ìì8 9
null
ìì: >
;
ìì> ?
}
îî  !
coindex
ïï  '
.
ïï' (
i
ïï( )
--
ïï) +
;
ïï+ ,
}
ññ 
if
òò 
(
òò  !
ProfilerDebugAmount
òò  3
!=
òò4 6
DebugInfoType
òò7 D
.
òòD E
None
òòE I
)
òòI J
Profiler
ôô  (
.
ôô( )
	EndSample
ôô) 2
(
ôô2 3
)
ôô3 4
;
ôô4 5
}
öö 
}
õõ 
catch
úú 
(
úú 
System
úú !
.
úú! "
	Exception
úú" +
ex
úú, .
)
úú. /
{
ùù 
Debug
ûû 
.
ûû 
LogException
ûû *
(
ûû* +
ex
ûû+ -
)
ûû- .
;
ûû. /
if
†† 
(
†† 
ex
†† 
is
†† !'
MissingReferenceException
††" ;
)
††; <
Debug
°° !
.
°°! "
LogError
°°" *
(
°°* +
$str°°+ î
+
¢¢  !
$str
¢¢" t
)
¢¢t u
;
¢¢u v
}
££ 
}
§§ 
}
•• 
if
ßß 
(
ßß $
_nextUpdateProcessSlot
ßß &
>
ßß' (
$num
ßß) *
)
ßß* +
{
®® 
ProcessIndex
©© 
coindex
©© $
=
©©% &
new
©©' *
ProcessIndex
©©+ 7
{
©©8 9
seg
©©: =
=
©©> ?
Segment
©©@ G
.
©©G H
Update
©©H N
}
©©O P
;
©©P Q
if
™™ 
(
™™ 
UpdateTimeValues
™™ $
(
™™$ %
coindex
™™% ,
.
™™, -
seg
™™- 0
)
™™0 1
)
™™1 2$
_lastUpdateProcessSlot
´´ *
=
´´+ ,$
_nextUpdateProcessSlot
´´- C
;
´´C D
for
≠≠ 
(
≠≠ 
coindex
≠≠ 
.
≠≠ 
i
≠≠ 
=
≠≠  
$num
≠≠! "
;
≠≠" #
coindex
≠≠$ +
.
≠≠+ ,
i
≠≠, -
<
≠≠. /$
_lastUpdateProcessSlot
≠≠0 F
;
≠≠F G
coindex
≠≠H O
.
≠≠O P
i
≠≠P Q
++
≠≠Q S
)
≠≠S T
{
ÆÆ 
try
ØØ 
{
∞∞ 
if
±± 
(
±± 
!
±± 
UpdatePaused
±± )
[
±±) *
coindex
±±* 1
.
±±1 2
i
±±2 3
]
±±3 4
&&
±±5 7
!
±±8 9

UpdateHeld
±±9 C
[
±±C D
coindex
±±D K
.
±±K L
i
±±L M
]
±±M N
&&
±±O Q
UpdateProcesses
±±R a
[
±±a b
coindex
±±b i
.
±±i j
i
±±j k
]
±±k l
!=
±±m o
null
±±p t
&&
±±u w
!
±±x y
(
±±y z
	localTime±±z É
<±±Ñ Ö
UpdateProcesses±±Ü ï
[±±ï ñ
coindex±±ñ ù
.±±ù û
i±±û ü
]±±ü †
.±±† °
Current±±° ®
)±±® ©
)±±© ™
{
≤≤ 
currentCoroutine
≥≥ ,
=
≥≥- .
_indexToHandle
≥≥/ =
[
≥≥= >
coindex
≥≥> E
]
≥≥E F
;
≥≥F G
if
µµ 
(
µµ  !
ProfilerDebugAmount
µµ  3
!=
µµ4 6
DebugInfoType
µµ7 D
.
µµD E
None
µµE I
&&
µµJ L
_indexToHandle
µµM [
.
µµ[ \
ContainsKey
µµ\ g
(
µµg h
coindex
µµh o
)
µµo p
)
µµp q
{
∂∂ 
Profiler
∑∑  (
.
∑∑( )
BeginSample
∑∑) 4
(
∑∑4 5!
ProfilerDebugAmount
∑∑5 H
==
∑∑I K
DebugInfoType
∑∑L Y
.
∑∑Y Z
SeperateTags
∑∑Z f
?
∑∑g h
(
∑∑i j
$str∑∑j Ä
+∑∑Å Ç
(
∏∏( )
_processTags
∏∏) 5
.
∏∏5 6
ContainsKey
∏∏6 A
(
∏∏A B
_indexToHandle
∏∏B P
[
∏∏P Q
coindex
∏∏Q X
]
∏∏X Y
)
∏∏Y Z
?
∏∏[ \
$str
∏∏] e
+
∏∏f g
_processTags
∏∏h t
[
∏∏t u
_indexToHandle∏∏u É
[∏∏É Ñ
coindex∏∏Ñ ã
]∏∏ã å
]∏∏å ç
:∏∏é è
$str∏∏ê ö
)∏∏ö õ
)∏∏õ ú
:
ππ( )
$str
ππ* @
)
ππ@ A
;
ππA B
}
∫∫ 
if
ºº 
(
ºº  
!
ºº  !
UpdateProcesses
ºº! 0
[
ºº0 1
coindex
ºº1 8
.
ºº8 9
i
ºº9 :
]
ºº: ;
.
ºº; <
MoveNext
ºº< D
(
ººD E
)
ººE F
)
ººF G
{
ΩΩ 
if
ææ  "
(
ææ# $
_indexToHandle
ææ$ 2
.
ææ2 3
ContainsKey
ææ3 >
(
ææ> ?
coindex
ææ? F
)
ææF G
)
ææG H&
KillCoroutinesOnInstance
øø$ <
(
øø< =
_indexToHandle
øø= K
[
øøK L
coindex
øøL S
]
øøS T
)
øøT U
;
øøU V
}
¿¿ 
else
¡¡  
if
¡¡! #
(
¡¡$ %
UpdateProcesses
¡¡% 4
[
¡¡4 5
coindex
¡¡5 <
.
¡¡< =
i
¡¡= >
]
¡¡> ?
!=
¡¡@ B
null
¡¡C G
&&
¡¡H J
float
¡¡K P
.
¡¡P Q
IsNaN
¡¡Q V
(
¡¡V W
UpdateProcesses
¡¡W f
[
¡¡f g
coindex
¡¡g n
.
¡¡n o
i
¡¡o p
]
¡¡p q
.
¡¡q r
Current
¡¡r y
)
¡¡y z
)
¡¡z {
{
¬¬ 
if
√√  "
(
√√# $!
ReplacementFunction
√√$ 7
!=
√√8 :
null
√√; ?
)
√√? @
{
ƒƒ  !
UpdateProcesses
≈≈$ 3
[
≈≈3 4
coindex
≈≈4 ;
.
≈≈; <
i
≈≈< =
]
≈≈= >
=
≈≈? @!
ReplacementFunction
≈≈A T
(
≈≈T U
UpdateProcesses
≈≈U d
[
≈≈d e
coindex
≈≈e l
.
≈≈l m
i
≈≈m n
]
≈≈n o
,
≈≈o p
_indexToHandle
≈≈q 
[≈≈ Ä
coindex≈≈Ä á
]≈≈á à
)≈≈à â
;≈≈â ä!
ReplacementFunction
∆∆$ 7
=
∆∆8 9
null
∆∆: >
;
∆∆> ?
}
««  !
coindex
»»  '
.
»»' (
i
»»( )
--
»») +
;
»»+ ,
}
…… 
if
ÀÀ 
(
ÀÀ  !
ProfilerDebugAmount
ÀÀ  3
!=
ÀÀ4 6
DebugInfoType
ÀÀ7 D
.
ÀÀD E
None
ÀÀE I
)
ÀÀI J
Profiler
ÃÃ  (
.
ÃÃ( )
	EndSample
ÃÃ) 2
(
ÃÃ2 3
)
ÃÃ3 4
;
ÃÃ4 5
}
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
System
œœ !
.
œœ! "
	Exception
œœ" +
ex
œœ, .
)
œœ. /
{
–– 
if
”” 
(
”” 
ex
”” 
is
”” !'
MissingReferenceException
””" ;
)
””; <
Debug
‘‘ !
.
‘‘! "
LogError
‘‘" *
(
‘‘* +
$str‘‘+ î
+
’’  !
$str
’’" `
)
’’` a
;
’’a b
}
÷÷ 
}
◊◊ 
}
ÿÿ 
currentCoroutine
⁄⁄ 
=
⁄⁄ 
default
⁄⁄ &
(
⁄⁄& '
CoroutineHandle
⁄⁄' 6
)
⁄⁄6 7
;
⁄⁄7 8
if
‹‹ 
(
‹‹ 
++
‹‹  
_framesSinceUpdate
‹‹ #
>
‹‹$ %$
FramesUntilMaintenance
‹‹& <
)
‹‹< =
{
››  
_framesSinceUpdate
ﬁﬁ "
=
ﬁﬁ# $
$num
ﬁﬁ% &
;
ﬁﬁ& '
if
‡‡ 
(
‡‡ !
ProfilerDebugAmount
‡‡ '
!=
‡‡( *
DebugInfoType
‡‡+ 8
.
‡‡8 9
None
‡‡9 =
)
‡‡= >
Profiler
·· 
.
·· 
BeginSample
·· (
(
··( )
$str
··) ;
)
··; <
;
··< =
RemoveUnused
„„ 
(
„„ 
)
„„ 
;
„„ 
if
ÂÂ 
(
ÂÂ !
ProfilerDebugAmount
ÂÂ '
!=
ÂÂ( *
DebugInfoType
ÂÂ+ 8
.
ÂÂ8 9
None
ÂÂ9 =
)
ÂÂ= >
Profiler
ÊÊ 
.
ÊÊ 
	EndSample
ÊÊ &
(
ÊÊ& '
)
ÊÊ' (
;
ÊÊ( )
}
ÁÁ 
}
ËË 	
void
ÍÍ 
FixedUpdate
ÍÍ 
(
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
if
ÏÏ 
(
ÏÏ 
OnPreExecute
ÏÏ 
!=
ÏÏ 
null
ÏÏ  $
)
ÏÏ$ %
OnPreExecute
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
if
ÔÔ 
(
ÔÔ )
_nextFixedUpdateProcessSlot
ÔÔ +
>
ÔÔ, -
$num
ÔÔ. /
)
ÔÔ/ 0
{
 
ProcessIndex
ÒÒ 
coindex
ÒÒ $
=
ÒÒ% &
new
ÒÒ' *
ProcessIndex
ÒÒ+ 7
{
ÒÒ8 9
seg
ÒÒ: =
=
ÒÒ> ?
Segment
ÒÒ@ G
.
ÒÒG H
FixedUpdate
ÒÒH S
}
ÒÒT U
;
ÒÒU V
if
ÚÚ 
(
ÚÚ 
UpdateTimeValues
ÚÚ $
(
ÚÚ$ %
coindex
ÚÚ% ,
.
ÚÚ, -
seg
ÚÚ- 0
)
ÚÚ0 1
)
ÚÚ1 2)
_lastFixedUpdateProcessSlot
ÛÛ /
=
ÛÛ0 1)
_nextFixedUpdateProcessSlot
ÛÛ2 M
;
ÛÛM N
for
ıı 
(
ıı 
coindex
ıı 
.
ıı 
i
ıı 
=
ıı  
$num
ıı! "
;
ıı" #
coindex
ıı$ +
.
ıı+ ,
i
ıı, -
<
ıı. /)
_lastFixedUpdateProcessSlot
ıı0 K
;
ııK L
coindex
ııM T
.
ııT U
i
ııU V
++
ııV X
)
ııX Y
{
ˆˆ 
try
˜˜ 
{
¯¯ 
if
˘˘ 
(
˘˘ 
!
˘˘ 
FixedUpdatePaused
˘˘ .
[
˘˘. /
coindex
˘˘/ 6
.
˘˘6 7
i
˘˘7 8
]
˘˘8 9
&&
˘˘: <
!
˘˘= >
FixedUpdateHeld
˘˘> M
[
˘˘M N
coindex
˘˘N U
.
˘˘U V
i
˘˘V W
]
˘˘W X
&&
˘˘Y ["
FixedUpdateProcesses
˘˘\ p
[
˘˘p q
coindex
˘˘q x
.
˘˘x y
i
˘˘y z
]
˘˘z {
!=
˘˘| ~
null˘˘ É
&&˘˘Ñ Ü
!˘˘á à
(˘˘à â
	localTime˘˘â í
<˘˘ì î$
FixedUpdateProcesses˘˘ï ©
[˘˘© ™
coindex˘˘™ ±
.˘˘± ≤
i˘˘≤ ≥
]˘˘≥ ¥
.˘˘¥ µ
Current˘˘µ º
)˘˘º Ω
)˘˘Ω æ
{
˙˙ 
currentCoroutine
˚˚ ,
=
˚˚- .
_indexToHandle
˚˚/ =
[
˚˚= >
coindex
˚˚> E
]
˚˚E F
;
˚˚F G
if
˛˛ 
(
˛˛  !
ProfilerDebugAmount
˛˛  3
!=
˛˛4 6
DebugInfoType
˛˛7 D
.
˛˛D E
None
˛˛E I
&&
˛˛J L
_indexToHandle
˛˛M [
.
˛˛[ \
ContainsKey
˛˛\ g
(
˛˛g h
coindex
˛˛h o
)
˛˛o p
)
˛˛p q
{
ˇˇ 
Profiler
ÄÄ  (
.
ÄÄ( )
BeginSample
ÄÄ) 4
(
ÄÄ4 5!
ProfilerDebugAmount
ÄÄ5 H
==
ÄÄI K
DebugInfoType
ÄÄL Y
.
ÄÄY Z
SeperateTags
ÄÄZ f
?
ÄÄg h
(
ÄÄi j
$strÄÄj Ä
+ÄÄÅ Ç
(
ÅÅ( )
_processTags
ÅÅ) 5
.
ÅÅ5 6
ContainsKey
ÅÅ6 A
(
ÅÅA B
_indexToHandle
ÅÅB P
[
ÅÅP Q
coindex
ÅÅQ X
]
ÅÅX Y
)
ÅÅY Z
?
ÅÅ[ \
$str
ÅÅ] e
+
ÅÅf g
_processTags
ÅÅh t
[
ÅÅt u
_indexToHandleÅÅu É
[ÅÅÉ Ñ
coindexÅÅÑ ã
]ÅÅã å
]ÅÅå ç
:ÅÅé è
$strÅÅê ö
)ÅÅö õ
)ÅÅõ ú
:
ÇÇ( )
$str
ÇÇ* @
)
ÇÇ@ A
;
ÇÇA B
}
ÉÉ 
if
ÖÖ 
(
ÖÖ  
!
ÖÖ  !"
FixedUpdateProcesses
ÖÖ! 5
[
ÖÖ5 6
coindex
ÖÖ6 =
.
ÖÖ= >
i
ÖÖ> ?
]
ÖÖ? @
.
ÖÖ@ A
MoveNext
ÖÖA I
(
ÖÖI J
)
ÖÖJ K
)
ÖÖK L
{
ÜÜ 
if
áá  "
(
áá# $
_indexToHandle
áá$ 2
.
áá2 3
ContainsKey
áá3 >
(
áá> ?
coindex
áá? F
)
ááF G
)
ááG H&
KillCoroutinesOnInstance
àà$ <
(
àà< =
_indexToHandle
àà= K
[
ààK L
coindex
ààL S
]
ààS T
)
ààT U
;
ààU V
}
ââ 
else
ää  
if
ää! #
(
ää$ %"
FixedUpdateProcesses
ää% 9
[
ää9 :
coindex
ää: A
.
ääA B
i
ääB C
]
ääC D
!=
ääE G
null
ääH L
&&
ääM O
float
ääP U
.
ääU V
IsNaN
ääV [
(
ää[ \"
FixedUpdateProcesses
ää\ p
[
ääp q
coindex
ääq x
.
ääx y
i
ääy z
]
ääz {
.
ää{ |
Currentää| É
)ääÉ Ñ
)ääÑ Ö
{
ãã 
if
åå  "
(
åå# $!
ReplacementFunction
åå$ 7
!=
åå8 :
null
åå; ?
)
åå? @
{
çç  !"
FixedUpdateProcesses
éé$ 8
[
éé8 9
coindex
éé9 @
.
éé@ A
i
ééA B
]
ééB C
=
ééD E!
ReplacementFunction
ééF Y
(
ééY Z"
FixedUpdateProcesses
ééZ n
[
één o
coindex
ééo v
.
éév w
i
ééw x
]
ééx y
,
ééy z
_indexToHandleéé{ â
[ééâ ä
coindexééä ë
]ééë í
)ééí ì
;ééì î!
ReplacementFunction
èè$ 7
=
èè8 9
null
èè: >
;
èè> ?
}
êê  !
coindex
ëë  '
.
ëë' (
i
ëë( )
--
ëë) +
;
ëë+ ,
}
íí 
if
îî 
(
îî  !
ProfilerDebugAmount
îî  3
!=
îî4 6
DebugInfoType
îî7 D
.
îîD E
None
îîE I
)
îîI J
Profiler
ïï  (
.
ïï( )
	EndSample
ïï) 2
(
ïï2 3
)
ïï3 4
;
ïï4 5
}
ññ 
}
óó 
catch
òò 
(
òò 
System
òò !
.
òò! "
	Exception
òò" +
ex
òò, .
)
òò. /
{
ôô 
Debug
öö 
.
öö 
LogException
öö *
(
öö* +
ex
öö+ -
)
öö- .
;
öö. /
if
úú 
(
úú 
ex
úú 
is
úú !'
MissingReferenceException
úú" ;
)
úú; <
Debug
ùù !
.
ùù! "
LogError
ùù" *
(
ùù* +
$strùù+ î
+
ûû  !
$str
ûû" u
)
ûûu v
;
ûûv w
}
üü 
}
†† 
currentCoroutine
¢¢  
=
¢¢! "
default
¢¢# *
(
¢¢* +
CoroutineHandle
¢¢+ :
)
¢¢: ;
;
¢¢; <
}
££ 
}
§§ 	
void
¶¶ 

LateUpdate
¶¶ 
(
¶¶ 
)
¶¶ 
{
ßß 	
if
®® 
(
®® 
OnPreExecute
®® 
!=
®® 
null
®®  $
)
®®$ %
OnPreExecute
©© 
(
©© 
)
©© 
;
©© 
if
´´ 
(
´´ (
_nextLateUpdateProcessSlot
´´ *
>
´´+ ,
$num
´´- .
)
´´. /
{
¨¨ 
ProcessIndex
≠≠ 
coindex
≠≠ $
=
≠≠% &
new
≠≠' *
ProcessIndex
≠≠+ 7
{
≠≠8 9
seg
≠≠: =
=
≠≠> ?
Segment
≠≠@ G
.
≠≠G H

LateUpdate
≠≠H R
}
≠≠S T
;
≠≠T U
if
ÆÆ 
(
ÆÆ 
UpdateTimeValues
ÆÆ $
(
ÆÆ$ %
coindex
ÆÆ% ,
.
ÆÆ, -
seg
ÆÆ- 0
)
ÆÆ0 1
)
ÆÆ1 2(
_lastLateUpdateProcessSlot
ØØ .
=
ØØ/ 0(
_nextLateUpdateProcessSlot
ØØ1 K
;
ØØK L
for
±± 
(
±± 
coindex
±± 
.
±± 
i
±± 
=
±±  
$num
±±! "
;
±±" #
coindex
±±$ +
.
±±+ ,
i
±±, -
<
±±. /(
_lastLateUpdateProcessSlot
±±0 J
;
±±J K
coindex
±±L S
.
±±S T
i
±±T U
++
±±U W
)
±±W X
{
≤≤ 
try
≥≥ 
{
¥¥ 
if
µµ 
(
µµ 
!
µµ 
LateUpdatePaused
µµ -
[
µµ- .
coindex
µµ. 5
.
µµ5 6
i
µµ6 7
]
µµ7 8
&&
µµ9 ;
!
µµ< =
LateUpdateHeld
µµ= K
[
µµK L
coindex
µµL S
.
µµS T
i
µµT U
]
µµU V
&&
µµW Y!
LateUpdateProcesses
µµZ m
[
µµm n
coindex
µµn u
.
µµu v
i
µµv w
]
µµw x
!=
µµy {
nullµµ| Ä
&&µµÅ É
!µµÑ Ö
(µµÖ Ü
	localTimeµµÜ è
<µµê ë#
LateUpdateProcessesµµí •
[µµ• ¶
coindexµµ¶ ≠
.µµ≠ Æ
iµµÆ Ø
]µµØ ∞
.µµ∞ ±
Currentµµ± ∏
)µµ∏ π
)µµπ ∫
{
∂∂ 
currentCoroutine
∑∑ ,
=
∑∑- .
_indexToHandle
∑∑/ =
[
∑∑= >
coindex
∑∑> E
]
∑∑E F
;
∑∑F G
if
∫∫ 
(
∫∫  !
ProfilerDebugAmount
∫∫  3
!=
∫∫4 6
DebugInfoType
∫∫7 D
.
∫∫D E
None
∫∫E I
&&
∫∫J L
_indexToHandle
∫∫M [
.
∫∫[ \
ContainsKey
∫∫\ g
(
∫∫g h
coindex
∫∫h o
)
∫∫o p
)
∫∫p q
{
ªª 
Profiler
ºº  (
.
ºº( )
BeginSample
ºº) 4
(
ºº4 5!
ProfilerDebugAmount
ºº5 H
==
ººI K
DebugInfoType
ººL Y
.
ººY Z
SeperateTags
ººZ f
?
ººg h
(
ººi j
$strººj Ä
+ººÅ Ç
(
ΩΩ( )
_processTags
ΩΩ) 5
.
ΩΩ5 6
ContainsKey
ΩΩ6 A
(
ΩΩA B
_indexToHandle
ΩΩB P
[
ΩΩP Q
coindex
ΩΩQ X
]
ΩΩX Y
)
ΩΩY Z
?
ΩΩ[ \
$str
ΩΩ] e
+
ΩΩf g
_processTags
ΩΩh t
[
ΩΩt u
_indexToHandleΩΩu É
[ΩΩÉ Ñ
coindexΩΩÑ ã
]ΩΩã å
]ΩΩå ç
:ΩΩé è
$strΩΩê ö
)ΩΩö õ
)ΩΩõ ú
:
ææ( )
$str
ææ* @
)
ææ@ A
;
ææA B
}
øø 
if
¡¡ 
(
¡¡  
!
¡¡  !!
LateUpdateProcesses
¡¡! 4
[
¡¡4 5
coindex
¡¡5 <
.
¡¡< =
i
¡¡= >
]
¡¡> ?
.
¡¡? @
MoveNext
¡¡@ H
(
¡¡H I
)
¡¡I J
)
¡¡J K
{
¬¬ 
if
√√  "
(
√√# $
_indexToHandle
√√$ 2
.
√√2 3
ContainsKey
√√3 >
(
√√> ?
coindex
√√? F
)
√√F G
)
√√G H&
KillCoroutinesOnInstance
ƒƒ$ <
(
ƒƒ< =
_indexToHandle
ƒƒ= K
[
ƒƒK L
coindex
ƒƒL S
]
ƒƒS T
)
ƒƒT U
;
ƒƒU V
}
≈≈ 
else
∆∆  
if
∆∆! #
(
∆∆$ %!
LateUpdateProcesses
∆∆% 8
[
∆∆8 9
coindex
∆∆9 @
.
∆∆@ A
i
∆∆A B
]
∆∆B C
!=
∆∆D F
null
∆∆G K
&&
∆∆L N
float
∆∆O T
.
∆∆T U
IsNaN
∆∆U Z
(
∆∆Z [!
LateUpdateProcesses
∆∆[ n
[
∆∆n o
coindex
∆∆o v
.
∆∆v w
i
∆∆w x
]
∆∆x y
.
∆∆y z
Current∆∆z Å
)∆∆Å Ç
)∆∆Ç É
{
«« 
if
»»  "
(
»»# $!
ReplacementFunction
»»$ 7
!=
»»8 :
null
»»; ?
)
»»? @
{
……  !!
LateUpdateProcesses
  $ 7
[
  7 8
coindex
  8 ?
.
  ? @
i
  @ A
]
  A B
=
  C D!
ReplacementFunction
  E X
(
  X Y!
LateUpdateProcesses
  Y l
[
  l m
coindex
  m t
.
  t u
i
  u v
]
  v w
,
  w x
_indexToHandle  y á
[  á à
coindex  à è
]  è ê
)  ê ë
;  ë í!
ReplacementFunction
ÀÀ$ 7
=
ÀÀ8 9
null
ÀÀ: >
;
ÀÀ> ?
}
ÃÃ  !
coindex
ÕÕ  '
.
ÕÕ' (
i
ÕÕ( )
--
ÕÕ) +
;
ÕÕ+ ,
}
ŒŒ 
if
–– 
(
––  !
ProfilerDebugAmount
––  3
!=
––4 6
DebugInfoType
––7 D
.
––D E
None
––E I
)
––I J
Profiler
——  (
.
——( )
	EndSample
——) 2
(
——2 3
)
——3 4
;
——4 5
}
““ 
}
”” 
catch
‘‘ 
(
‘‘ 
System
‘‘ !
.
‘‘! "
	Exception
‘‘" +
ex
‘‘, .
)
‘‘. /
{
’’ 
Debug
÷÷ 
.
÷÷ 
LogException
÷÷ *
(
÷÷* +
ex
÷÷+ -
)
÷÷- .
;
÷÷. /
if
ÿÿ 
(
ÿÿ 
ex
ÿÿ 
is
ÿÿ !'
MissingReferenceException
ÿÿ" ;
)
ÿÿ; <
Debug
ŸŸ !
.
ŸŸ! "
LogError
ŸŸ" *
(
ŸŸ* +
$strŸŸ+ î
+
⁄⁄  !
$str
⁄⁄" t
)
⁄⁄t u
;
⁄⁄u v
}
€€ 
}
‹‹ 
currentCoroutine
››  
=
››! "
default
››# *
(
››* +
CoroutineHandle
››+ :
)
››: ;
;
››; <
}
ﬁﬁ 
}
ﬂﬂ 	
private
·· 
void
·· 
RemoveUnused
·· !
(
··! "
)
··" #
{
‚‚ 	
var
„„ 
waitTrigsEnum
„„ 
=
„„ 
_waitingTriggers
„„  0
.
„„0 1
GetEnumerator
„„1 >
(
„„> ?
)
„„? @
;
„„@ A
while
‰‰ 
(
‰‰ 
waitTrigsEnum
‰‰  
.
‰‰  !
MoveNext
‰‰! )
(
‰‰) *
)
‰‰* +
)
‰‰+ ,
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
waitTrigsEnum
ÊÊ !
.
ÊÊ! "
Current
ÊÊ" )
.
ÊÊ) *
Value
ÊÊ* /
.
ÊÊ/ 0
Count
ÊÊ0 5
==
ÊÊ6 8
$num
ÊÊ9 :
)
ÊÊ: ;
{
ÁÁ 
_waitingTriggers
ËË $
.
ËË$ %
Remove
ËË% +
(
ËË+ ,
waitTrigsEnum
ËË, 9
.
ËË9 :
Current
ËË: A
.
ËËA B
Key
ËËB E
)
ËËE F
;
ËËF G
waitTrigsEnum
ÈÈ !
=
ÈÈ" #
_waitingTriggers
ÈÈ$ 4
.
ÈÈ4 5
GetEnumerator
ÈÈ5 B
(
ÈÈB C
)
ÈÈC D
;
ÈÈD E
continue
ÍÍ 
;
ÍÍ 
}
ÎÎ 
if
ÌÌ 
(
ÌÌ 
_handleToIndex
ÌÌ "
.
ÌÌ" #
ContainsKey
ÌÌ# .
(
ÌÌ. /
waitTrigsEnum
ÌÌ/ <
.
ÌÌ< =
Current
ÌÌ= D
.
ÌÌD E
Key
ÌÌE H
)
ÌÌH I
&&
ÌÌJ L
CoindexIsNull
ÌÌM Z
(
ÌÌZ [
_handleToIndex
ÌÌ[ i
[
ÌÌi j
waitTrigsEnum
ÌÌj w
.
ÌÌw x
Current
ÌÌx 
.ÌÌ Ä
KeyÌÌÄ É
]ÌÌÉ Ñ
)ÌÌÑ Ö
)ÌÌÖ Ü
{
ÓÓ !
CloseWaitingProcess
ÔÔ '
(
ÔÔ' (
waitTrigsEnum
ÔÔ( 5
.
ÔÔ5 6
Current
ÔÔ6 =
.
ÔÔ= >
Key
ÔÔ> A
)
ÔÔA B
;
ÔÔB C
waitTrigsEnum
 !
=
" #
_waitingTriggers
$ 4
.
4 5
GetEnumerator
5 B
(
B C
)
C D
;
D E
}
ÒÒ 
}
ÚÚ 
ProcessIndex
ÙÙ 
outer
ÙÙ 
,
ÙÙ 
inner
ÙÙ  %
;
ÙÙ% &
outer
ıı 
.
ıı 
seg
ıı 
=
ıı 
inner
ıı 
.
ıı 
seg
ıı !
=
ıı" #
Segment
ıı$ +
.
ıı+ ,
Update
ıı, 2
;
ıı2 3
for
˜˜ 
(
˜˜ 
outer
˜˜ 
.
˜˜ 
i
˜˜ 
=
˜˜ 
inner
˜˜  
.
˜˜  !
i
˜˜! "
=
˜˜# $
$num
˜˜% &
;
˜˜& '
outer
˜˜( -
.
˜˜- .
i
˜˜. /
<
˜˜0 1$
_nextUpdateProcessSlot
˜˜2 H
;
˜˜H I
outer
˜˜J O
.
˜˜O P
i
˜˜P Q
++
˜˜Q S
)
˜˜S T
{
¯¯ 
if
˘˘ 
(
˘˘ 
UpdateProcesses
˘˘ #
[
˘˘# $
outer
˘˘$ )
.
˘˘) *
i
˘˘* +
]
˘˘+ ,
!=
˘˘- /
null
˘˘0 4
)
˘˘4 5
{
˙˙ 
if
˚˚ 
(
˚˚ 
outer
˚˚ 
.
˚˚ 
i
˚˚ 
!=
˚˚  "
inner
˚˚# (
.
˚˚( )
i
˚˚) *
)
˚˚* +
{
¸¸ 
UpdateProcesses
˝˝ '
[
˝˝' (
inner
˝˝( -
.
˝˝- .
i
˝˝. /
]
˝˝/ 0
=
˝˝1 2
UpdateProcesses
˝˝3 B
[
˝˝B C
outer
˝˝C H
.
˝˝H I
i
˝˝I J
]
˝˝J K
;
˝˝K L
UpdatePaused
˛˛ $
[
˛˛$ %
inner
˛˛% *
.
˛˛* +
i
˛˛+ ,
]
˛˛, -
=
˛˛. /
UpdatePaused
˛˛0 <
[
˛˛< =
outer
˛˛= B
.
˛˛B C
i
˛˛C D
]
˛˛D E
;
˛˛E F

UpdateHeld
ˇˇ "
[
ˇˇ" #
inner
ˇˇ# (
.
ˇˇ( )
i
ˇˇ) *
]
ˇˇ* +
=
ˇˇ, -

UpdateHeld
ˇˇ. 8
[
ˇˇ8 9
outer
ˇˇ9 >
.
ˇˇ> ?
i
ˇˇ? @
]
ˇˇ@ A
;
ˇˇA B
if
ÅÅ 
(
ÅÅ 
_indexToHandle
ÅÅ *
.
ÅÅ* +
ContainsKey
ÅÅ+ 6
(
ÅÅ6 7
inner
ÅÅ7 <
)
ÅÅ< =
)
ÅÅ= >
{
ÇÇ 
	RemoveTag
ÉÉ %
(
ÉÉ% &
_indexToHandle
ÉÉ& 4
[
ÉÉ4 5
inner
ÉÉ5 :
]
ÉÉ: ;
)
ÉÉ; <
;
ÉÉ< =
_handleToIndex
ÑÑ *
.
ÑÑ* +
Remove
ÑÑ+ 1
(
ÑÑ1 2
_indexToHandle
ÑÑ2 @
[
ÑÑ@ A
inner
ÑÑA F
]
ÑÑF G
)
ÑÑG H
;
ÑÑH I
_indexToHandle
ÖÖ *
.
ÖÖ* +
Remove
ÖÖ+ 1
(
ÖÖ1 2
inner
ÖÖ2 7
)
ÖÖ7 8
;
ÖÖ8 9
}
ÜÜ 
_handleToIndex
àà &
[
àà& '
_indexToHandle
àà' 5
[
àà5 6
outer
àà6 ;
]
àà; <
]
àà< =
=
àà> ?
inner
àà@ E
;
ààE F
_indexToHandle
ââ &
.
ââ& '
Add
ââ' *
(
ââ* +
inner
ââ+ 0
,
ââ0 1
_indexToHandle
ââ2 @
[
ââ@ A
outer
ââA F
]
ââF G
)
ââG H
;
ââH I
_indexToHandle
ää &
.
ää& '
Remove
ää' -
(
ää- .
outer
ää. 3
)
ää3 4
;
ää4 5
}
ãã 
inner
åå 
.
åå 
i
åå 
++
åå 
;
åå 
}
çç 
}
éé 
for
èè 
(
èè 
outer
èè 
.
èè 
i
èè 
=
èè 
inner
èè  
.
èè  !
i
èè! "
;
èè" #
outer
èè$ )
.
èè) *
i
èè* +
<
èè, -$
_nextUpdateProcessSlot
èè. D
;
èèD E
outer
èèF K
.
èèK L
i
èèL M
++
èèM O
)
èèO P
{
êê 
UpdateProcesses
ëë 
[
ëë  
outer
ëë  %
.
ëë% &
i
ëë& '
]
ëë' (
=
ëë) *
null
ëë+ /
;
ëë/ 0
UpdatePaused
íí 
[
íí 
outer
íí "
.
íí" #
i
íí# $
]
íí$ %
=
íí& '
false
íí( -
;
íí- .

UpdateHeld
ìì 
[
ìì 
outer
ìì  
.
ìì  !
i
ìì! "
]
ìì" #
=
ìì$ %
false
ìì& +
;
ìì+ ,
if
ïï 
(
ïï 
_indexToHandle
ïï "
.
ïï" #
ContainsKey
ïï# .
(
ïï. /
outer
ïï/ 4
)
ïï4 5
)
ïï5 6
{
ññ 
	RemoveTag
óó 
(
óó 
_indexToHandle
óó ,
[
óó, -
outer
óó- 2
]
óó2 3
)
óó3 4
;
óó4 5
_handleToIndex
ôô "
.
ôô" #
Remove
ôô# )
(
ôô) *
_indexToHandle
ôô* 8
[
ôô8 9
outer
ôô9 >
]
ôô> ?
)
ôô? @
;
ôô@ A
_indexToHandle
öö "
.
öö" #
Remove
öö# )
(
öö) *
outer
öö* /
)
öö/ 0
;
öö0 1
}
õõ 
}
úú $
_lastUpdateProcessSlot
ûû "
-=
ûû# %$
_nextUpdateProcessSlot
ûû& <
-
ûû= >
inner
ûû? D
.
ûûD E
i
ûûE F
;
ûûF G
UpdateCoroutines
üü 
=
üü $
_nextUpdateProcessSlot
üü 5
=
üü6 7
inner
üü8 =
.
üü= >
i
üü> ?
;
üü? @
outer
°° 
.
°° 
seg
°° 
=
°° 
inner
°° 
.
°° 
seg
°° !
=
°°" #
Segment
°°$ +
.
°°+ ,
FixedUpdate
°°, 7
;
°°7 8
for
¢¢ 
(
¢¢ 
outer
¢¢ 
.
¢¢ 
i
¢¢ 
=
¢¢ 
inner
¢¢  
.
¢¢  !
i
¢¢! "
=
¢¢# $
$num
¢¢% &
;
¢¢& '
outer
¢¢( -
.
¢¢- .
i
¢¢. /
<
¢¢0 1)
_nextFixedUpdateProcessSlot
¢¢2 M
;
¢¢M N
outer
¢¢O T
.
¢¢T U
i
¢¢U V
++
¢¢V X
)
¢¢X Y
{
££ 
if
§§ 
(
§§ "
FixedUpdateProcesses
§§ (
[
§§( )
outer
§§) .
.
§§. /
i
§§/ 0
]
§§0 1
!=
§§2 4
null
§§5 9
)
§§9 :
{
•• 
if
¶¶ 
(
¶¶ 
outer
¶¶ 
.
¶¶ 
i
¶¶ 
!=
¶¶  "
inner
¶¶# (
.
¶¶( )
i
¶¶) *
)
¶¶* +
{
ßß "
FixedUpdateProcesses
®® ,
[
®®, -
inner
®®- 2
.
®®2 3
i
®®3 4
]
®®4 5
=
®®6 7"
FixedUpdateProcesses
®®8 L
[
®®L M
outer
®®M R
.
®®R S
i
®®S T
]
®®T U
;
®®U V
FixedUpdatePaused
©© )
[
©©) *
inner
©©* /
.
©©/ 0
i
©©0 1
]
©©1 2
=
©©3 4
FixedUpdatePaused
©©5 F
[
©©F G
outer
©©G L
.
©©L M
i
©©M N
]
©©N O
;
©©O P
FixedUpdateHeld
™™ '
[
™™' (
inner
™™( -
.
™™- .
i
™™. /
]
™™/ 0
=
™™1 2
FixedUpdateHeld
™™3 B
[
™™B C
outer
™™C H
.
™™H I
i
™™I J
]
™™J K
;
™™K L
if
¨¨ 
(
¨¨ 
_indexToHandle
¨¨ *
.
¨¨* +
ContainsKey
¨¨+ 6
(
¨¨6 7
inner
¨¨7 <
)
¨¨< =
)
¨¨= >
{
≠≠ 
	RemoveTag
ÆÆ %
(
ÆÆ% &
_indexToHandle
ÆÆ& 4
[
ÆÆ4 5
inner
ÆÆ5 :
]
ÆÆ: ;
)
ÆÆ; <
;
ÆÆ< =
_handleToIndex
ØØ *
.
ØØ* +
Remove
ØØ+ 1
(
ØØ1 2
_indexToHandle
ØØ2 @
[
ØØ@ A
inner
ØØA F
]
ØØF G
)
ØØG H
;
ØØH I
_indexToHandle
∞∞ *
.
∞∞* +
Remove
∞∞+ 1
(
∞∞1 2
inner
∞∞2 7
)
∞∞7 8
;
∞∞8 9
}
±± 
_handleToIndex
≥≥ &
[
≥≥& '
_indexToHandle
≥≥' 5
[
≥≥5 6
outer
≥≥6 ;
]
≥≥; <
]
≥≥< =
=
≥≥> ?
inner
≥≥@ E
;
≥≥E F
_indexToHandle
¥¥ &
.
¥¥& '
Add
¥¥' *
(
¥¥* +
inner
¥¥+ 0
,
¥¥0 1
_indexToHandle
¥¥2 @
[
¥¥@ A
outer
¥¥A F
]
¥¥F G
)
¥¥G H
;
¥¥H I
_indexToHandle
µµ &
.
µµ& '
Remove
µµ' -
(
µµ- .
outer
µµ. 3
)
µµ3 4
;
µµ4 5
}
∂∂ 
inner
∑∑ 
.
∑∑ 
i
∑∑ 
++
∑∑ 
;
∑∑ 
}
∏∏ 
}
ππ 
for
∫∫ 
(
∫∫ 
outer
∫∫ 
.
∫∫ 
i
∫∫ 
=
∫∫ 
inner
∫∫  
.
∫∫  !
i
∫∫! "
;
∫∫" #
outer
∫∫$ )
.
∫∫) *
i
∫∫* +
<
∫∫, -)
_nextFixedUpdateProcessSlot
∫∫. I
;
∫∫I J
outer
∫∫K P
.
∫∫P Q
i
∫∫Q R
++
∫∫R T
)
∫∫T U
{
ªª "
FixedUpdateProcesses
ºº $
[
ºº$ %
outer
ºº% *
.
ºº* +
i
ºº+ ,
]
ºº, -
=
ºº. /
null
ºº0 4
;
ºº4 5
FixedUpdatePaused
ΩΩ !
[
ΩΩ! "
outer
ΩΩ" '
.
ΩΩ' (
i
ΩΩ( )
]
ΩΩ) *
=
ΩΩ+ ,
false
ΩΩ- 2
;
ΩΩ2 3
FixedUpdateHeld
ææ 
[
ææ  
outer
ææ  %
.
ææ% &
i
ææ& '
]
ææ' (
=
ææ) *
false
ææ+ 0
;
ææ0 1
if
¿¿ 
(
¿¿ 
_indexToHandle
¿¿ "
.
¿¿" #
ContainsKey
¿¿# .
(
¿¿. /
outer
¿¿/ 4
)
¿¿4 5
)
¿¿5 6
{
¡¡ 
	RemoveTag
¬¬ 
(
¬¬ 
_indexToHandle
¬¬ ,
[
¬¬, -
outer
¬¬- 2
]
¬¬2 3
)
¬¬3 4
;
¬¬4 5
_handleToIndex
ƒƒ "
.
ƒƒ" #
Remove
ƒƒ# )
(
ƒƒ) *
_indexToHandle
ƒƒ* 8
[
ƒƒ8 9
outer
ƒƒ9 >
]
ƒƒ> ?
)
ƒƒ? @
;
ƒƒ@ A
_indexToHandle
≈≈ "
.
≈≈" #
Remove
≈≈# )
(
≈≈) *
outer
≈≈* /
)
≈≈/ 0
;
≈≈0 1
}
∆∆ 
}
«« )
_lastFixedUpdateProcessSlot
…… '
-=
……( *)
_nextFixedUpdateProcessSlot
……+ F
-
……G H
inner
……I N
.
……N O
i
……O P
;
……P Q#
FixedUpdateCoroutines
   !
=
  " #)
_nextFixedUpdateProcessSlot
  $ ?
=
  @ A
inner
  B G
.
  G H
i
  H I
;
  I J
outer
ÃÃ 
.
ÃÃ 
seg
ÃÃ 
=
ÃÃ 
inner
ÃÃ 
.
ÃÃ 
seg
ÃÃ !
=
ÃÃ" #
Segment
ÃÃ$ +
.
ÃÃ+ ,

LateUpdate
ÃÃ, 6
;
ÃÃ6 7
for
ÕÕ 
(
ÕÕ 
outer
ÕÕ 
.
ÕÕ 
i
ÕÕ 
=
ÕÕ 
inner
ÕÕ  
.
ÕÕ  !
i
ÕÕ! "
=
ÕÕ# $
$num
ÕÕ% &
;
ÕÕ& '
outer
ÕÕ( -
.
ÕÕ- .
i
ÕÕ. /
<
ÕÕ0 1(
_nextLateUpdateProcessSlot
ÕÕ2 L
;
ÕÕL M
outer
ÕÕN S
.
ÕÕS T
i
ÕÕT U
++
ÕÕU W
)
ÕÕW X
{
ŒŒ 
if
œœ 
(
œœ !
LateUpdateProcesses
œœ '
[
œœ' (
outer
œœ( -
.
œœ- .
i
œœ. /
]
œœ/ 0
!=
œœ1 3
null
œœ4 8
)
œœ8 9
{
–– 
if
—— 
(
—— 
outer
—— 
.
—— 
i
—— 
!=
——  "
inner
——# (
.
——( )
i
——) *
)
——* +
{
““ !
LateUpdateProcesses
”” +
[
””+ ,
inner
””, 1
.
””1 2
i
””2 3
]
””3 4
=
””5 6!
LateUpdateProcesses
””7 J
[
””J K
outer
””K P
.
””P Q
i
””Q R
]
””R S
;
””S T
LateUpdatePaused
‘‘ (
[
‘‘( )
inner
‘‘) .
.
‘‘. /
i
‘‘/ 0
]
‘‘0 1
=
‘‘2 3
LateUpdatePaused
‘‘4 D
[
‘‘D E
outer
‘‘E J
.
‘‘J K
i
‘‘K L
]
‘‘L M
;
‘‘M N
LateUpdateHeld
’’ &
[
’’& '
inner
’’' ,
.
’’, -
i
’’- .
]
’’. /
=
’’0 1
LateUpdateHeld
’’2 @
[
’’@ A
outer
’’A F
.
’’F G
i
’’G H
]
’’H I
;
’’I J
if
◊◊ 
(
◊◊ 
_indexToHandle
◊◊ *
.
◊◊* +
ContainsKey
◊◊+ 6
(
◊◊6 7
inner
◊◊7 <
)
◊◊< =
)
◊◊= >
{
ÿÿ 
	RemoveTag
ŸŸ %
(
ŸŸ% &
_indexToHandle
ŸŸ& 4
[
ŸŸ4 5
inner
ŸŸ5 :
]
ŸŸ: ;
)
ŸŸ; <
;
ŸŸ< =
_handleToIndex
⁄⁄ *
.
⁄⁄* +
Remove
⁄⁄+ 1
(
⁄⁄1 2
_indexToHandle
⁄⁄2 @
[
⁄⁄@ A
inner
⁄⁄A F
]
⁄⁄F G
)
⁄⁄G H
;
⁄⁄H I
_indexToHandle
€€ *
.
€€* +
Remove
€€+ 1
(
€€1 2
inner
€€2 7
)
€€7 8
;
€€8 9
}
‹‹ 
_handleToIndex
ﬁﬁ &
[
ﬁﬁ& '
_indexToHandle
ﬁﬁ' 5
[
ﬁﬁ5 6
outer
ﬁﬁ6 ;
]
ﬁﬁ; <
]
ﬁﬁ< =
=
ﬁﬁ> ?
inner
ﬁﬁ@ E
;
ﬁﬁE F
_indexToHandle
ﬂﬂ &
.
ﬂﬂ& '
Add
ﬂﬂ' *
(
ﬂﬂ* +
inner
ﬂﬂ+ 0
,
ﬂﬂ0 1
_indexToHandle
ﬂﬂ2 @
[
ﬂﬂ@ A
outer
ﬂﬂA F
]
ﬂﬂF G
)
ﬂﬂG H
;
ﬂﬂH I
_indexToHandle
‡‡ &
.
‡‡& '
Remove
‡‡' -
(
‡‡- .
outer
‡‡. 3
)
‡‡3 4
;
‡‡4 5
}
·· 
inner
‚‚ 
.
‚‚ 
i
‚‚ 
++
‚‚ 
;
‚‚ 
}
„„ 
}
‰‰ 
for
ÂÂ 
(
ÂÂ 
outer
ÂÂ 
.
ÂÂ 
i
ÂÂ 
=
ÂÂ 
inner
ÂÂ  
.
ÂÂ  !
i
ÂÂ! "
;
ÂÂ" #
outer
ÂÂ$ )
.
ÂÂ) *
i
ÂÂ* +
<
ÂÂ, -(
_nextLateUpdateProcessSlot
ÂÂ. H
;
ÂÂH I
outer
ÂÂJ O
.
ÂÂO P
i
ÂÂP Q
++
ÂÂQ S
)
ÂÂS T
{
ÊÊ !
LateUpdateProcesses
ÁÁ #
[
ÁÁ# $
outer
ÁÁ$ )
.
ÁÁ) *
i
ÁÁ* +
]
ÁÁ+ ,
=
ÁÁ- .
null
ÁÁ/ 3
;
ÁÁ3 4
LateUpdatePaused
ËË  
[
ËË  !
outer
ËË! &
.
ËË& '
i
ËË' (
]
ËË( )
=
ËË* +
false
ËË, 1
;
ËË1 2
LateUpdateHeld
ÈÈ 
[
ÈÈ 
outer
ÈÈ $
.
ÈÈ$ %
i
ÈÈ% &
]
ÈÈ& '
=
ÈÈ( )
false
ÈÈ* /
;
ÈÈ/ 0
if
ÎÎ 
(
ÎÎ 
_indexToHandle
ÎÎ "
.
ÎÎ" #
ContainsKey
ÎÎ# .
(
ÎÎ. /
outer
ÎÎ/ 4
)
ÎÎ4 5
)
ÎÎ5 6
{
ÏÏ 
	RemoveTag
ÌÌ 
(
ÌÌ 
_indexToHandle
ÌÌ ,
[
ÌÌ, -
outer
ÌÌ- 2
]
ÌÌ2 3
)
ÌÌ3 4
;
ÌÌ4 5
_handleToIndex
ÔÔ "
.
ÔÔ" #
Remove
ÔÔ# )
(
ÔÔ) *
_indexToHandle
ÔÔ* 8
[
ÔÔ8 9
outer
ÔÔ9 >
]
ÔÔ> ?
)
ÔÔ? @
;
ÔÔ@ A
_indexToHandle
 "
.
" #
Remove
# )
(
) *
outer
* /
)
/ 0
;
0 1
}
ÒÒ 
}
ÚÚ (
_lastLateUpdateProcessSlot
ÙÙ &
-=
ÙÙ' )(
_nextLateUpdateProcessSlot
ÙÙ* D
-
ÙÙE F
inner
ÙÙG L
.
ÙÙL M
i
ÙÙM N
;
ÙÙN O"
LateUpdateCoroutines
ıı  
=
ıı! "(
_nextLateUpdateProcessSlot
ıı# =
=
ıı> ?
inner
ıı@ E
.
ııE F
i
ııF G
;
ııG H
outer
˜˜ 
.
˜˜ 
seg
˜˜ 
=
˜˜ 
inner
˜˜ 
.
˜˜ 
seg
˜˜ !
=
˜˜" #
Segment
˜˜$ +
.
˜˜+ ,

SlowUpdate
˜˜, 6
;
˜˜6 7
for
¯¯ 
(
¯¯ 
outer
¯¯ 
.
¯¯ 
i
¯¯ 
=
¯¯ 
inner
¯¯  
.
¯¯  !
i
¯¯! "
=
¯¯# $
$num
¯¯% &
;
¯¯& '
outer
¯¯( -
.
¯¯- .
i
¯¯. /
<
¯¯0 1(
_nextSlowUpdateProcessSlot
¯¯2 L
;
¯¯L M
outer
¯¯N S
.
¯¯S T
i
¯¯T U
++
¯¯U W
)
¯¯W X
{
˘˘ 
if
˙˙ 
(
˙˙ !
SlowUpdateProcesses
˙˙ '
[
˙˙' (
outer
˙˙( -
.
˙˙- .
i
˙˙. /
]
˙˙/ 0
!=
˙˙1 3
null
˙˙4 8
)
˙˙8 9
{
˚˚ 
if
¸¸ 
(
¸¸ 
outer
¸¸ 
.
¸¸ 
i
¸¸ 
!=
¸¸  "
inner
¸¸# (
.
¸¸( )
i
¸¸) *
)
¸¸* +
{
˝˝ !
SlowUpdateProcesses
˛˛ +
[
˛˛+ ,
inner
˛˛, 1
.
˛˛1 2
i
˛˛2 3
]
˛˛3 4
=
˛˛5 6!
SlowUpdateProcesses
˛˛7 J
[
˛˛J K
outer
˛˛K P
.
˛˛P Q
i
˛˛Q R
]
˛˛R S
;
˛˛S T
SlowUpdatePaused
ˇˇ (
[
ˇˇ( )
inner
ˇˇ) .
.
ˇˇ. /
i
ˇˇ/ 0
]
ˇˇ0 1
=
ˇˇ2 3
SlowUpdatePaused
ˇˇ4 D
[
ˇˇD E
outer
ˇˇE J
.
ˇˇJ K
i
ˇˇK L
]
ˇˇL M
;
ˇˇM N
SlowUpdateHeld
ÄÄ &
[
ÄÄ& '
inner
ÄÄ' ,
.
ÄÄ, -
i
ÄÄ- .
]
ÄÄ. /
=
ÄÄ0 1
SlowUpdateHeld
ÄÄ2 @
[
ÄÄ@ A
outer
ÄÄA F
.
ÄÄF G
i
ÄÄG H
]
ÄÄH I
;
ÄÄI J
if
ÇÇ 
(
ÇÇ 
_indexToHandle
ÇÇ *
.
ÇÇ* +
ContainsKey
ÇÇ+ 6
(
ÇÇ6 7
inner
ÇÇ7 <
)
ÇÇ< =
)
ÇÇ= >
{
ÉÉ 
	RemoveTag
ÑÑ %
(
ÑÑ% &
_indexToHandle
ÑÑ& 4
[
ÑÑ4 5
inner
ÑÑ5 :
]
ÑÑ: ;
)
ÑÑ; <
;
ÑÑ< =
_handleToIndex
ÖÖ *
.
ÖÖ* +
Remove
ÖÖ+ 1
(
ÖÖ1 2
_indexToHandle
ÖÖ2 @
[
ÖÖ@ A
inner
ÖÖA F
]
ÖÖF G
)
ÖÖG H
;
ÖÖH I
_indexToHandle
ÜÜ *
.
ÜÜ* +
Remove
ÜÜ+ 1
(
ÜÜ1 2
inner
ÜÜ2 7
)
ÜÜ7 8
;
ÜÜ8 9
}
áá 
_handleToIndex
ââ &
[
ââ& '
_indexToHandle
ââ' 5
[
ââ5 6
outer
ââ6 ;
]
ââ; <
]
ââ< =
=
ââ> ?
inner
ââ@ E
;
ââE F
_indexToHandle
ää &
.
ää& '
Add
ää' *
(
ää* +
inner
ää+ 0
,
ää0 1
_indexToHandle
ää2 @
[
ää@ A
outer
ääA F
]
ääF G
)
ääG H
;
ääH I
_indexToHandle
ãã &
.
ãã& '
Remove
ãã' -
(
ãã- .
outer
ãã. 3
)
ãã3 4
;
ãã4 5
}
åå 
inner
çç 
.
çç 
i
çç 
++
çç 
;
çç 
}
éé 
}
èè 
for
êê 
(
êê 
outer
êê 
.
êê 
i
êê 
=
êê 
inner
êê  
.
êê  !
i
êê! "
;
êê" #
outer
êê$ )
.
êê) *
i
êê* +
<
êê, -(
_nextSlowUpdateProcessSlot
êê. H
;
êêH I
outer
êêJ O
.
êêO P
i
êêP Q
++
êêQ S
)
êêS T
{
ëë !
SlowUpdateProcesses
íí #
[
íí# $
outer
íí$ )
.
íí) *
i
íí* +
]
íí+ ,
=
íí- .
null
íí/ 3
;
íí3 4
SlowUpdatePaused
ìì  
[
ìì  !
outer
ìì! &
.
ìì& '
i
ìì' (
]
ìì( )
=
ìì* +
false
ìì, 1
;
ìì1 2
SlowUpdateHeld
îî 
[
îî 
outer
îî $
.
îî$ %
i
îî% &
]
îî& '
=
îî( )
false
îî* /
;
îî/ 0
if
ññ 
(
ññ 
_indexToHandle
ññ "
.
ññ" #
ContainsKey
ññ# .
(
ññ. /
outer
ññ/ 4
)
ññ4 5
)
ññ5 6
{
óó 
	RemoveTag
òò 
(
òò 
_indexToHandle
òò ,
[
òò, -
outer
òò- 2
]
òò2 3
)
òò3 4
;
òò4 5
_handleToIndex
öö "
.
öö" #
Remove
öö# )
(
öö) *
_indexToHandle
öö* 8
[
öö8 9
outer
öö9 >
]
öö> ?
)
öö? @
;
öö@ A
_indexToHandle
õõ "
.
õõ" #
Remove
õõ# )
(
õõ) *
outer
õõ* /
)
õõ/ 0
;
õõ0 1
}
úú 
}
ùù (
_lastSlowUpdateProcessSlot
üü &
-=
üü' )(
_nextSlowUpdateProcessSlot
üü* D
-
üüE F
inner
üüG L
.
üüL M
i
üüM N
;
üüN O"
SlowUpdateCoroutines
††  
=
††! "(
_nextSlowUpdateProcessSlot
††# =
=
††> ?
inner
††@ E
.
††E F
i
††F G
;
††G H
}
°° 	
public
®® 
static
®® 
CoroutineHandle
®® %
RunCoroutine
®®& 2
(
®®2 3
IEnumerator
®®3 >
<
®®> ?
float
®®? D
>
®®D E
	coroutine
®®F O
)
®®O P
{
©© 	
return
™™ 
	coroutine
™™ 
==
™™ 
null
™™  $
?
™™% &
new
™™' *
CoroutineHandle
™™+ :
(
™™: ;
)
™™; <
:
´´ 
Instance
´´ 
.
´´ "
RunCoroutineInternal
´´ /
(
´´/ 0
	coroutine
´´0 9
,
´´9 :
Segment
´´; B
.
´´B C
Update
´´C I
,
´´I J
null
´´K O
,
´´O P
new
´´Q T
CoroutineHandle
´´U d
(
´´d e
Instance
´´e m
.
´´m n
_instanceID
´´n y
)
´´y z
,
´´z {
true´´| Ä
)´´Ä Å
;´´Å Ç
}
¨¨ 	
public
¥¥ 
static
¥¥ 
CoroutineHandle
¥¥ %
RunCoroutine
¥¥& 2
(
¥¥2 3
IEnumerator
¥¥3 >
<
¥¥> ?
float
¥¥? D
>
¥¥D E
	coroutine
¥¥F O
,
¥¥O P
string
¥¥Q W
tag
¥¥X [
)
¥¥[ \
{
µµ 	
return
∂∂ 
	coroutine
∂∂ 
==
∂∂ 
null
∂∂  $
?
∂∂% &
new
∂∂' *
CoroutineHandle
∂∂+ :
(
∂∂: ;
)
∂∂; <
:
∑∑ 
Instance
∑∑ 
.
∑∑ "
RunCoroutineInternal
∑∑ /
(
∑∑/ 0
	coroutine
∑∑0 9
,
∑∑9 :
Segment
∑∑; B
.
∑∑B C
Update
∑∑C I
,
∑∑I J
tag
∑∑K N
,
∑∑N O
new
∑∑P S
CoroutineHandle
∑∑T c
(
∑∑c d
Instance
∑∑d l
.
∑∑l m
_instanceID
∑∑m x
)
∑∑x y
,
∑∑y z
true
∑∑{ 
)∑∑ Ä
;∑∑Ä Å
}
∏∏ 	
public
¿¿ 
static
¿¿ 
CoroutineHandle
¿¿ %
RunCoroutine
¿¿& 2
(
¿¿2 3
IEnumerator
¿¿3 >
<
¿¿> ?
float
¿¿? D
>
¿¿D E
	coroutine
¿¿F O
,
¿¿O P
Segment
¿¿Q X
segment
¿¿Y `
)
¿¿` a
{
¡¡ 	
return
¬¬ 
	coroutine
¬¬ 
==
¬¬ 
null
¬¬  $
?
¬¬% &
new
¬¬' *
CoroutineHandle
¬¬+ :
(
¬¬: ;
)
¬¬; <
:
√√ 
Instance
√√ 
.
√√ "
RunCoroutineInternal
√√ /
(
√√/ 0
	coroutine
√√0 9
,
√√9 :
segment
√√; B
,
√√B C
null
√√D H
,
√√H I
new
√√J M
CoroutineHandle
√√N ]
(
√√] ^
Instance
√√^ f
.
√√f g
_instanceID
√√g r
)
√√r s
,
√√s t
true
√√u y
)
√√y z
;
√√z {
}
ƒƒ 	
public
ÕÕ 
static
ÕÕ 
CoroutineHandle
ÕÕ %
RunCoroutine
ÕÕ& 2
(
ÕÕ2 3
IEnumerator
ÕÕ3 >
<
ÕÕ> ?
float
ÕÕ? D
>
ÕÕD E
	coroutine
ÕÕF O
,
ÕÕO P
Segment
ÕÕQ X
segment
ÕÕY `
,
ÕÕ` a
string
ÕÕb h
tag
ÕÕi l
)
ÕÕl m
{
ŒŒ 	
return
œœ 
	coroutine
œœ 
==
œœ 
null
œœ  $
?
œœ% &
new
œœ' *
CoroutineHandle
œœ+ :
(
œœ: ;
)
œœ; <
:
–– 
Instance
–– 
.
–– "
RunCoroutineInternal
–– /
(
––/ 0
	coroutine
––0 9
,
––9 :
segment
––; B
,
––B C
tag
––D G
,
––G H
new
––I L
CoroutineHandle
––M \
(
––\ ]
Instance
––] e
.
––e f
_instanceID
––f q
)
––q r
,
––r s
true
––t x
)
––x y
;
––y z
}
—— 	
public
ÿÿ 
CoroutineHandle
ÿÿ $
RunCoroutineOnInstance
ÿÿ 5
(
ÿÿ5 6
IEnumerator
ÿÿ6 A
<
ÿÿA B
float
ÿÿB G
>
ÿÿG H
	coroutine
ÿÿI R
)
ÿÿR S
{
ŸŸ 	
return
⁄⁄ 
	coroutine
⁄⁄ 
==
⁄⁄ 
null
⁄⁄  $
?
⁄⁄% &
new
⁄⁄' *
CoroutineHandle
⁄⁄+ :
(
⁄⁄: ;
)
⁄⁄; <
:
€€ "
RunCoroutineInternal
€€ '
(
€€' (
	coroutine
€€( 1
,
€€1 2
Segment
€€3 :
.
€€: ;
Update
€€; A
,
€€A B
null
€€C G
,
€€G H
new
€€I L
CoroutineHandle
€€M \
(
€€\ ]
_instanceID
€€] h
)
€€h i
,
€€i j
true
€€k o
)
€€o p
;
€€p q
}
‹‹ 	
public
‰‰ 
CoroutineHandle
‰‰ $
RunCoroutineOnInstance
‰‰ 5
(
‰‰5 6
IEnumerator
‰‰6 A
<
‰‰A B
float
‰‰B G
>
‰‰G H
	coroutine
‰‰I R
,
‰‰R S
string
‰‰T Z
tag
‰‰[ ^
)
‰‰^ _
{
ÂÂ 	
return
ÊÊ 
	coroutine
ÊÊ 
==
ÊÊ 
null
ÊÊ  $
?
ÊÊ% &
new
ÊÊ' *
CoroutineHandle
ÊÊ+ :
(
ÊÊ: ;
)
ÊÊ; <
:
ÁÁ "
RunCoroutineInternal
ÁÁ '
(
ÁÁ' (
	coroutine
ÁÁ( 1
,
ÁÁ1 2
Segment
ÁÁ3 :
.
ÁÁ: ;
Update
ÁÁ; A
,
ÁÁA B
tag
ÁÁC F
,
ÁÁF G
new
ÁÁH K
CoroutineHandle
ÁÁL [
(
ÁÁ[ \
_instanceID
ÁÁ\ g
)
ÁÁg h
,
ÁÁh i
true
ÁÁj n
)
ÁÁn o
;
ÁÁo p
}
ËË 	
public
 
CoroutineHandle
 $
RunCoroutineOnInstance
 5
(
5 6
IEnumerator
6 A
<
A B
float
B G
>
G H
	coroutine
I R
,
R S
Segment
T [
segment
\ c
)
c d
{
ÒÒ 	
return
ÚÚ 
	coroutine
ÚÚ 
==
ÚÚ 
null
ÚÚ  $
?
ÚÚ% &
new
ÚÚ' *
CoroutineHandle
ÚÚ+ :
(
ÚÚ: ;
)
ÚÚ; <
:
ÛÛ "
RunCoroutineInternal
ÛÛ '
(
ÛÛ' (
	coroutine
ÛÛ( 1
,
ÛÛ1 2
segment
ÛÛ3 :
,
ÛÛ: ;
null
ÛÛ< @
,
ÛÛ@ A
new
ÛÛB E
CoroutineHandle
ÛÛF U
(
ÛÛU V
_instanceID
ÛÛV a
)
ÛÛa b
,
ÛÛb c
true
ÛÛd h
)
ÛÛh i
;
ÛÛi j
}
ÙÙ 	
public
˝˝ 
CoroutineHandle
˝˝ $
RunCoroutineOnInstance
˝˝ 5
(
˝˝5 6
IEnumerator
˝˝6 A
<
˝˝A B
float
˝˝B G
>
˝˝G H
	coroutine
˝˝I R
,
˝˝R S
Segment
˝˝T [
segment
˝˝\ c
,
˝˝c d
string
˝˝e k
tag
˝˝l o
)
˝˝o p
{
˛˛ 	
return
ˇˇ 
	coroutine
ˇˇ 
==
ˇˇ 
null
ˇˇ  $
?
ˇˇ% &
new
ˇˇ' *
CoroutineHandle
ˇˇ+ :
(
ˇˇ: ;
)
ˇˇ; <
:
ÄÄ "
RunCoroutineInternal
ÄÄ '
(
ÄÄ' (
	coroutine
ÄÄ( 1
,
ÄÄ1 2
segment
ÄÄ3 :
,
ÄÄ: ;
tag
ÄÄ< ?
,
ÄÄ? @
new
ÄÄA D
CoroutineHandle
ÄÄE T
(
ÄÄT U
_instanceID
ÄÄU `
)
ÄÄ` a
,
ÄÄa b
true
ÄÄc g
)
ÄÄg h
;
ÄÄh i
}
ÅÅ 	
private
ÑÑ 
CoroutineHandle
ÑÑ "
RunCoroutineInternal
ÑÑ  4
(
ÑÑ4 5
IEnumerator
ÑÑ5 @
<
ÑÑ@ A
float
ÑÑA F
>
ÑÑF G
	coroutine
ÑÑH Q
,
ÑÑQ R
Segment
ÑÑS Z
segment
ÑÑ[ b
,
ÑÑb c
string
ÑÑd j
tag
ÑÑk n
,
ÑÑn o
CoroutineHandle
ÑÑp 
handleÑÑÄ Ü
,ÑÑÜ á
boolÑÑà å
prewarmÑÑç î
)ÑÑî ï
{
ÖÖ 	
ProcessIndex
ÜÜ 
slot
ÜÜ 
=
ÜÜ 
new
ÜÜ  #
ProcessIndex
ÜÜ$ 0
{
ÜÜ1 2
seg
ÜÜ3 6
=
ÜÜ7 8
segment
ÜÜ9 @
}
ÜÜA B
;
ÜÜB C
if
àà 
(
àà 
_handleToIndex
àà 
.
àà 
ContainsKey
àà *
(
àà* +
handle
àà+ 1
)
àà1 2
)
àà2 3
{
ââ 
_indexToHandle
ää 
.
ää 
Remove
ää %
(
ää% &
_handleToIndex
ää& 4
[
ää4 5
handle
ää5 ;
]
ää; <
)
ää< =
;
ää= >
_handleToIndex
ãã 
.
ãã 
Remove
ãã %
(
ãã% &
handle
ãã& ,
)
ãã, -
;
ãã- .
}
åå 
float
éé 
currentLocalTime
éé "
=
éé# $
	localTime
éé% .
;
éé. /
float
èè 
currentDeltaTime
èè "
=
èè# $
	deltaTime
èè% .
;
èè. /
CoroutineHandle
êê 
cachedHandle
êê (
=
êê) *
currentCoroutine
êê+ ;
;
êê; <
currentCoroutine
ëë 
=
ëë 
handle
ëë %
;
ëë% &
switch
ìì 
(
ìì 
segment
ìì 
)
ìì 
{
îî 
case
ïï 
Segment
ïï 
.
ïï 
Update
ïï #
:
ïï# $
if
óó 
(
óó $
_nextUpdateProcessSlot
óó .
>=
óó/ 1
UpdateProcesses
óó2 A
.
óóA B
Length
óóB H
)
óóH I
{
òò 
IEnumerator
ôô #
<
ôô# $
float
ôô$ )
>
ôô) *
[
ôô* +
]
ôô+ ,
oldProcArray
ôô- 9
=
ôô: ;
UpdateProcesses
ôô< K
;
ôôK L
bool
öö 
[
öö 
]
öö 
oldPausedArray
öö -
=
öö. /
UpdatePaused
öö0 <
;
öö< =
bool
õõ 
[
õõ 
]
õõ 
oldHeldArray
õõ +
=
õõ, -

UpdateHeld
õõ. 8
;
õõ8 9
UpdateProcesses
ùù '
=
ùù( )
new
ùù* -
IEnumerator
ùù. 9
<
ùù9 :
float
ùù: ?
>
ùù? @
[
ùù@ A
UpdateProcesses
ùùA P
.
ùùP Q
Length
ùùQ W
+
ùùX Y
(
ùùZ [#
ProcessArrayChunkSize
ùù[ p
*
ùùq r
_expansions
ùùs ~
++ùù~ Ä
)ùùÄ Å
]ùùÅ Ç
;ùùÇ É
UpdatePaused
ûû $
=
ûû% &
new
ûû' *
bool
ûû+ /
[
ûû/ 0
UpdateProcesses
ûû0 ?
.
ûû? @
Length
ûû@ F
]
ûûF G
;
ûûG H

UpdateHeld
üü "
=
üü# $
new
üü% (
bool
üü) -
[
üü- .
UpdateProcesses
üü. =
.
üü= >
Length
üü> D
]
üüD E
;
üüE F
for
°° 
(
°° 
int
°°  
i
°°! "
=
°°# $
$num
°°% &
;
°°& '
i
°°( )
<
°°* +
oldProcArray
°°, 8
.
°°8 9
Length
°°9 ?
;
°°? @
i
°°A B
++
°°B D
)
°°D E
{
¢¢ 
UpdateProcesses
££ +
[
££+ ,
i
££, -
]
££- .
=
££/ 0
oldProcArray
££1 =
[
££= >
i
££> ?
]
££? @
;
££@ A
UpdatePaused
§§ (
[
§§( )
i
§§) *
]
§§* +
=
§§, -
oldPausedArray
§§. <
[
§§< =
i
§§= >
]
§§> ?
;
§§? @

UpdateHeld
•• &
[
••& '
i
••' (
]
••( )
=
••* +
oldHeldArray
••, 8
[
••8 9
i
••9 :
]
••: ;
;
••; <
}
¶¶ 
}
ßß 
if
©© 
(
©© 
UpdateTimeValues
©© (
(
©©( )
slot
©©) -
.
©©- .
seg
©©. 1
)
©©1 2
)
©©2 3$
_lastUpdateProcessSlot
™™ .
=
™™/ 0$
_nextUpdateProcessSlot
™™1 G
;
™™G H
slot
¨¨ 
.
¨¨ 
i
¨¨ 
=
¨¨ $
_nextUpdateProcessSlot
¨¨ 3
++
¨¨3 5
;
¨¨5 6
UpdateProcesses
≠≠ #
[
≠≠# $
slot
≠≠$ (
.
≠≠( )
i
≠≠) *
]
≠≠* +
=
≠≠, -
	coroutine
≠≠. 7
;
≠≠7 8
if
ØØ 
(
ØØ 
null
ØØ 
!=
ØØ 
tag
ØØ  #
)
ØØ# $
AddTag
∞∞ 
(
∞∞ 
tag
∞∞ "
,
∞∞" #
handle
∞∞$ *
)
∞∞* +
;
∞∞+ ,
_indexToHandle
≤≤ "
.
≤≤" #
Add
≤≤# &
(
≤≤& '
slot
≤≤' +
,
≤≤+ ,
handle
≤≤- 3
)
≤≤3 4
;
≤≤4 5
_handleToIndex
≥≥ "
.
≥≥" #
Add
≥≥# &
(
≥≥& '
handle
≥≥' -
,
≥≥- .
slot
≥≥/ 3
)
≥≥3 4
;
≥≥4 5
while
µµ 
(
µµ 
prewarm
µµ "
)
µµ" #
{
∂∂ 
if
∑∑ 
(
∑∑ 
!
∑∑ 
UpdateProcesses
∑∑ ,
[
∑∑, -
slot
∑∑- 1
.
∑∑1 2
i
∑∑2 3
]
∑∑3 4
.
∑∑4 5
MoveNext
∑∑5 =
(
∑∑= >
)
∑∑> ?
)
∑∑? @
{
∏∏ 
if
ππ 
(
ππ  
_indexToHandle
ππ  .
.
ππ. /
ContainsKey
ππ/ :
(
ππ: ;
slot
ππ; ?
)
ππ? @
)
ππ@ A&
KillCoroutinesOnInstance
∫∫  8
(
∫∫8 9
_indexToHandle
∫∫9 G
[
∫∫G H
slot
∫∫H L
]
∫∫L M
)
∫∫M N
;
∫∫N O
prewarm
ºº #
=
ºº$ %
false
ºº& +
;
ºº+ ,
}
ΩΩ 
else
ææ 
if
ææ 
(
ææ  !
UpdateProcesses
ææ! 0
[
ææ0 1
slot
ææ1 5
.
ææ5 6
i
ææ6 7
]
ææ7 8
!=
ææ9 ;
null
ææ< @
&&
ææA C
float
ææD I
.
ææI J
IsNaN
ææJ O
(
ææO P
UpdateProcesses
ææP _
[
ææ_ `
slot
ææ` d
.
ææd e
i
ææe f
]
ææf g
.
ææg h
Current
ææh o
)
ææo p
)
ææp q
{
øø 
if
¿¿ 
(
¿¿  !
ReplacementFunction
¿¿  3
!=
¿¿4 6
null
¿¿7 ;
)
¿¿; <
{
¡¡ 
UpdateProcesses
¬¬  /
[
¬¬/ 0
slot
¬¬0 4
.
¬¬4 5
i
¬¬5 6
]
¬¬6 7
=
¬¬8 9!
ReplacementFunction
¬¬: M
(
¬¬M N
UpdateProcesses
¬¬N ]
[
¬¬] ^
slot
¬¬^ b
.
¬¬b c
i
¬¬c d
]
¬¬d e
,
¬¬e f
_indexToHandle
¬¬g u
[
¬¬u v
slot
¬¬v z
]
¬¬z {
)
¬¬{ |
;
¬¬| }!
ReplacementFunction
√√  3
=
√√4 5
null
√√6 :
;
√√: ;
}
ƒƒ 
prewarm
≈≈ #
=
≈≈$ %
!
≈≈& '
UpdatePaused
≈≈' 3
[
≈≈3 4
slot
≈≈4 8
.
≈≈8 9
i
≈≈9 :
]
≈≈: ;
&&
≈≈< >
!
≈≈? @

UpdateHeld
≈≈@ J
[
≈≈J K
slot
≈≈K O
.
≈≈O P
i
≈≈P Q
]
≈≈Q R
;
≈≈R S
}
∆∆ 
else
«« 
{
»» 
prewarm
…… #
=
……$ %
false
……& +
;
……+ ,
}
   
}
ÀÀ 
break
ÕÕ 
;
ÕÕ 
case
œœ 
Segment
œœ 
.
œœ 
FixedUpdate
œœ (
:
œœ( )
if
—— 
(
—— )
_nextFixedUpdateProcessSlot
—— 3
>=
——4 6"
FixedUpdateProcesses
——7 K
.
——K L
Length
——L R
)
——R S
{
““ 
IEnumerator
”” #
<
””# $
float
””$ )
>
””) *
[
””* +
]
””+ ,
oldProcArray
””- 9
=
””: ;"
FixedUpdateProcesses
””< P
;
””P Q
bool
‘‘ 
[
‘‘ 
]
‘‘ 
oldPausedArray
‘‘ -
=
‘‘. /
FixedUpdatePaused
‘‘0 A
;
‘‘A B
bool
’’ 
[
’’ 
]
’’ 
oldHeldArray
’’ +
=
’’, -
FixedUpdateHeld
’’. =
;
’’= >"
FixedUpdateProcesses
◊◊ ,
=
◊◊- .
new
◊◊/ 2
IEnumerator
◊◊3 >
<
◊◊> ?
float
◊◊? D
>
◊◊D E
[
◊◊E F"
FixedUpdateProcesses
◊◊F Z
.
◊◊Z [
Length
◊◊[ a
+
◊◊b c
(
◊◊d e#
ProcessArrayChunkSize
◊◊e z
*
◊◊{ |
_expansions◊◊} à
++◊◊à ä
)◊◊ä ã
]◊◊ã å
;◊◊å ç
FixedUpdatePaused
ÿÿ )
=
ÿÿ* +
new
ÿÿ, /
bool
ÿÿ0 4
[
ÿÿ4 5"
FixedUpdateProcesses
ÿÿ5 I
.
ÿÿI J
Length
ÿÿJ P
]
ÿÿP Q
;
ÿÿQ R
FixedUpdateHeld
ŸŸ '
=
ŸŸ( )
new
ŸŸ* -
bool
ŸŸ. 2
[
ŸŸ2 3"
FixedUpdateProcesses
ŸŸ3 G
.
ŸŸG H
Length
ŸŸH N
]
ŸŸN O
;
ŸŸO P
for
€€ 
(
€€ 
int
€€  
i
€€! "
=
€€# $
$num
€€% &
;
€€& '
i
€€( )
<
€€* +
oldProcArray
€€, 8
.
€€8 9
Length
€€9 ?
;
€€? @
i
€€A B
++
€€B D
)
€€D E
{
‹‹ "
FixedUpdateProcesses
›› 0
[
››0 1
i
››1 2
]
››2 3
=
››4 5
oldProcArray
››6 B
[
››B C
i
››C D
]
››D E
;
››E F
FixedUpdatePaused
ﬁﬁ -
[
ﬁﬁ- .
i
ﬁﬁ. /
]
ﬁﬁ/ 0
=
ﬁﬁ1 2
oldPausedArray
ﬁﬁ3 A
[
ﬁﬁA B
i
ﬁﬁB C
]
ﬁﬁC D
;
ﬁﬁD E
FixedUpdateHeld
ﬂﬂ +
[
ﬂﬂ+ ,
i
ﬂﬂ, -
]
ﬂﬂ- .
=
ﬂﬂ/ 0
oldHeldArray
ﬂﬂ1 =
[
ﬂﬂ= >
i
ﬂﬂ> ?
]
ﬂﬂ? @
;
ﬂﬂ@ A
}
‡‡ 
}
·· 
if
„„ 
(
„„ 
UpdateTimeValues
„„ (
(
„„( )
slot
„„) -
.
„„- .
seg
„„. 1
)
„„1 2
)
„„2 3)
_lastFixedUpdateProcessSlot
‰‰ 3
=
‰‰4 5)
_nextFixedUpdateProcessSlot
‰‰6 Q
;
‰‰Q R
slot
ÊÊ 
.
ÊÊ 
i
ÊÊ 
=
ÊÊ )
_nextFixedUpdateProcessSlot
ÊÊ 8
++
ÊÊ8 :
;
ÊÊ: ;"
FixedUpdateProcesses
ÁÁ (
[
ÁÁ( )
slot
ÁÁ) -
.
ÁÁ- .
i
ÁÁ. /
]
ÁÁ/ 0
=
ÁÁ1 2
	coroutine
ÁÁ3 <
;
ÁÁ< =
if
ÈÈ 
(
ÈÈ 
null
ÈÈ 
!=
ÈÈ 
tag
ÈÈ  #
)
ÈÈ# $
AddTag
ÍÍ 
(
ÍÍ 
tag
ÍÍ "
,
ÍÍ" #
handle
ÍÍ$ *
)
ÍÍ* +
;
ÍÍ+ ,
_indexToHandle
ÏÏ "
.
ÏÏ" #
Add
ÏÏ# &
(
ÏÏ& '
slot
ÏÏ' +
,
ÏÏ+ ,
handle
ÏÏ- 3
)
ÏÏ3 4
;
ÏÏ4 5
_handleToIndex
ÌÌ "
.
ÌÌ" #
Add
ÌÌ# &
(
ÌÌ& '
handle
ÌÌ' -
,
ÌÌ- .
slot
ÌÌ/ 3
)
ÌÌ3 4
;
ÌÌ4 5
while
ÔÔ 
(
ÔÔ 
prewarm
ÔÔ "
)
ÔÔ" #
{
 
if
ÒÒ 
(
ÒÒ 
!
ÒÒ "
FixedUpdateProcesses
ÒÒ 1
[
ÒÒ1 2
slot
ÒÒ2 6
.
ÒÒ6 7
i
ÒÒ7 8
]
ÒÒ8 9
.
ÒÒ9 :
MoveNext
ÒÒ: B
(
ÒÒB C
)
ÒÒC D
)
ÒÒD E
{
ÚÚ 
if
ÛÛ 
(
ÛÛ  
_indexToHandle
ÛÛ  .
.
ÛÛ. /
ContainsKey
ÛÛ/ :
(
ÛÛ: ;
slot
ÛÛ; ?
)
ÛÛ? @
)
ÛÛ@ A&
KillCoroutinesOnInstance
ÙÙ  8
(
ÙÙ8 9
_indexToHandle
ÙÙ9 G
[
ÙÙG H
slot
ÙÙH L
]
ÙÙL M
)
ÙÙM N
;
ÙÙN O
prewarm
ˆˆ #
=
ˆˆ$ %
false
ˆˆ& +
;
ˆˆ+ ,
}
˜˜ 
else
¯¯ 
if
¯¯ 
(
¯¯  !"
FixedUpdateProcesses
¯¯! 5
[
¯¯5 6
slot
¯¯6 :
.
¯¯: ;
i
¯¯; <
]
¯¯< =
!=
¯¯> @
null
¯¯A E
&&
¯¯F H
float
¯¯I N
.
¯¯N O
IsNaN
¯¯O T
(
¯¯T U"
FixedUpdateProcesses
¯¯U i
[
¯¯i j
slot
¯¯j n
.
¯¯n o
i
¯¯o p
]
¯¯p q
.
¯¯q r
Current
¯¯r y
)
¯¯y z
)
¯¯z {
{
˘˘ 
if
˙˙ 
(
˙˙  !
ReplacementFunction
˙˙  3
!=
˙˙4 6
null
˙˙7 ;
)
˙˙; <
{
˚˚ "
FixedUpdateProcesses
¸¸  4
[
¸¸4 5
slot
¸¸5 9
.
¸¸9 :
i
¸¸: ;
]
¸¸; <
=
¸¸= >!
ReplacementFunction
¸¸? R
(
¸¸R S"
FixedUpdateProcesses
¸¸S g
[
¸¸g h
slot
¸¸h l
.
¸¸l m
i
¸¸m n
]
¸¸n o
,
¸¸o p
_indexToHandle
¸¸q 
[¸¸ Ä
slot¸¸Ä Ñ
]¸¸Ñ Ö
)¸¸Ö Ü
;¸¸Ü á!
ReplacementFunction
˝˝  3
=
˝˝4 5
null
˝˝6 :
;
˝˝: ;
}
˛˛ 
prewarm
ˇˇ #
=
ˇˇ$ %
!
ˇˇ& '
FixedUpdatePaused
ˇˇ' 8
[
ˇˇ8 9
slot
ˇˇ9 =
.
ˇˇ= >
i
ˇˇ> ?
]
ˇˇ? @
&&
ˇˇA C
!
ˇˇD E
FixedUpdateHeld
ˇˇE T
[
ˇˇT U
slot
ˇˇU Y
.
ˇˇY Z
i
ˇˇZ [
]
ˇˇ[ \
;
ˇˇ\ ]
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
prewarm
ÉÉ #
=
ÉÉ$ %
false
ÉÉ& +
;
ÉÉ+ ,
}
ÑÑ 
}
ÖÖ 
break
áá 
;
áá 
case
ââ 
Segment
ââ 
.
ââ 

LateUpdate
ââ '
:
ââ' (
if
ãã 
(
ãã (
_nextLateUpdateProcessSlot
ãã 2
>=
ãã3 5!
LateUpdateProcesses
ãã6 I
.
ããI J
Length
ããJ P
)
ããP Q
{
åå 
IEnumerator
çç #
<
çç# $
float
çç$ )
>
çç) *
[
çç* +
]
çç+ ,
oldProcArray
çç- 9
=
çç: ;!
LateUpdateProcesses
çç< O
;
ççO P
bool
éé 
[
éé 
]
éé 
oldPausedArray
éé -
=
éé. /
LateUpdatePaused
éé0 @
;
éé@ A
bool
èè 
[
èè 
]
èè 
oldHeldArray
èè +
=
èè, -
LateUpdateHeld
èè. <
;
èè< =!
LateUpdateProcesses
ëë +
=
ëë, -
new
ëë. 1
IEnumerator
ëë2 =
<
ëë= >
float
ëë> C
>
ëëC D
[
ëëD E!
LateUpdateProcesses
ëëE X
.
ëëX Y
Length
ëëY _
+
ëë` a
(
ëëb c#
ProcessArrayChunkSize
ëëc x
*
ëëy z
_expansionsëë{ Ü
++ëëÜ à
)ëëà â
]ëëâ ä
;ëëä ã
LateUpdatePaused
íí (
=
íí) *
new
íí+ .
bool
íí/ 3
[
íí3 4!
LateUpdateProcesses
íí4 G
.
ííG H
Length
ííH N
]
ííN O
;
ííO P
LateUpdateHeld
ìì &
=
ìì' (
new
ìì) ,
bool
ìì- 1
[
ìì1 2!
LateUpdateProcesses
ìì2 E
.
ììE F
Length
ììF L
]
ììL M
;
ììM N
for
ïï 
(
ïï 
int
ïï  
i
ïï! "
=
ïï# $
$num
ïï% &
;
ïï& '
i
ïï( )
<
ïï* +
oldProcArray
ïï, 8
.
ïï8 9
Length
ïï9 ?
;
ïï? @
i
ïïA B
++
ïïB D
)
ïïD E
{
ññ !
LateUpdateProcesses
óó /
[
óó/ 0
i
óó0 1
]
óó1 2
=
óó3 4
oldProcArray
óó5 A
[
óóA B
i
óóB C
]
óóC D
;
óóD E
LateUpdatePaused
òò ,
[
òò, -
i
òò- .
]
òò. /
=
òò0 1
oldPausedArray
òò2 @
[
òò@ A
i
òòA B
]
òòB C
;
òòC D
LateUpdateHeld
ôô *
[
ôô* +
i
ôô+ ,
]
ôô, -
=
ôô. /
oldHeldArray
ôô0 <
[
ôô< =
i
ôô= >
]
ôô> ?
;
ôô? @
}
öö 
}
õõ 
if
ùù 
(
ùù 
UpdateTimeValues
ùù (
(
ùù( )
slot
ùù) -
.
ùù- .
seg
ùù. 1
)
ùù1 2
)
ùù2 3(
_lastLateUpdateProcessSlot
ûû 2
=
ûû3 4(
_nextLateUpdateProcessSlot
ûû5 O
;
ûûO P
slot
†† 
.
†† 
i
†† 
=
†† (
_nextLateUpdateProcessSlot
†† 7
++
††7 9
;
††9 :!
LateUpdateProcesses
°° '
[
°°' (
slot
°°( ,
.
°°, -
i
°°- .
]
°°. /
=
°°0 1
	coroutine
°°2 ;
;
°°; <
if
££ 
(
££ 
tag
££ 
!=
££ 
null
££ #
)
££# $
AddTag
§§ 
(
§§ 
tag
§§ "
,
§§" #
handle
§§$ *
)
§§* +
;
§§+ ,
_indexToHandle
¶¶ "
.
¶¶" #
Add
¶¶# &
(
¶¶& '
slot
¶¶' +
,
¶¶+ ,
handle
¶¶- 3
)
¶¶3 4
;
¶¶4 5
_handleToIndex
ßß "
.
ßß" #
Add
ßß# &
(
ßß& '
handle
ßß' -
,
ßß- .
slot
ßß/ 3
)
ßß3 4
;
ßß4 5
while
©© 
(
©© 
prewarm
©© "
)
©©" #
{
™™ 
if
´´ 
(
´´ 
!
´´ !
LateUpdateProcesses
´´ 0
[
´´0 1
slot
´´1 5
.
´´5 6
i
´´6 7
]
´´7 8
.
´´8 9
MoveNext
´´9 A
(
´´A B
)
´´B C
)
´´C D
{
¨¨ 
if
≠≠ 
(
≠≠  
_indexToHandle
≠≠  .
.
≠≠. /
ContainsKey
≠≠/ :
(
≠≠: ;
slot
≠≠; ?
)
≠≠? @
)
≠≠@ A&
KillCoroutinesOnInstance
ÆÆ  8
(
ÆÆ8 9
_indexToHandle
ÆÆ9 G
[
ÆÆG H
slot
ÆÆH L
]
ÆÆL M
)
ÆÆM N
;
ÆÆN O
prewarm
∞∞ #
=
∞∞$ %
false
∞∞& +
;
∞∞+ ,
}
±± 
else
≤≤ 
if
≤≤ 
(
≤≤  !!
LateUpdateProcesses
≤≤! 4
[
≤≤4 5
slot
≤≤5 9
.
≤≤9 :
i
≤≤: ;
]
≤≤; <
!=
≤≤= ?
null
≤≤@ D
&&
≤≤E G
float
≤≤H M
.
≤≤M N
IsNaN
≤≤N S
(
≤≤S T!
LateUpdateProcesses
≤≤T g
[
≤≤g h
slot
≤≤h l
.
≤≤l m
i
≤≤m n
]
≤≤n o
.
≤≤o p
Current
≤≤p w
)
≤≤w x
)
≤≤x y
{
≥≥ 
if
¥¥ 
(
¥¥  !
ReplacementFunction
¥¥  3
!=
¥¥4 6
null
¥¥7 ;
)
¥¥; <
{
µµ !
LateUpdateProcesses
∂∂  3
[
∂∂3 4
slot
∂∂4 8
.
∂∂8 9
i
∂∂9 :
]
∂∂: ;
=
∂∂< =!
ReplacementFunction
∂∂> Q
(
∂∂Q R!
LateUpdateProcesses
∂∂R e
[
∂∂e f
slot
∂∂f j
.
∂∂j k
i
∂∂k l
]
∂∂l m
,
∂∂m n
_indexToHandle
∂∂o }
[
∂∂} ~
slot∂∂~ Ç
]∂∂Ç É
)∂∂É Ñ
;∂∂Ñ Ö!
ReplacementFunction
∑∑  3
=
∑∑4 5
null
∑∑6 :
;
∑∑: ;
}
∏∏ 
prewarm
ππ #
=
ππ$ %
!
ππ& '
LateUpdatePaused
ππ' 7
[
ππ7 8
slot
ππ8 <
.
ππ< =
i
ππ= >
]
ππ> ?
&&
ππ@ B
!
ππC D
LateUpdateHeld
ππD R
[
ππR S
slot
ππS W
.
ππW X
i
ππX Y
]
ππY Z
;
ππZ [
}
∫∫ 
else
ªª 
{
ºº 
prewarm
ΩΩ #
=
ΩΩ$ %
false
ΩΩ& +
;
ΩΩ+ ,
}
ææ 
}
øø 
break
¡¡ 
;
¡¡ 
case
√√ 
Segment
√√ 
.
√√ 

SlowUpdate
√√ '
:
√√' (
if
≈≈ 
(
≈≈ (
_nextSlowUpdateProcessSlot
≈≈ 2
>=
≈≈3 5!
SlowUpdateProcesses
≈≈6 I
.
≈≈I J
Length
≈≈J P
)
≈≈P Q
{
∆∆ 
IEnumerator
«« #
<
««# $
float
««$ )
>
««) *
[
««* +
]
««+ ,
oldProcArray
««- 9
=
««: ;!
SlowUpdateProcesses
««< O
;
««O P
bool
»» 
[
»» 
]
»» 
oldPausedArray
»» -
=
»». /
SlowUpdatePaused
»»0 @
;
»»@ A
bool
…… 
[
…… 
]
…… 
oldHeldArray
…… +
=
……, -
SlowUpdateHeld
……. <
;
……< =!
SlowUpdateProcesses
ÀÀ +
=
ÀÀ, -
new
ÀÀ. 1
IEnumerator
ÀÀ2 =
<
ÀÀ= >
float
ÀÀ> C
>
ÀÀC D
[
ÀÀD E!
SlowUpdateProcesses
ÀÀE X
.
ÀÀX Y
Length
ÀÀY _
+
ÀÀ` a
(
ÀÀb c#
ProcessArrayChunkSize
ÀÀc x
*
ÀÀy z
_expansionsÀÀ{ Ü
++ÀÀÜ à
)ÀÀà â
]ÀÀâ ä
;ÀÀä ã
SlowUpdatePaused
ÃÃ (
=
ÃÃ) *
new
ÃÃ+ .
bool
ÃÃ/ 3
[
ÃÃ3 4!
SlowUpdateProcesses
ÃÃ4 G
.
ÃÃG H
Length
ÃÃH N
]
ÃÃN O
;
ÃÃO P
SlowUpdateHeld
ÕÕ &
=
ÕÕ' (
new
ÕÕ) ,
bool
ÕÕ- 1
[
ÕÕ1 2!
SlowUpdateProcesses
ÕÕ2 E
.
ÕÕE F
Length
ÕÕF L
]
ÕÕL M
;
ÕÕM N
for
œœ 
(
œœ 
int
œœ  
i
œœ! "
=
œœ# $
$num
œœ% &
;
œœ& '
i
œœ( )
<
œœ* +
oldProcArray
œœ, 8
.
œœ8 9
Length
œœ9 ?
;
œœ? @
i
œœA B
++
œœB D
)
œœD E
{
–– !
SlowUpdateProcesses
—— /
[
——/ 0
i
——0 1
]
——1 2
=
——3 4
oldProcArray
——5 A
[
——A B
i
——B C
]
——C D
;
——D E
SlowUpdatePaused
““ ,
[
““, -
i
““- .
]
““. /
=
““0 1
oldPausedArray
““2 @
[
““@ A
i
““A B
]
““B C
;
““C D
SlowUpdateHeld
”” *
[
””* +
i
””+ ,
]
””, -
=
””. /
oldHeldArray
””0 <
[
””< =
i
””= >
]
””> ?
;
””? @
}
‘‘ 
}
’’ 
if
◊◊ 
(
◊◊ 
UpdateTimeValues
◊◊ (
(
◊◊( )
slot
◊◊) -
.
◊◊- .
seg
◊◊. 1
)
◊◊1 2
)
◊◊2 3(
_lastSlowUpdateProcessSlot
ÿÿ 2
=
ÿÿ3 4(
_nextSlowUpdateProcessSlot
ÿÿ5 O
;
ÿÿO P
slot
⁄⁄ 
.
⁄⁄ 
i
⁄⁄ 
=
⁄⁄ (
_nextSlowUpdateProcessSlot
⁄⁄ 7
++
⁄⁄7 9
;
⁄⁄9 :!
SlowUpdateProcesses
€€ '
[
€€' (
slot
€€( ,
.
€€, -
i
€€- .
]
€€. /
=
€€0 1
	coroutine
€€2 ;
;
€€; <
if
›› 
(
›› 
tag
›› 
!=
›› 
null
›› #
)
››# $
AddTag
ﬁﬁ 
(
ﬁﬁ 
tag
ﬁﬁ "
,
ﬁﬁ" #
handle
ﬁﬁ$ *
)
ﬁﬁ* +
;
ﬁﬁ+ ,
_indexToHandle
‡‡ "
.
‡‡" #
Add
‡‡# &
(
‡‡& '
slot
‡‡' +
,
‡‡+ ,
handle
‡‡- 3
)
‡‡3 4
;
‡‡4 5
_handleToIndex
·· "
.
··" #
Add
··# &
(
··& '
handle
··' -
,
··- .
slot
··/ 3
)
··3 4
;
··4 5
while
„„ 
(
„„ 
prewarm
„„ "
)
„„" #
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
!
ÂÂ !
SlowUpdateProcesses
ÂÂ 0
[
ÂÂ0 1
slot
ÂÂ1 5
.
ÂÂ5 6
i
ÂÂ6 7
]
ÂÂ7 8
.
ÂÂ8 9
MoveNext
ÂÂ9 A
(
ÂÂA B
)
ÂÂB C
)
ÂÂC D
{
ÊÊ 
if
ÁÁ 
(
ÁÁ  
_indexToHandle
ÁÁ  .
.
ÁÁ. /
ContainsKey
ÁÁ/ :
(
ÁÁ: ;
slot
ÁÁ; ?
)
ÁÁ? @
)
ÁÁ@ A&
KillCoroutinesOnInstance
ËË  8
(
ËË8 9
_indexToHandle
ËË9 G
[
ËËG H
slot
ËËH L
]
ËËL M
)
ËËM N
;
ËËN O
prewarm
ÍÍ #
=
ÍÍ$ %
false
ÍÍ& +
;
ÍÍ+ ,
}
ÎÎ 
else
ÏÏ 
if
ÏÏ 
(
ÏÏ  !!
SlowUpdateProcesses
ÏÏ! 4
[
ÏÏ4 5
slot
ÏÏ5 9
.
ÏÏ9 :
i
ÏÏ: ;
]
ÏÏ; <
!=
ÏÏ= ?
null
ÏÏ@ D
&&
ÏÏE G
float
ÏÏH M
.
ÏÏM N
IsNaN
ÏÏN S
(
ÏÏS T!
SlowUpdateProcesses
ÏÏT g
[
ÏÏg h
slot
ÏÏh l
.
ÏÏl m
i
ÏÏm n
]
ÏÏn o
.
ÏÏo p
Current
ÏÏp w
)
ÏÏw x
)
ÏÏx y
{
ÌÌ 
if
ÓÓ 
(
ÓÓ  !
ReplacementFunction
ÓÓ  3
!=
ÓÓ4 6
null
ÓÓ7 ;
)
ÓÓ; <
{
ÔÔ !
SlowUpdateProcesses
  3
[
3 4
slot
4 8
.
8 9
i
9 :
]
: ;
=
< =!
ReplacementFunction
> Q
(
Q R!
SlowUpdateProcesses
R e
[
e f
slot
f j
.
j k
i
k l
]
l m
,
m n
_indexToHandle
o }
[
} ~
slot~ Ç
]Ç É
)É Ñ
;Ñ Ö!
ReplacementFunction
ÒÒ  3
=
ÒÒ4 5
null
ÒÒ6 :
;
ÒÒ: ;
}
ÚÚ 
prewarm
ÛÛ #
=
ÛÛ$ %
!
ÛÛ& '
SlowUpdatePaused
ÛÛ' 7
[
ÛÛ7 8
slot
ÛÛ8 <
.
ÛÛ< =
i
ÛÛ= >
]
ÛÛ> ?
&&
ÛÛ@ B
!
ÛÛC D
SlowUpdateHeld
ÛÛD R
[
ÛÛR S
slot
ÛÛS W
.
ÛÛW X
i
ÛÛX Y
]
ÛÛY Z
;
ÛÛZ [
}
ÙÙ 
else
ıı 
{
ˆˆ 
prewarm
˜˜ #
=
˜˜$ %
false
˜˜& +
;
˜˜+ ,
}
¯¯ 
}
˘˘ 
break
˚˚ 
;
˚˚ 
default
˝˝ 
:
˝˝ 
handle
˛˛ 
=
˛˛ 
new
˛˛  
CoroutineHandle
˛˛! 0
(
˛˛0 1
)
˛˛1 2
;
˛˛2 3
break
ˇˇ 
;
ˇˇ 
}
ÄÄ 
	localTime
ÇÇ 
=
ÇÇ 
currentLocalTime
ÇÇ (
;
ÇÇ( )
	deltaTime
ÉÉ 
=
ÉÉ 
currentDeltaTime
ÉÉ (
;
ÉÉ( )
currentCoroutine
ÑÑ 
=
ÑÑ 
cachedHandle
ÑÑ +
;
ÑÑ+ ,
return
ÜÜ 
handle
ÜÜ 
;
ÜÜ 
}
áá 	
public
êê 
static
êê 
int
êê 
KillCoroutines
êê (
(
êê( )
)
êê) *
{
ëë 	
return
íí 
	_instance
íí 
==
íí 
null
íí  $
?
íí% &
$num
íí' (
:
íí) *
	_instance
íí+ 4
.
íí4 5&
KillCoroutinesOnInstance
íí5 M
(
ííM N
)
ííN O
;
ííO P
}
ìì 	
public
úú 
int
úú &
KillCoroutinesOnInstance
úú +
(
úú+ ,
)
úú, -
{
ùù 	
int
ûû 
retVal
ûû 
=
ûû $
_nextUpdateProcessSlot
ûû /
+
ûû0 1(
_nextLateUpdateProcessSlot
ûû2 L
+
ûûM N)
_nextFixedUpdateProcessSlot
ûûO j
+
ûûk l)
_nextSlowUpdateProcessSlotûûm á
;ûûá à
UpdateProcesses
†† 
=
†† 
new
†† !
IEnumerator
††" -
<
††- .
float
††. 3
>
††3 4
[
††4 5$
InitialBufferSizeLarge
††5 K
]
††K L
;
††L M
UpdatePaused
°° 
=
°° 
new
°° 
bool
°° #
[
°°# $$
InitialBufferSizeLarge
°°$ :
]
°°: ;
;
°°; <

UpdateHeld
¢¢ 
=
¢¢ 
new
¢¢ 
bool
¢¢ !
[
¢¢! "$
InitialBufferSizeLarge
¢¢" 8
]
¢¢8 9
;
¢¢9 :
UpdateCoroutines
££ 
=
££ 
$num
££  
;
££  !$
_nextUpdateProcessSlot
§§ "
=
§§# $
$num
§§% &
;
§§& '!
LateUpdateProcesses
¶¶ 
=
¶¶  !
new
¶¶" %
IEnumerator
¶¶& 1
<
¶¶1 2
float
¶¶2 7
>
¶¶7 8
[
¶¶8 9$
InitialBufferSizeSmall
¶¶9 O
]
¶¶O P
;
¶¶P Q
LateUpdatePaused
ßß 
=
ßß 
new
ßß "
bool
ßß# '
[
ßß' ($
InitialBufferSizeSmall
ßß( >
]
ßß> ?
;
ßß? @
LateUpdateHeld
®® 
=
®® 
new
®®  
bool
®®! %
[
®®% &$
InitialBufferSizeSmall
®®& <
]
®®< =
;
®®= >"
LateUpdateCoroutines
©©  
=
©©! "
$num
©©# $
;
©©$ %(
_nextLateUpdateProcessSlot
™™ &
=
™™' (
$num
™™) *
;
™™* +"
FixedUpdateProcesses
¨¨  
=
¨¨! "
new
¨¨# &
IEnumerator
¨¨' 2
<
¨¨2 3
float
¨¨3 8
>
¨¨8 9
[
¨¨9 :%
InitialBufferSizeMedium
¨¨: Q
]
¨¨Q R
;
¨¨R S
FixedUpdatePaused
≠≠ 
=
≠≠ 
new
≠≠  #
bool
≠≠$ (
[
≠≠( )%
InitialBufferSizeMedium
≠≠) @
]
≠≠@ A
;
≠≠A B
FixedUpdateHeld
ÆÆ 
=
ÆÆ 
new
ÆÆ !
bool
ÆÆ" &
[
ÆÆ& '%
InitialBufferSizeMedium
ÆÆ' >
]
ÆÆ> ?
;
ÆÆ? @#
FixedUpdateCoroutines
ØØ !
=
ØØ" #
$num
ØØ$ %
;
ØØ% &)
_nextFixedUpdateProcessSlot
∞∞ '
=
∞∞( )
$num
∞∞* +
;
∞∞+ ,!
SlowUpdateProcesses
≤≤ 
=
≤≤  !
new
≤≤" %
IEnumerator
≤≤& 1
<
≤≤1 2
float
≤≤2 7
>
≤≤7 8
[
≤≤8 9%
InitialBufferSizeMedium
≤≤9 P
]
≤≤P Q
;
≤≤Q R
SlowUpdatePaused
≥≥ 
=
≥≥ 
new
≥≥ "
bool
≥≥# '
[
≥≥' (%
InitialBufferSizeMedium
≥≥( ?
]
≥≥? @
;
≥≥@ A
SlowUpdateHeld
¥¥ 
=
¥¥ 
new
¥¥  
bool
¥¥! %
[
¥¥% &%
InitialBufferSizeMedium
¥¥& =
]
¥¥= >
;
¥¥> ?"
SlowUpdateCoroutines
µµ  
=
µµ! "
$num
µµ# $
;
µµ$ %(
_nextSlowUpdateProcessSlot
∂∂ &
=
∂∂' (
$num
∂∂) *
;
∂∂* +
_processTags
∏∏ 
.
∏∏ 
Clear
∏∏ 
(
∏∏ 
)
∏∏  
;
∏∏  !
_taggedProcesses
ππ 
.
ππ 
Clear
ππ "
(
ππ" #
)
ππ# $
;
ππ$ %
_handleToIndex
∫∫ 
.
∫∫ 
Clear
∫∫  
(
∫∫  !
)
∫∫! "
;
∫∫" #
_indexToHandle
ªª 
.
ªª 
Clear
ªª  
(
ªª  !
)
ªª! "
;
ªª" #
_waitingTriggers
ºº 
.
ºº 
Clear
ºº "
(
ºº" #
)
ºº# $
;
ºº$ %
_expansions
ΩΩ 
=
ΩΩ 
(
ΩΩ 
ushort
ΩΩ !
)
ΩΩ! "
(
ΩΩ" #
(
ΩΩ# $
_expansions
ΩΩ$ /
/
ΩΩ0 1
$num
ΩΩ2 3
)
ΩΩ3 4
+
ΩΩ5 6
$num
ΩΩ7 8
)
ΩΩ8 9
;
ΩΩ9 :
return
øø 
retVal
øø 
;
øø 
}
¿¿ 	
public
«« 
static
«« 
int
«« 
KillCoroutines
«« (
(
««( )
CoroutineHandle
««) 8
handle
««9 ?
)
««? @
{
»» 	
return
…… 
ActiveInstances
…… "
[
……" #
handle
……# )
.
……) *
Key
……* -
]
……- .
!=
……/ 1
null
……2 6
?
……7 8
GetInstance
……9 D
(
……D E
handle
……E K
.
……K L
Key
……L O
)
……O P
.
……P Q&
KillCoroutinesOnInstance
……Q i
(
……i j
handle
……j p
)
……p q
:
……r s
$num
……t u
;
……u v
}
   	
public
—— 
int
—— &
KillCoroutinesOnInstance
—— +
(
——+ ,
CoroutineHandle
——, ;
handle
——< B
)
——B C
{
““ 	
bool
”” 
foundOne
”” 
=
”” 
false
”” !
;
””! "
if
’’ 
(
’’ 
_handleToIndex
’’ 
.
’’ 
ContainsKey
’’ *
(
’’* +
handle
’’+ 1
)
’’1 2
)
’’2 3
{
÷÷ 
if
◊◊ 
(
◊◊ 
_waitingTriggers
◊◊ $
.
◊◊$ %
ContainsKey
◊◊% 0
(
◊◊0 1
handle
◊◊1 7
)
◊◊7 8
)
◊◊8 9!
CloseWaitingProcess
ÿÿ '
(
ÿÿ' (
handle
ÿÿ( .
)
ÿÿ. /
;
ÿÿ/ 0
foundOne
⁄⁄ 
=
⁄⁄ 
CoindexExtract
⁄⁄ )
(
⁄⁄) *
_handleToIndex
⁄⁄* 8
[
⁄⁄8 9
handle
⁄⁄9 ?
]
⁄⁄? @
)
⁄⁄@ A
!=
⁄⁄B D
null
⁄⁄E I
;
⁄⁄I J
	RemoveTag
€€ 
(
€€ 
handle
€€  
)
€€  !
;
€€! "
}
‹‹ 
return
ﬁﬁ 
foundOne
ﬁﬁ 
?
ﬁﬁ 
$num
ﬁﬁ 
:
ﬁﬁ  !
$num
ﬁﬁ" #
;
ﬁﬁ# $
}
ﬂﬂ 	
public
ÊÊ 
static
ÊÊ 
int
ÊÊ 
KillCoroutines
ÊÊ (
(
ÊÊ( )
string
ÊÊ) /
tag
ÊÊ0 3
)
ÊÊ3 4
{
ÁÁ 	
return
ËË 
	_instance
ËË 
==
ËË 
null
ËË  $
?
ËË% &
$num
ËË' (
:
ËË) *
	_instance
ËË+ 4
.
ËË4 5&
KillCoroutinesOnInstance
ËË5 M
(
ËËM N
tag
ËËN Q
)
ËËQ R
;
ËËR S
}
ÈÈ 	
public
 
int
 &
KillCoroutinesOnInstance
 +
(
+ ,
string
, 2
tag
3 6
)
6 7
{
ÒÒ 	
if
ÚÚ 
(
ÚÚ 
tag
ÚÚ 
==
ÚÚ 
null
ÚÚ 
)
ÚÚ 
return
ÚÚ #
$num
ÚÚ$ %
;
ÚÚ% &
int
ÛÛ 
numberFound
ÛÛ 
=
ÛÛ 
$num
ÛÛ 
;
ÛÛ  
while
ıı 
(
ıı 
_taggedProcesses
ıı #
.
ıı# $
ContainsKey
ıı$ /
(
ıı/ 0
tag
ıı0 3
)
ıı3 4
)
ıı4 5
{
ˆˆ 
var
˜˜ 
	matchEnum
˜˜ 
=
˜˜ 
_taggedProcesses
˜˜  0
[
˜˜0 1
tag
˜˜1 4
]
˜˜4 5
.
˜˜5 6
GetEnumerator
˜˜6 C
(
˜˜C D
)
˜˜D E
;
˜˜E F
	matchEnum
¯¯ 
.
¯¯ 
MoveNext
¯¯ "
(
¯¯" #
)
¯¯# $
;
¯¯$ %
if
˙˙ 
(
˙˙ 
Nullify
˙˙ 
(
˙˙ 
_handleToIndex
˙˙ *
[
˙˙* +
	matchEnum
˙˙+ 4
.
˙˙4 5
Current
˙˙5 <
]
˙˙< =
)
˙˙= >
)
˙˙> ?
{
˚˚ 
if
¸¸ 
(
¸¸ 
_waitingTriggers
¸¸ (
.
¸¸( )
ContainsKey
¸¸) 4
(
¸¸4 5
	matchEnum
¸¸5 >
.
¸¸> ?
Current
¸¸? F
)
¸¸F G
)
¸¸G H!
CloseWaitingProcess
˝˝ +
(
˝˝+ ,
	matchEnum
˝˝, 5
.
˝˝5 6
Current
˝˝6 =
)
˝˝= >
;
˝˝> ?
numberFound
ˇˇ 
++
ˇˇ !
;
ˇˇ! "
}
Ä	Ä	 
	RemoveTag
Ç	Ç	 
(
Ç	Ç	 
	matchEnum
Ç	Ç	 #
.
Ç	Ç	# $
Current
Ç	Ç	$ +
)
Ç	Ç	+ ,
;
Ç	Ç	, -
if
Ñ	Ñ	 
(
Ñ	Ñ	 
_handleToIndex
Ñ	Ñ	 "
.
Ñ	Ñ	" #
ContainsKey
Ñ	Ñ	# .
(
Ñ	Ñ	. /
	matchEnum
Ñ	Ñ	/ 8
.
Ñ	Ñ	8 9
Current
Ñ	Ñ	9 @
)
Ñ	Ñ	@ A
)
Ñ	Ñ	A B
{
Ö	Ö	 
_indexToHandle
Ü	Ü	 "
.
Ü	Ü	" #
Remove
Ü	Ü	# )
(
Ü	Ü	) *
_handleToIndex
Ü	Ü	* 8
[
Ü	Ü	8 9
	matchEnum
Ü	Ü	9 B
.
Ü	Ü	B C
Current
Ü	Ü	C J
]
Ü	Ü	J K
)
Ü	Ü	K L
;
Ü	Ü	L M
_handleToIndex
á	á	 "
.
á	á	" #
Remove
á	á	# )
(
á	á	) *
	matchEnum
á	á	* 3
.
á	á	3 4
Current
á	á	4 ;
)
á	á	; <
;
á	á	< =
}
à	à	 
}
â	â	 
return
ã	ã	 
numberFound
ã	ã	 
;
ã	ã	 
}
å	å	 	
public
í	í	 
static
í	í	 
int
í	í	 
PauseCoroutines
í	í	 )
(
í	í	) *
)
í	í	* +
{
ì	ì	 	
return
î	î	 
	_instance
î	î	 
==
î	î	 
null
î	î	  $
?
î	î	% &
$num
î	î	' (
:
î	î	) *
	_instance
î	î	+ 4
.
î	î	4 5'
PauseCoroutinesOnInstance
î	î	5 N
(
î	î	N O
)
î	î	O P
;
î	î	P Q
}
ï	ï	 	
public
õ	õ	 
int
õ	õ	 '
PauseCoroutinesOnInstance
õ	õ	 ,
(
õ	õ	, -
)
õ	õ	- .
{
ú	ú	 	
int
ù	ù	 
count
ù	ù	 
=
ù	ù	 
$num
ù	ù	 
;
ù	ù	 
int
û	û	 
i
û	û	 
;
û	û	 
for
ü	ü	 
(
ü	ü	 
i
ü	ü	 
=
ü	ü	 
$num
ü	ü	 
;
ü	ü	 
i
ü	ü	 
<
ü	ü	 $
_nextUpdateProcessSlot
ü	ü	 2
;
ü	ü	2 3
i
ü	ü	4 5
++
ü	ü	5 7
)
ü	ü	7 8
{
†	†	 
if
°	°	 
(
°	°	 
!
°	°	 
UpdatePaused
°	°	 !
[
°	°	! "
i
°	°	" #
]
°	°	# $
&&
°	°	% '
UpdateProcesses
°	°	( 7
[
°	°	7 8
i
°	°	8 9
]
°	°	9 :
!=
°	°	; =
null
°	°	> B
)
°	°	B C
{
¢	¢	 
count
£	£	 
++
£	£	 
;
£	£	 
UpdatePaused
§	§	  
[
§	§	  !
i
§	§	! "
]
§	§	" #
=
§	§	$ %
true
§	§	& *
;
§	§	* +
if
¶	¶	 
(
¶	¶	 
UpdateProcesses
¶	¶	 '
[
¶	¶	' (
i
¶	¶	( )
]
¶	¶	) *
.
¶	¶	* +
Current
¶	¶	+ 2
>
¶	¶	3 4
GetSegmentTime
¶	¶	5 C
(
¶	¶	C D
Segment
¶	¶	D K
.
¶	¶	K L
Update
¶	¶	L R
)
¶	¶	R S
)
¶	¶	S T
UpdateProcesses
ß	ß	 '
[
ß	ß	' (
i
ß	ß	( )
]
ß	ß	) *
=
ß	ß	+ ,
_InjectDelay
ß	ß	- 9
(
ß	ß	9 :
UpdateProcesses
ß	ß	: I
[
ß	ß	I J
i
ß	ß	J K
]
ß	ß	K L
,
ß	ß	L M
UpdateProcesses
®	®	 +
[
®	®	+ ,
i
®	®	, -
]
®	®	- .
.
®	®	. /
Current
®	®	/ 6
-
®	®	7 8
GetSegmentTime
®	®	9 G
(
®	®	G H
Segment
®	®	H O
.
®	®	O P
Update
®	®	P V
)
®	®	V W
)
®	®	W X
;
®	®	X Y
}
©	©	 
}
™	™	 
for
¨	¨	 
(
¨	¨	 
i
¨	¨	 
=
¨	¨	 
$num
¨	¨	 
;
¨	¨	 
i
¨	¨	 
<
¨	¨	 (
_nextLateUpdateProcessSlot
¨	¨	 6
;
¨	¨	6 7
i
¨	¨	8 9
++
¨	¨	9 ;
)
¨	¨	; <
{
≠	≠	 
if
Æ	Æ	 
(
Æ	Æ	 
!
Æ	Æ	 
LateUpdatePaused
Æ	Æ	 %
[
Æ	Æ	% &
i
Æ	Æ	& '
]
Æ	Æ	' (
&&
Æ	Æ	) +!
LateUpdateProcesses
Æ	Æ	, ?
[
Æ	Æ	? @
i
Æ	Æ	@ A
]
Æ	Æ	A B
!=
Æ	Æ	C E
null
Æ	Æ	F J
)
Æ	Æ	J K
{
Ø	Ø	 
count
∞	∞	 
++
∞	∞	 
;
∞	∞	 
LateUpdatePaused
±	±	 $
[
±	±	$ %
i
±	±	% &
]
±	±	& '
=
±	±	( )
true
±	±	* .
;
±	±	. /
if
≥	≥	 
(
≥	≥	 !
LateUpdateProcesses
≥	≥	 +
[
≥	≥	+ ,
i
≥	≥	, -
]
≥	≥	- .
.
≥	≥	. /
Current
≥	≥	/ 6
>
≥	≥	7 8
GetSegmentTime
≥	≥	9 G
(
≥	≥	G H
Segment
≥	≥	H O
.
≥	≥	O P

LateUpdate
≥	≥	P Z
)
≥	≥	Z [
)
≥	≥	[ \!
LateUpdateProcesses
¥	¥	 +
[
¥	¥	+ ,
i
¥	¥	, -
]
¥	¥	- .
=
¥	¥	/ 0
_InjectDelay
¥	¥	1 =
(
¥	¥	= >!
LateUpdateProcesses
¥	¥	> Q
[
¥	¥	Q R
i
¥	¥	R S
]
¥	¥	S T
,
¥	¥	T U!
LateUpdateProcesses
µ	µ	 /
[
µ	µ	/ 0
i
µ	µ	0 1
]
µ	µ	1 2
.
µ	µ	2 3
Current
µ	µ	3 :
-
µ	µ	; <
GetSegmentTime
µ	µ	= K
(
µ	µ	K L
Segment
µ	µ	L S
.
µ	µ	S T

LateUpdate
µ	µ	T ^
)
µ	µ	^ _
)
µ	µ	_ `
;
µ	µ	` a
}
∂	∂	 
}
∑	∑	 
for
π	π	 
(
π	π	 
i
π	π	 
=
π	π	 
$num
π	π	 
;
π	π	 
i
π	π	 
<
π	π	 )
_nextFixedUpdateProcessSlot
π	π	 7
;
π	π	7 8
i
π	π	9 :
++
π	π	: <
)
π	π	< =
{
∫	∫	 
if
ª	ª	 
(
ª	ª	 
!
ª	ª	 
FixedUpdatePaused
ª	ª	 &
[
ª	ª	& '
i
ª	ª	' (
]
ª	ª	( )
&&
ª	ª	* ,"
FixedUpdateProcesses
ª	ª	- A
[
ª	ª	A B
i
ª	ª	B C
]
ª	ª	C D
!=
ª	ª	E G
null
ª	ª	H L
)
ª	ª	L M
{
º	º	 
count
Ω	Ω	 
++
Ω	Ω	 
;
Ω	Ω	 
FixedUpdatePaused
æ	æ	 %
[
æ	æ	% &
i
æ	æ	& '
]
æ	æ	' (
=
æ	æ	) *
true
æ	æ	+ /
;
æ	æ	/ 0
if
¿	¿	 
(
¿	¿	 "
FixedUpdateProcesses
¿	¿	 ,
[
¿	¿	, -
i
¿	¿	- .
]
¿	¿	. /
.
¿	¿	/ 0
Current
¿	¿	0 7
>
¿	¿	8 9
GetSegmentTime
¿	¿	: H
(
¿	¿	H I
Segment
¿	¿	I P
.
¿	¿	P Q
FixedUpdate
¿	¿	Q \
)
¿	¿	\ ]
)
¿	¿	] ^"
FixedUpdateProcesses
¡	¡	 ,
[
¡	¡	, -
i
¡	¡	- .
]
¡	¡	. /
=
¡	¡	0 1
_InjectDelay
¡	¡	2 >
(
¡	¡	> ?"
FixedUpdateProcesses
¡	¡	? S
[
¡	¡	S T
i
¡	¡	T U
]
¡	¡	U V
,
¡	¡	V W"
FixedUpdateProcesses
¬	¬	 0
[
¬	¬	0 1
i
¬	¬	1 2
]
¬	¬	2 3
.
¬	¬	3 4
Current
¬	¬	4 ;
-
¬	¬	< =
GetSegmentTime
¬	¬	> L
(
¬	¬	L M
Segment
¬	¬	M T
.
¬	¬	T U
FixedUpdate
¬	¬	U `
)
¬	¬	` a
)
¬	¬	a b
;
¬	¬	b c
}
√	√	 
}
ƒ	ƒ	 
for
∆	∆	 
(
∆	∆	 
i
∆	∆	 
=
∆	∆	 
$num
∆	∆	 
;
∆	∆	 
i
∆	∆	 
<
∆	∆	 (
_nextSlowUpdateProcessSlot
∆	∆	 6
;
∆	∆	6 7
i
∆	∆	8 9
++
∆	∆	9 ;
)
∆	∆	; <
{
«	«	 
if
»	»	 
(
»	»	 
!
»	»	 
SlowUpdatePaused
»	»	 %
[
»	»	% &
i
»	»	& '
]
»	»	' (
&&
»	»	) +!
SlowUpdateProcesses
»	»	, ?
[
»	»	? @
i
»	»	@ A
]
»	»	A B
!=
»	»	C E
null
»	»	F J
)
»	»	J K
{
…	…	 
count
 	 	 
++
 	 	 
;
 	 	 
SlowUpdatePaused
À	À	 $
[
À	À	$ %
i
À	À	% &
]
À	À	& '
=
À	À	( )
true
À	À	* .
;
À	À	. /
if
Õ	Õ	 
(
Õ	Õ	 !
SlowUpdateProcesses
Õ	Õ	 +
[
Õ	Õ	+ ,
i
Õ	Õ	, -
]
Õ	Õ	- .
.
Õ	Õ	. /
Current
Õ	Õ	/ 6
>
Õ	Õ	7 8
GetSegmentTime
Õ	Õ	9 G
(
Õ	Õ	G H
Segment
Õ	Õ	H O
.
Õ	Õ	O P

SlowUpdate
Õ	Õ	P Z
)
Õ	Õ	Z [
)
Õ	Õ	[ \!
SlowUpdateProcesses
Œ	Œ	 +
[
Œ	Œ	+ ,
i
Œ	Œ	, -
]
Œ	Œ	- .
=
Œ	Œ	/ 0
_InjectDelay
Œ	Œ	1 =
(
Œ	Œ	= >!
SlowUpdateProcesses
Œ	Œ	> Q
[
Œ	Œ	Q R
i
Œ	Œ	R S
]
Œ	Œ	S T
,
Œ	Œ	T U!
SlowUpdateProcesses
œ	œ	 /
[
œ	œ	/ 0
i
œ	œ	0 1
]
œ	œ	1 2
.
œ	œ	2 3
Current
œ	œ	3 :
-
œ	œ	; <
GetSegmentTime
œ	œ	= K
(
œ	œ	K L
Segment
œ	œ	L S
.
œ	œ	S T

SlowUpdate
œ	œ	T ^
)
œ	œ	^ _
)
œ	œ	_ `
;
œ	œ	` a
}
–	–	 
}
—	—	 
return
”	”	 
count
”	”	 
;
”	”	 
}
‘	‘	 	
public
€	€	 
static
€	€	 
int
€	€	 
PauseCoroutines
€	€	 )
(
€	€	) *
CoroutineHandle
€	€	* 9
handle
€	€	: @
)
€	€	@ A
{
‹	‹	 	
return
›	›	 
ActiveInstances
›	›	 "
[
›	›	" #
handle
›	›	# )
.
›	›	) *
Key
›	›	* -
]
›	›	- .
!=
›	›	/ 1
null
›	›	2 6
?
›	›	7 8
GetInstance
›	›	9 D
(
›	›	D E
handle
›	›	E K
.
›	›	K L
Key
›	›	L O
)
›	›	O P
.
›	›	P Q'
PauseCoroutinesOnInstance
›	›	Q j
(
›	›	j k
handle
›	›	k q
)
›	›	q r
:
›	›	s t
$num
›	›	u v
;
›	›	v w
}
ﬁ	ﬁ	 	
public
Â	Â	 
int
Â	Â	 '
PauseCoroutinesOnInstance
Â	Â	 ,
(
Â	Â	, -
CoroutineHandle
Â	Â	- <
handle
Â	Â	= C
)
Â	Â	C D
{
Ê	Ê	 	
return
Á	Á	 
_handleToIndex
Á	Á	 !
.
Á	Á	! "
ContainsKey
Á	Á	" -
(
Á	Á	- .
handle
Á	Á	. 4
)
Á	Á	4 5
&&
Á	Á	6 8
!
Á	Á	9 :
CoindexIsNull
Á	Á	: G
(
Á	Á	G H
_handleToIndex
Á	Á	H V
[
Á	Á	V W
handle
Á	Á	W ]
]
Á	Á	] ^
)
Á	Á	^ _
&&
Á	Á	` b
!
Á	Á	c d
SetPause
Á	Á	d l
(
Á	Á	l m
_handleToIndex
Á	Á	m {
[
Á	Á	{ |
handleÁ	Á	| Ç
]Á	Á	Ç É
,Á	Á	É Ñ
trueÁ	Á	Ö â
)Á	Á	â ä
?Á	Á	ã å
$numÁ	Á	ç é
:Á	Á	è ê
$numÁ	Á	ë í
;Á	Á	í ì
}
Ë	Ë	 	
public
Ô	Ô	 
static
Ô	Ô	 
int
Ô	Ô	 
PauseCoroutines
Ô	Ô	 )
(
Ô	Ô	) *
string
Ô	Ô	* 0
tag
Ô	Ô	1 4
)
Ô	Ô	4 5
{
		 	
return
Ò	Ò	 
	_instance
Ò	Ò	 
==
Ò	Ò	 
null
Ò	Ò	  $
?
Ò	Ò	% &
$num
Ò	Ò	' (
:
Ò	Ò	) *
	_instance
Ò	Ò	+ 4
.
Ò	Ò	4 5'
PauseCoroutinesOnInstance
Ò	Ò	5 N
(
Ò	Ò	N O
tag
Ò	Ò	O R
)
Ò	Ò	R S
;
Ò	Ò	S T
}
Ú	Ú	 	
public
˘	˘	 
int
˘	˘	 '
PauseCoroutinesOnInstance
˘	˘	 ,
(
˘	˘	, -
string
˘	˘	- 3
tag
˘	˘	4 7
)
˘	˘	7 8
{
˙	˙	 	
if
˚	˚	 
(
˚	˚	 
tag
˚	˚	 
==
˚	˚	 
null
˚	˚	 
||
˚	˚	 
!
˚	˚	  
_taggedProcesses
˚	˚	  0
.
˚	˚	0 1
ContainsKey
˚	˚	1 <
(
˚	˚	< =
tag
˚	˚	= @
)
˚	˚	@ A
)
˚	˚	A B
return
¸	¸	 
$num
¸	¸	 
;
¸	¸	 
int
˛	˛	 
count
˛	˛	 
=
˛	˛	 
$num
˛	˛	 
;
˛	˛	 
var
ˇ	ˇ	 
matchesEnum
ˇ	ˇ	 
=
ˇ	ˇ	 
_taggedProcesses
ˇ	ˇ	 .
[
ˇ	ˇ	. /
tag
ˇ	ˇ	/ 2
]
ˇ	ˇ	2 3
.
ˇ	ˇ	3 4
GetEnumerator
ˇ	ˇ	4 A
(
ˇ	ˇ	A B
)
ˇ	ˇ	B C
;
ˇ	ˇ	C D
while
Å
Å
 
(
Å
Å
 
matchesEnum
Å
Å
 
.
Å
Å
 
MoveNext
Å
Å
 '
(
Å
Å
' (
)
Å
Å
( )
)
Å
Å
) *
if
Ç
Ç
 
(
Ç
Ç
 
!
Ç
Ç
 
CoindexIsNull
Ç
Ç
 "
(
Ç
Ç
" #
_handleToIndex
Ç
Ç
# 1
[
Ç
Ç
1 2
matchesEnum
Ç
Ç
2 =
.
Ç
Ç
= >
Current
Ç
Ç
> E
]
Ç
Ç
E F
)
Ç
Ç
F G
&&
Ç
Ç
H J
!
Ç
Ç
K L
SetPause
Ç
Ç
L T
(
Ç
Ç
T U
_handleToIndex
Ç
Ç
U c
[
Ç
Ç
c d
matchesEnum
Ç
Ç
d o
.
Ç
Ç
o p
Current
Ç
Ç
p w
]
Ç
Ç
w x
,
Ç
Ç
x y
true
Ç
Ç
z ~
)
Ç
Ç
~ 
)Ç
Ç
 Ä
count
É
É
 
++
É
É
 
;
É
É
 
return
Ö
Ö
 
count
Ö
Ö
 
;
Ö
Ö
 
}
Ü
Ü
 	
public
ç
ç
 
static
ç
ç
 
int
ç
ç
 
ResumeCoroutines
ç
ç
 *
(
ç
ç
* +
)
ç
ç
+ ,
{
é
é
 	
return
è
è
 
	_instance
è
è
 
==
è
è
 
null
è
è
  $
?
è
è
% &
$num
è
è
' (
:
è
è
) *
	_instance
è
è
+ 4
.
è
è
4 5(
ResumeCoroutinesOnInstance
è
è
5 O
(
è
è
O P
)
è
è
P Q
;
è
è
Q R
}
ê
ê
 	
public
ñ
ñ
 
int
ñ
ñ
 (
ResumeCoroutinesOnInstance
ñ
ñ
 -
(
ñ
ñ
- .
)
ñ
ñ
. /
{
ó
ó
 	
int
ò
ò
 
count
ò
ò
 
=
ò
ò
 
$num
ò
ò
 
;
ò
ò
 
ProcessIndex
ô
ô
 
coindex
ô
ô
  
;
ô
ô
  !
for
ö
ö
 
(
ö
ö
 
coindex
ö
ö
 
.
ö
ö
 
i
ö
ö
 
=
ö
ö
 
$num
ö
ö
 
,
ö
ö
 
coindex
ö
ö
  '
.
ö
ö
' (
seg
ö
ö
( +
=
ö
ö
, -
Segment
ö
ö
. 5
.
ö
ö
5 6
Update
ö
ö
6 <
;
ö
ö
< =
coindex
ö
ö
> E
.
ö
ö
E F
i
ö
ö
F G
<
ö
ö
H I$
_nextUpdateProcessSlot
ö
ö
J `
;
ö
ö
` a
coindex
ö
ö
b i
.
ö
ö
i j
i
ö
ö
j k
++
ö
ö
k m
)
ö
ö
m n
{
õ
õ
 
if
ú
ú
 
(
ú
ú
 
UpdatePaused
ú
ú
  
[
ú
ú
  !
coindex
ú
ú
! (
.
ú
ú
( )
i
ú
ú
) *
]
ú
ú
* +
&&
ú
ú
, .
UpdateProcesses
ú
ú
/ >
[
ú
ú
> ?
coindex
ú
ú
? F
.
ú
ú
F G
i
ú
ú
G H
]
ú
ú
H I
!=
ú
ú
J L
null
ú
ú
M Q
)
ú
ú
Q R
{
ù
ù
 
UpdatePaused
û
û
  
[
û
û
  !
coindex
û
û
! (
.
û
û
( )
i
û
û
) *
]
û
û
* +
=
û
û
, -
false
û
û
. 3
;
û
û
3 4
count
ü
ü
 
++
ü
ü
 
;
ü
ü
 
}
†
†
 
}
°
°
 
for
£
£
 
(
£
£
 
coindex
£
£
 
.
£
£
 
i
£
£
 
=
£
£
 
$num
£
£
 
,
£
£
 
coindex
£
£
  '
.
£
£
' (
seg
£
£
( +
=
£
£
, -
Segment
£
£
. 5
.
£
£
5 6

LateUpdate
£
£
6 @
;
£
£
@ A
coindex
£
£
B I
.
£
£
I J
i
£
£
J K
<
£
£
L M(
_nextLateUpdateProcessSlot
£
£
N h
;
£
£
h i
coindex
£
£
j q
.
£
£
q r
i
£
£
r s
++
£
£
s u
)
£
£
u v
{
§
§
 
if
•
•
 
(
•
•
 
LateUpdatePaused
•
•
 $
[
•
•
$ %
coindex
•
•
% ,
.
•
•
, -
i
•
•
- .
]
•
•
. /
&&
•
•
0 2!
LateUpdateProcesses
•
•
3 F
[
•
•
F G
coindex
•
•
G N
.
•
•
N O
i
•
•
O P
]
•
•
P Q
!=
•
•
R T
null
•
•
U Y
)
•
•
Y Z
{
¶
¶
 
LateUpdatePaused
ß
ß
 $
[
ß
ß
$ %
coindex
ß
ß
% ,
.
ß
ß
, -
i
ß
ß
- .
]
ß
ß
. /
=
ß
ß
0 1
false
ß
ß
2 7
;
ß
ß
7 8
count
®
®
 
++
®
®
 
;
®
®
 
}
©
©
 
}
™
™
 
for
¨
¨
 
(
¨
¨
 
coindex
¨
¨
 
.
¨
¨
 
i
¨
¨
 
=
¨
¨
 
$num
¨
¨
 
,
¨
¨
 
coindex
¨
¨
  '
.
¨
¨
' (
seg
¨
¨
( +
=
¨
¨
, -
Segment
¨
¨
. 5
.
¨
¨
5 6
FixedUpdate
¨
¨
6 A
;
¨
¨
A B
coindex
¨
¨
C J
.
¨
¨
J K
i
¨
¨
K L
<
¨
¨
M N)
_nextFixedUpdateProcessSlot
¨
¨
O j
;
¨
¨
j k
coindex
¨
¨
l s
.
¨
¨
s t
i
¨
¨
t u
++
¨
¨
u w
)
¨
¨
w x
{
≠
≠
 
if
Æ
Æ
 
(
Æ
Æ
 
FixedUpdatePaused
Æ
Æ
 %
[
Æ
Æ
% &
coindex
Æ
Æ
& -
.
Æ
Æ
- .
i
Æ
Æ
. /
]
Æ
Æ
/ 0
&&
Æ
Æ
1 3"
FixedUpdateProcesses
Æ
Æ
4 H
[
Æ
Æ
H I
coindex
Æ
Æ
I P
.
Æ
Æ
P Q
i
Æ
Æ
Q R
]
Æ
Æ
R S
!=
Æ
Æ
T V
null
Æ
Æ
W [
)
Æ
Æ
[ \
{
Ø
Ø
 
FixedUpdatePaused
∞
∞
 %
[
∞
∞
% &
coindex
∞
∞
& -
.
∞
∞
- .
i
∞
∞
. /
]
∞
∞
/ 0
=
∞
∞
1 2
false
∞
∞
3 8
;
∞
∞
8 9
count
±
±
 
++
±
±
 
;
±
±
 
}
≤
≤
 
}
≥
≥
 
for
µ
µ
 
(
µ
µ
 
coindex
µ
µ
 
.
µ
µ
 
i
µ
µ
 
=
µ
µ
 
$num
µ
µ
 
,
µ
µ
 
coindex
µ
µ
  '
.
µ
µ
' (
seg
µ
µ
( +
=
µ
µ
, -
Segment
µ
µ
. 5
.
µ
µ
5 6

SlowUpdate
µ
µ
6 @
;
µ
µ
@ A
coindex
µ
µ
B I
.
µ
µ
I J
i
µ
µ
J K
<
µ
µ
L M(
_nextSlowUpdateProcessSlot
µ
µ
N h
;
µ
µ
h i
coindex
µ
µ
j q
.
µ
µ
q r
i
µ
µ
r s
++
µ
µ
s u
)
µ
µ
u v
{
∂
∂
 
if
∑
∑
 
(
∑
∑
 
SlowUpdatePaused
∑
∑
 $
[
∑
∑
$ %
coindex
∑
∑
% ,
.
∑
∑
, -
i
∑
∑
- .
]
∑
∑
. /
&&
∑
∑
0 2!
SlowUpdateProcesses
∑
∑
3 F
[
∑
∑
F G
coindex
∑
∑
G N
.
∑
∑
N O
i
∑
∑
O P
]
∑
∑
P Q
!=
∑
∑
R T
null
∑
∑
U Y
)
∑
∑
Y Z
{
∏
∏
 
SlowUpdatePaused
π
π
 $
[
π
π
$ %
coindex
π
π
% ,
.
π
π
, -
i
π
π
- .
]
π
π
. /
=
π
π
0 1
false
π
π
2 7
;
π
π
7 8
count
∫
∫
 
++
∫
∫
 
;
∫
∫
 
}
ª
ª
 
}
º
º
 
return
æ
æ
 
count
æ
æ
 
;
æ
æ
 
}
ø
ø
 	
public
∆
∆
 
static
∆
∆
 
int
∆
∆
 
ResumeCoroutines
∆
∆
 *
(
∆
∆
* +
CoroutineHandle
∆
∆
+ :
handle
∆
∆
; A
)
∆
∆
A B
{
«
«
 	
return
»
»
 
ActiveInstances
»
»
 "
[
»
»
" #
handle
»
»
# )
.
»
»
) *
Key
»
»
* -
]
»
»
- .
!=
»
»
/ 1
null
»
»
2 6
?
»
»
7 8
GetInstance
»
»
9 D
(
»
»
D E
handle
»
»
E K
.
»
»
K L
Key
»
»
L O
)
»
»
O P
.
»
»
P Q(
ResumeCoroutinesOnInstance
»
»
Q k
(
»
»
k l
handle
»
»
l r
)
»
»
r s
:
»
»
t u
$num
»
»
v w
;
»
»
w x
}
…
…
 	
public
–
–
 
int
–
–
 (
ResumeCoroutinesOnInstance
–
–
 -
(
–
–
- .
CoroutineHandle
–
–
. =
handle
–
–
> D
)
–
–
D E
{
—
—
 	
return
“
“
 
_handleToIndex
“
“
 !
.
“
“
! "
ContainsKey
“
“
" -
(
“
“
- .
handle
“
“
. 4
)
“
“
4 5
&&
“
“
6 8
!
”
”
 
CoindexIsNull
”
”
 
(
”
”
 
_handleToIndex
”
”
 -
[
”
”
- .
handle
”
”
. 4
]
”
”
4 5
)
”
”
5 6
&&
”
”
7 9
SetPause
”
”
: B
(
”
”
B C
_handleToIndex
”
”
C Q
[
”
”
Q R
handle
”
”
R X
]
”
”
X Y
,
”
”
Y Z
false
”
”
[ `
)
”
”
` a
?
”
”
b c
$num
”
”
d e
:
”
”
f g
$num
”
”
h i
;
”
”
i j
}
‘
‘
 	
public
‹
‹
 
static
‹
‹
 
int
‹
‹
 
ResumeCoroutines
‹
‹
 *
(
‹
‹
* +
string
‹
‹
+ 1
tag
‹
‹
2 5
)
‹
‹
5 6
{
›
›
 	
return
ﬁ
ﬁ
 
	_instance
ﬁ
ﬁ
 
==
ﬁ
ﬁ
 
null
ﬁ
ﬁ
  $
?
ﬁ
ﬁ
% &
$num
ﬁ
ﬁ
' (
:
ﬁ
ﬁ
) *
	_instance
ﬁ
ﬁ
+ 4
.
ﬁ
ﬁ
4 5(
ResumeCoroutinesOnInstance
ﬁ
ﬁ
5 O
(
ﬁ
ﬁ
O P
tag
ﬁ
ﬁ
P S
)
ﬁ
ﬁ
S T
;
ﬁ
ﬁ
T U
}
ﬂ
ﬂ
 	
public
Ê
Ê
 
int
Ê
Ê
 (
ResumeCoroutinesOnInstance
Ê
Ê
 -
(
Ê
Ê
- .
string
Ê
Ê
. 4
tag
Ê
Ê
5 8
)
Ê
Ê
8 9
{
Á
Á
 	
if
Ë
Ë
 
(
Ë
Ë
 
tag
Ë
Ë
 
==
Ë
Ë
 
null
Ë
Ë
 
||
Ë
Ë
 
!
Ë
Ë
  
_taggedProcesses
Ë
Ë
  0
.
Ë
Ë
0 1
ContainsKey
Ë
Ë
1 <
(
Ë
Ë
< =
tag
Ë
Ë
= @
)
Ë
Ë
@ A
)
Ë
Ë
A B
return
È
È
 
$num
È
È
 
;
È
È
 
int
Í
Í
 
count
Í
Í
 
=
Í
Í
 
$num
Í
Í
 
;
Í
Í
 
var
Ï
Ï
 
indexesEnum
Ï
Ï
 
=
Ï
Ï
 
_taggedProcesses
Ï
Ï
 .
[
Ï
Ï
. /
tag
Ï
Ï
/ 2
]
Ï
Ï
2 3
.
Ï
Ï
3 4
GetEnumerator
Ï
Ï
4 A
(
Ï
Ï
A B
)
Ï
Ï
B C
;
Ï
Ï
C D
while
Ì
Ì
 
(
Ì
Ì
 
indexesEnum
Ì
Ì
 
.
Ì
Ì
 
MoveNext
Ì
Ì
 '
(
Ì
Ì
' (
)
Ì
Ì
( )
)
Ì
Ì
) *
{
Ó
Ó
 
if
Ô
Ô
 
(
Ô
Ô
 
!
Ô
Ô
 
CoindexIsNull
Ô
Ô
 "
(
Ô
Ô
" #
_handleToIndex
Ô
Ô
# 1
[
Ô
Ô
1 2
indexesEnum
Ô
Ô
2 =
.
Ô
Ô
= >
Current
Ô
Ô
> E
]
Ô
Ô
E F
)
Ô
Ô
F G
&&
Ô
Ô
H J
SetPause
Ô
Ô
K S
(
Ô
Ô
S T
_handleToIndex
Ô
Ô
T b
[
Ô
Ô
b c
indexesEnum
Ô
Ô
c n
.
Ô
Ô
n o
Current
Ô
Ô
o v
]
Ô
Ô
v w
,
Ô
Ô
w x
false
Ô
Ô
y ~
)
Ô
Ô
~ 
)Ô
Ô
 Ä
{


 
count
Ò
Ò
 
++
Ò
Ò
 
;
Ò
Ò
 
}
Ú
Ú
 
}
Û
Û
 
return
ı
ı
 
count
ı
ı
 
;
ı
ı
 
}
ˆ
ˆ
 	
private
¯
¯
 
bool
¯
¯
 
UpdateTimeValues
¯
¯
 %
(
¯
¯
% &
Segment
¯
¯
& -
segment
¯
¯
. 5
)
¯
¯
5 6
{
˘
˘
 	
switch
˙
˙
 
(
˙
˙
 
segment
˙
˙
 
)
˙
˙
 
{
˚
˚
 
case
¸
¸
 
Segment
¸
¸
 
.
¸
¸
 
Update
¸
¸
 #
:
¸
¸
# $
if
˝
˝
 
(
˝
˝
 !
_currentUpdateFrame
˝
˝
 +
!=
˝
˝
, .
Time
˝
˝
/ 3
.
˝
˝
3 4

frameCount
˝
˝
4 >
)
˝
˝
> ?
{
˛
˛
 
	deltaTime
ˇ
ˇ
 !
=
ˇ
ˇ
" #
Time
ˇ
ˇ
$ (
.
ˇ
ˇ
( )
	deltaTime
ˇ
ˇ
) 2
;
ˇ
ˇ
2 3
_lastUpdateTime
ÄÄ '
+=
ÄÄ( *
	deltaTime
ÄÄ+ 4
;
ÄÄ4 5
	localTime
ÅÅ !
=
ÅÅ" #
_lastUpdateTime
ÅÅ$ 3
;
ÅÅ3 4!
_currentUpdateFrame
ÇÇ +
=
ÇÇ, -
Time
ÇÇ. 2
.
ÇÇ2 3

frameCount
ÇÇ3 =
;
ÇÇ= >
return
ÉÉ 
true
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
	deltaTime
áá !
=
áá" #
Time
áá$ (
.
áá( )
	deltaTime
áá) 2
;
áá2 3
	localTime
àà !
=
àà" #
_lastUpdateTime
àà$ 3
;
àà3 4
return
ââ 
false
ââ $
;
ââ$ %
}
ää 
case
ãã 
Segment
ãã 
.
ãã 

LateUpdate
ãã '
:
ãã' (
if
åå 
(
åå %
_currentLateUpdateFrame
åå /
!=
åå0 2
Time
åå3 7
.
åå7 8

frameCount
åå8 B
)
ååB C
{
çç 
	deltaTime
éé !
=
éé" #
Time
éé$ (
.
éé( )
	deltaTime
éé) 2
;
éé2 3!
_lastLateUpdateTime
èè +
+=
èè, .
	deltaTime
èè/ 8
;
èè8 9
	localTime
êê !
=
êê" #!
_lastLateUpdateTime
êê$ 7
;
êê7 8%
_currentLateUpdateFrame
ëë /
=
ëë0 1
Time
ëë2 6
.
ëë6 7

frameCount
ëë7 A
;
ëëA B
return
íí 
true
íí #
;
íí# $
}
ìì 
else
îî 
{
ïï 
	deltaTime
ññ !
=
ññ" #
Time
ññ$ (
.
ññ( )
	deltaTime
ññ) 2
;
ññ2 3
	localTime
óó !
=
óó" #!
_lastLateUpdateTime
óó$ 7
;
óó7 8
return
òò 
false
òò $
;
òò$ %
}
ôô 
case
öö 
Segment
öö 
.
öö 
FixedUpdate
öö (
:
öö( )
	deltaTime
õõ 
=
õõ 
Time
õõ  $
.
õõ$ %
fixedDeltaTime
õõ% 3
;
õõ3 4
	localTime
úú 
=
úú 
Time
úú  $
.
úú$ %
	fixedTime
úú% .
;
úú. /
if
ûû 
(
ûû "
_lastFixedUpdateTime
ûû ,
+
ûû- .
$num
ûû/ 6
<
ûû7 8
Time
ûû9 =
.
ûû= >
	fixedTime
ûû> G
)
ûûG H
{
üü "
_lastFixedUpdateTime
†† ,
=
††- .
Time
††/ 3
.
††3 4
	fixedTime
††4 =
;
††= >
return
°° 
true
°° #
;
°°# $
}
¢¢ 
return
§§ 
false
§§  
;
§§  !
case
•• 
Segment
•• 
.
•• 

SlowUpdate
•• '
:
••' (
if
¶¶ 
(
¶¶ %
_currentSlowUpdateFrame
¶¶ /
!=
¶¶0 2
Time
¶¶3 7
.
¶¶7 8

frameCount
¶¶8 B
)
¶¶B C
{
ßß 
	deltaTime
®® !
=
®®" #&
_lastSlowUpdateDeltaTime
®®$ <
=
®®= >
Time
®®? C
.
®®C D"
realtimeSinceStartup
®®D X
-
®®Y Z!
_lastSlowUpdateTime
®®[ n
;
®®n o
	localTime
©© !
=
©©" #!
_lastSlowUpdateTime
©©$ 7
=
©©8 9
Time
©©: >
.
©©> ?"
realtimeSinceStartup
©©? S
;
©©S T%
_currentSlowUpdateFrame
™™ /
=
™™0 1
Time
™™2 6
.
™™6 7

frameCount
™™7 A
;
™™A B
return
´´ 
true
´´ #
;
´´# $
}
¨¨ 
else
≠≠ 
{
ÆÆ 
	deltaTime
ØØ !
=
ØØ" #&
_lastSlowUpdateDeltaTime
ØØ$ <
;
ØØ< =
	localTime
∞∞ !
=
∞∞" #!
_lastSlowUpdateTime
∞∞$ 7
;
∞∞7 8
return
±± 
false
±± $
;
±±$ %
}
≤≤ 
}
≥≥ 
return
¥¥ 
true
¥¥ 
;
¥¥ 
}
µµ 	
private
∑∑ 
float
∑∑ 
GetSegmentTime
∑∑ $
(
∑∑$ %
Segment
∑∑% ,
segment
∑∑- 4
)
∑∑4 5
{
∏∏ 	
switch
ππ 
(
ππ 
segment
ππ 
)
ππ 
{
∫∫ 
case
ªª 
Segment
ªª 
.
ªª 
Update
ªª #
:
ªª# $
if
ºº 
(
ºº !
_currentUpdateFrame
ºº +
==
ºº, .
Time
ºº/ 3
.
ºº3 4

frameCount
ºº4 >
)
ºº> ?
return
ΩΩ 
_lastUpdateTime
ΩΩ .
;
ΩΩ. /
else
ææ 
return
øø 
_lastUpdateTime
øø .
+
øø/ 0
Time
øø1 5
.
øø5 6
	deltaTime
øø6 ?
;
øø? @
case
¿¿ 
Segment
¿¿ 
.
¿¿ 

LateUpdate
¿¿ '
:
¿¿' (
if
¡¡ 
(
¡¡ !
_currentUpdateFrame
¡¡ +
==
¡¡, .
Time
¡¡/ 3
.
¡¡3 4

frameCount
¡¡4 >
)
¡¡> ?
return
¬¬ !
_lastLateUpdateTime
¬¬ 2
;
¬¬2 3
else
√√ 
return
ƒƒ !
_lastLateUpdateTime
ƒƒ 2
+
ƒƒ3 4
Time
ƒƒ5 9
.
ƒƒ9 :
	deltaTime
ƒƒ: C
;
ƒƒC D
case
≈≈ 
Segment
≈≈ 
.
≈≈ 
FixedUpdate
≈≈ (
:
≈≈( )
return
∆∆ 
Time
∆∆ 
.
∆∆  
	fixedTime
∆∆  )
;
∆∆) *
case
«« 
Segment
«« 
.
«« 

SlowUpdate
«« '
:
««' (
return
»» 
Time
»» 
.
»»  "
realtimeSinceStartup
»»  4
;
»»4 5
default
…… 
:
…… 
return
   
$num
   
;
   
}
ÀÀ 
}
ÃÃ 	
public
”” 
static
”” 
Timing
”” 
GetInstance
”” (
(
””( )
byte
””) -
ID
””. 0
)
””0 1
{
‘‘ 	
if
’’ 
(
’’ 
ID
’’ 
>=
’’ 
$num
’’ 
)
’’ 
return
÷÷ 
null
÷÷ 
;
÷÷ 
return
◊◊ 
ActiveInstances
◊◊ "
[
◊◊" #
ID
◊◊# %
]
◊◊% &
;
◊◊& '
}
ÿÿ 	
private
⁄⁄ 
void
⁄⁄ 
AddTag
⁄⁄ 
(
⁄⁄ 
string
⁄⁄ "
tag
⁄⁄# &
,
⁄⁄& '
CoroutineHandle
⁄⁄( 7
coindex
⁄⁄8 ?
)
⁄⁄? @
{
€€ 	
_processTags
‹‹ 
.
‹‹ 
Add
‹‹ 
(
‹‹ 
coindex
‹‹ $
,
‹‹$ %
tag
‹‹& )
)
‹‹) *
;
‹‹* +
if
ﬁﬁ 
(
ﬁﬁ 
_taggedProcesses
ﬁﬁ  
.
ﬁﬁ  !
ContainsKey
ﬁﬁ! ,
(
ﬁﬁ, -
tag
ﬁﬁ- 0
)
ﬁﬁ0 1
)
ﬁﬁ1 2
_taggedProcesses
ﬂﬂ  
[
ﬂﬂ  !
tag
ﬂﬂ! $
]
ﬂﬂ$ %
.
ﬂﬂ% &
Add
ﬂﬂ& )
(
ﬂﬂ) *
coindex
ﬂﬂ* 1
)
ﬂﬂ1 2
;
ﬂﬂ2 3
else
‡‡ 
_taggedProcesses
··  
.
··  !
Add
··! $
(
··$ %
tag
··% (
,
··( )
new
··* -
HashSet
··. 5
<
··5 6
CoroutineHandle
··6 E
>
··E F
{
··G H
coindex
··I P
}
··Q R
)
··R S
;
··S T
}
‚‚ 	
private
‰‰ 
void
‰‰ 
	RemoveTag
‰‰ 
(
‰‰ 
CoroutineHandle
‰‰ .
coindex
‰‰/ 6
)
‰‰6 7
{
ÂÂ 	
if
ÊÊ 
(
ÊÊ 
_processTags
ÊÊ 
.
ÊÊ 
ContainsKey
ÊÊ (
(
ÊÊ( )
coindex
ÊÊ) 0
)
ÊÊ0 1
)
ÊÊ1 2
{
ÁÁ 
if
ËË 
(
ËË 
_taggedProcesses
ËË $
[
ËË$ %
_processTags
ËË% 1
[
ËË1 2
coindex
ËË2 9
]
ËË9 :
]
ËË: ;
.
ËË; <
Count
ËË< A
>
ËËB C
$num
ËËD E
)
ËËE F
_taggedProcesses
ÈÈ $
[
ÈÈ$ %
_processTags
ÈÈ% 1
[
ÈÈ1 2
coindex
ÈÈ2 9
]
ÈÈ9 :
]
ÈÈ: ;
.
ÈÈ; <
Remove
ÈÈ< B
(
ÈÈB C
coindex
ÈÈC J
)
ÈÈJ K
;
ÈÈK L
else
ÍÍ 
_taggedProcesses
ÎÎ $
.
ÎÎ$ %
Remove
ÎÎ% +
(
ÎÎ+ ,
_processTags
ÎÎ, 8
[
ÎÎ8 9
coindex
ÎÎ9 @
]
ÎÎ@ A
)
ÎÎA B
;
ÎÎB C
_processTags
ÌÌ 
.
ÌÌ 
Remove
ÌÌ #
(
ÌÌ# $
coindex
ÌÌ$ +
)
ÌÌ+ ,
;
ÌÌ, -
}
ÓÓ 
}
ÔÔ 	
private
ÚÚ 
bool
ÚÚ 
Nullify
ÚÚ 
(
ÚÚ 
ProcessIndex
ÚÚ )
coindex
ÚÚ* 1
)
ÚÚ1 2
{
ÛÛ 	
bool
ÙÙ 
retVal
ÙÙ 
;
ÙÙ 
switch
ˆˆ 
(
ˆˆ 
coindex
ˆˆ 
.
ˆˆ 
seg
ˆˆ 
)
ˆˆ  
{
˜˜ 
case
¯¯ 
Segment
¯¯ 
.
¯¯ 
Update
¯¯ #
:
¯¯# $
retVal
˘˘ 
=
˘˘ 
UpdateProcesses
˘˘ ,
[
˘˘, -
coindex
˘˘- 4
.
˘˘4 5
i
˘˘5 6
]
˘˘6 7
!=
˘˘8 :
null
˘˘; ?
;
˘˘? @
UpdateProcesses
˙˙ #
[
˙˙# $
coindex
˙˙$ +
.
˙˙+ ,
i
˙˙, -
]
˙˙- .
=
˙˙/ 0
null
˙˙1 5
;
˙˙5 6
return
˚˚ 
retVal
˚˚ !
;
˚˚! "
case
¸¸ 
Segment
¸¸ 
.
¸¸ 
FixedUpdate
¸¸ (
:
¸¸( )
retVal
˝˝ 
=
˝˝ "
FixedUpdateProcesses
˝˝ 1
[
˝˝1 2
coindex
˝˝2 9
.
˝˝9 :
i
˝˝: ;
]
˝˝; <
!=
˝˝= ?
null
˝˝@ D
;
˝˝D E"
FixedUpdateProcesses
˛˛ (
[
˛˛( )
coindex
˛˛) 0
.
˛˛0 1
i
˛˛1 2
]
˛˛2 3
=
˛˛4 5
null
˛˛6 :
;
˛˛: ;
return
ˇˇ 
retVal
ˇˇ !
;
ˇˇ! "
case
ÄÄ 
Segment
ÄÄ 
.
ÄÄ 

LateUpdate
ÄÄ '
:
ÄÄ' (
retVal
ÅÅ 
=
ÅÅ !
LateUpdateProcesses
ÅÅ 0
[
ÅÅ0 1
coindex
ÅÅ1 8
.
ÅÅ8 9
i
ÅÅ9 :
]
ÅÅ: ;
!=
ÅÅ< >
null
ÅÅ? C
;
ÅÅC D!
LateUpdateProcesses
ÇÇ '
[
ÇÇ' (
coindex
ÇÇ( /
.
ÇÇ/ 0
i
ÇÇ0 1
]
ÇÇ1 2
=
ÇÇ3 4
null
ÇÇ5 9
;
ÇÇ9 :
return
ÉÉ 
retVal
ÉÉ !
;
ÉÉ! "
case
ÑÑ 
Segment
ÑÑ 
.
ÑÑ 

SlowUpdate
ÑÑ '
:
ÑÑ' (
retVal
ÖÖ 
=
ÖÖ !
SlowUpdateProcesses
ÖÖ 0
[
ÖÖ0 1
coindex
ÖÖ1 8
.
ÖÖ8 9
i
ÖÖ9 :
]
ÖÖ: ;
!=
ÖÖ< >
null
ÖÖ? C
;
ÖÖC D!
SlowUpdateProcesses
ÜÜ '
[
ÜÜ' (
coindex
ÜÜ( /
.
ÜÜ/ 0
i
ÜÜ0 1
]
ÜÜ1 2
=
ÜÜ3 4
null
ÜÜ5 9
;
ÜÜ9 :
return
áá 
retVal
áá !
;
áá! "
default
àà 
:
àà 
return
ââ 
false
ââ  
;
ââ  !
}
ää 
}
ãã 	
private
çç 
IEnumerator
çç 
<
çç 
float
çç !
>
çç! "
CoindexExtract
çç# 1
(
çç1 2
ProcessIndex
çç2 >
coindex
çç? F
)
ççF G
{
éé 	
IEnumerator
èè 
<
èè 
float
èè 
>
èè 
retVal
èè %
;
èè% &
switch
ëë 
(
ëë 
coindex
ëë 
.
ëë 
seg
ëë 
)
ëë  
{
íí 
case
ìì 
Segment
ìì 
.
ìì 
Update
ìì #
:
ìì# $
retVal
îî 
=
îî 
UpdateProcesses
îî ,
[
îî, -
coindex
îî- 4
.
îî4 5
i
îî5 6
]
îî6 7
;
îî7 8
UpdateProcesses
ïï #
[
ïï# $
coindex
ïï$ +
.
ïï+ ,
i
ïï, -
]
ïï- .
=
ïï/ 0
null
ïï1 5
;
ïï5 6
return
ññ 
retVal
ññ !
;
ññ! "
case
óó 
Segment
óó 
.
óó 
FixedUpdate
óó (
:
óó( )
retVal
òò 
=
òò "
FixedUpdateProcesses
òò 1
[
òò1 2
coindex
òò2 9
.
òò9 :
i
òò: ;
]
òò; <
;
òò< ="
FixedUpdateProcesses
ôô (
[
ôô( )
coindex
ôô) 0
.
ôô0 1
i
ôô1 2
]
ôô2 3
=
ôô4 5
null
ôô6 :
;
ôô: ;
return
öö 
retVal
öö !
;
öö! "
case
õõ 
Segment
õõ 
.
õõ 

LateUpdate
õõ '
:
õõ' (
retVal
úú 
=
úú !
LateUpdateProcesses
úú 0
[
úú0 1
coindex
úú1 8
.
úú8 9
i
úú9 :
]
úú: ;
;
úú; <!
LateUpdateProcesses
ùù '
[
ùù' (
coindex
ùù( /
.
ùù/ 0
i
ùù0 1
]
ùù1 2
=
ùù3 4
null
ùù5 9
;
ùù9 :
return
ûû 
retVal
ûû !
;
ûû! "
case
üü 
Segment
üü 
.
üü 

SlowUpdate
üü '
:
üü' (
retVal
†† 
=
†† !
SlowUpdateProcesses
†† 0
[
††0 1
coindex
††1 8
.
††8 9
i
††9 :
]
††: ;
;
††; <!
SlowUpdateProcesses
°° '
[
°°' (
coindex
°°( /
.
°°/ 0
i
°°0 1
]
°°1 2
=
°°3 4
null
°°5 9
;
°°9 :
return
¢¢ 
retVal
¢¢ !
;
¢¢! "
default
££ 
:
££ 
return
§§ 
null
§§ 
;
§§  
}
•• 
}
¶¶ 	
private
®® 
IEnumerator
®® 
<
®® 
float
®® !
>
®®! "
CoindexPeek
®®# .
(
®®. /
ProcessIndex
®®/ ;
coindex
®®< C
)
®®C D
{
©© 	
switch
™™ 
(
™™ 
coindex
™™ 
.
™™ 
seg
™™ 
)
™™  
{
´´ 
case
¨¨ 
Segment
¨¨ 
.
¨¨ 
Update
¨¨ #
:
¨¨# $
return
≠≠ 
UpdateProcesses
≠≠ *
[
≠≠* +
coindex
≠≠+ 2
.
≠≠2 3
i
≠≠3 4
]
≠≠4 5
;
≠≠5 6
case
ÆÆ 
Segment
ÆÆ 
.
ÆÆ 
FixedUpdate
ÆÆ (
:
ÆÆ( )
return
ØØ "
FixedUpdateProcesses
ØØ /
[
ØØ/ 0
coindex
ØØ0 7
.
ØØ7 8
i
ØØ8 9
]
ØØ9 :
;
ØØ: ;
case
∞∞ 
Segment
∞∞ 
.
∞∞ 

LateUpdate
∞∞ '
:
∞∞' (
return
±± !
LateUpdateProcesses
±± .
[
±±. /
coindex
±±/ 6
.
±±6 7
i
±±7 8
]
±±8 9
;
±±9 :
case
≤≤ 
Segment
≤≤ 
.
≤≤ 

SlowUpdate
≤≤ '
:
≤≤' (
return
≥≥ !
SlowUpdateProcesses
≥≥ .
[
≥≥. /
coindex
≥≥/ 6
.
≥≥6 7
i
≥≥7 8
]
≥≥8 9
;
≥≥9 :
default
¥¥ 
:
¥¥ 
return
µµ 
null
µµ 
;
µµ  
}
∂∂ 
}
∑∑ 	
private
ππ 
bool
ππ 
CoindexIsNull
ππ "
(
ππ" #
ProcessIndex
ππ# /
coindex
ππ0 7
)
ππ7 8
{
∫∫ 	
switch
ªª 
(
ªª 
coindex
ªª 
.
ªª 
seg
ªª 
)
ªª  
{
ºº 
case
ΩΩ 
Segment
ΩΩ 
.
ΩΩ 
Update
ΩΩ #
:
ΩΩ# $
return
ææ 
UpdateProcesses
ææ *
[
ææ* +
coindex
ææ+ 2
.
ææ2 3
i
ææ3 4
]
ææ4 5
==
ææ6 8
null
ææ9 =
;
ææ= >
case
øø 
Segment
øø 
.
øø 
FixedUpdate
øø (
:
øø( )
return
¿¿ "
FixedUpdateProcesses
¿¿ /
[
¿¿/ 0
coindex
¿¿0 7
.
¿¿7 8
i
¿¿8 9
]
¿¿9 :
==
¿¿; =
null
¿¿> B
;
¿¿B C
case
¡¡ 
Segment
¡¡ 
.
¡¡ 

LateUpdate
¡¡ '
:
¡¡' (
return
¬¬ !
LateUpdateProcesses
¬¬ .
[
¬¬. /
coindex
¬¬/ 6
.
¬¬6 7
i
¬¬7 8
]
¬¬8 9
==
¬¬: <
null
¬¬= A
;
¬¬A B
case
√√ 
Segment
√√ 
.
√√ 

SlowUpdate
√√ '
:
√√' (
return
ƒƒ !
SlowUpdateProcesses
ƒƒ .
[
ƒƒ. /
coindex
ƒƒ/ 6
.
ƒƒ6 7
i
ƒƒ7 8
]
ƒƒ8 9
==
ƒƒ: <
null
ƒƒ= A
;
ƒƒA B
default
≈≈ 
:
≈≈ 
return
∆∆ 
true
∆∆ 
;
∆∆  
}
«« 
}
»» 	
private
   
bool
   
SetPause
   
(
   
ProcessIndex
   *
coindex
  + 2
,
  2 3
bool
  4 8
newPausedState
  9 G
)
  G H
{
ÀÀ 	
if
ÃÃ 
(
ÃÃ 
CoindexPeek
ÃÃ 
(
ÃÃ 
coindex
ÃÃ #
)
ÃÃ# $
==
ÃÃ% '
null
ÃÃ( ,
)
ÃÃ, -
return
ÕÕ 
false
ÕÕ 
;
ÕÕ 
bool
œœ 
isPaused
œœ 
;
œœ 
switch
—— 
(
—— 
coindex
—— 
.
—— 
seg
—— 
)
——  
{
““ 
case
”” 
Segment
”” 
.
”” 
Update
”” #
:
””# $
isPaused
‘‘ 
=
‘‘ 
UpdatePaused
‘‘ +
[
‘‘+ ,
coindex
‘‘, 3
.
‘‘3 4
i
‘‘4 5
]
‘‘5 6
;
‘‘6 7
UpdatePaused
’’  
[
’’  !
coindex
’’! (
.
’’( )
i
’’) *
]
’’* +
=
’’, -
newPausedState
’’. <
;
’’< =
if
◊◊ 
(
◊◊ 
newPausedState
◊◊ &
&&
◊◊' )
UpdateProcesses
◊◊* 9
[
◊◊9 :
coindex
◊◊: A
.
◊◊A B
i
◊◊B C
]
◊◊C D
.
◊◊D E
Current
◊◊E L
>
◊◊M N
GetSegmentTime
◊◊O ]
(
◊◊] ^
coindex
◊◊^ e
.
◊◊e f
seg
◊◊f i
)
◊◊i j
)
◊◊j k
UpdateProcesses
ÿÿ '
[
ÿÿ' (
coindex
ÿÿ( /
.
ÿÿ/ 0
i
ÿÿ0 1
]
ÿÿ1 2
=
ÿÿ3 4
_InjectDelay
ÿÿ5 A
(
ÿÿA B
UpdateProcesses
ÿÿB Q
[
ÿÿQ R
coindex
ÿÿR Y
.
ÿÿY Z
i
ÿÿZ [
]
ÿÿ[ \
,
ÿÿ\ ]
UpdateProcesses
ŸŸ +
[
ŸŸ+ ,
coindex
ŸŸ, 3
.
ŸŸ3 4
i
ŸŸ4 5
]
ŸŸ5 6
.
ŸŸ6 7
Current
ŸŸ7 >
-
ŸŸ? @
GetSegmentTime
ŸŸA O
(
ŸŸO P
coindex
ŸŸP W
.
ŸŸW X
seg
ŸŸX [
)
ŸŸ[ \
)
ŸŸ\ ]
;
ŸŸ] ^
return
€€ 
isPaused
€€ #
;
€€# $
case
‹‹ 
Segment
‹‹ 
.
‹‹ 
FixedUpdate
‹‹ (
:
‹‹( )
isPaused
›› 
=
›› 
FixedUpdatePaused
›› 0
[
››0 1
coindex
››1 8
.
››8 9
i
››9 :
]
››: ;
;
››; <
FixedUpdatePaused
ﬁﬁ %
[
ﬁﬁ% &
coindex
ﬁﬁ& -
.
ﬁﬁ- .
i
ﬁﬁ. /
]
ﬁﬁ/ 0
=
ﬁﬁ1 2
newPausedState
ﬁﬁ3 A
;
ﬁﬁA B
if
‡‡ 
(
‡‡ 
newPausedState
‡‡ &
&&
‡‡' )"
FixedUpdateProcesses
‡‡* >
[
‡‡> ?
coindex
‡‡? F
.
‡‡F G
i
‡‡G H
]
‡‡H I
.
‡‡I J
Current
‡‡J Q
>
‡‡R S
GetSegmentTime
‡‡T b
(
‡‡b c
coindex
‡‡c j
.
‡‡j k
seg
‡‡k n
)
‡‡n o
)
‡‡o p"
FixedUpdateProcesses
·· ,
[
··, -
coindex
··- 4
.
··4 5
i
··5 6
]
··6 7
=
··8 9
_InjectDelay
··: F
(
··F G"
FixedUpdateProcesses
··G [
[
··[ \
coindex
··\ c
.
··c d
i
··d e
]
··e f
,
··f g"
FixedUpdateProcesses
‚‚ 0
[
‚‚0 1
coindex
‚‚1 8
.
‚‚8 9
i
‚‚9 :
]
‚‚: ;
.
‚‚; <
Current
‚‚< C
-
‚‚D E
GetSegmentTime
‚‚F T
(
‚‚T U
coindex
‚‚U \
.
‚‚\ ]
seg
‚‚] `
)
‚‚` a
)
‚‚a b
;
‚‚b c
return
‰‰ 
isPaused
‰‰ #
;
‰‰# $
case
ÂÂ 
Segment
ÂÂ 
.
ÂÂ 

LateUpdate
ÂÂ '
:
ÂÂ' (
isPaused
ÊÊ 
=
ÊÊ 
LateUpdatePaused
ÊÊ /
[
ÊÊ/ 0
coindex
ÊÊ0 7
.
ÊÊ7 8
i
ÊÊ8 9
]
ÊÊ9 :
;
ÊÊ: ;
LateUpdatePaused
ÁÁ $
[
ÁÁ$ %
coindex
ÁÁ% ,
.
ÁÁ, -
i
ÁÁ- .
]
ÁÁ. /
=
ÁÁ0 1
newPausedState
ÁÁ2 @
;
ÁÁ@ A
if
ÈÈ 
(
ÈÈ 
newPausedState
ÈÈ &
&&
ÈÈ' )!
LateUpdateProcesses
ÈÈ* =
[
ÈÈ= >
coindex
ÈÈ> E
.
ÈÈE F
i
ÈÈF G
]
ÈÈG H
.
ÈÈH I
Current
ÈÈI P
>
ÈÈQ R
GetSegmentTime
ÈÈS a
(
ÈÈa b
coindex
ÈÈb i
.
ÈÈi j
seg
ÈÈj m
)
ÈÈm n
)
ÈÈn o!
LateUpdateProcesses
ÍÍ +
[
ÍÍ+ ,
coindex
ÍÍ, 3
.
ÍÍ3 4
i
ÍÍ4 5
]
ÍÍ5 6
=
ÍÍ7 8
_InjectDelay
ÍÍ9 E
(
ÍÍE F!
LateUpdateProcesses
ÍÍF Y
[
ÍÍY Z
coindex
ÍÍZ a
.
ÍÍa b
i
ÍÍb c
]
ÍÍc d
,
ÍÍd e!
LateUpdateProcesses
ÎÎ /
[
ÎÎ/ 0
coindex
ÎÎ0 7
.
ÎÎ7 8
i
ÎÎ8 9
]
ÎÎ9 :
.
ÎÎ: ;
Current
ÎÎ; B
-
ÎÎC D
GetSegmentTime
ÎÎE S
(
ÎÎS T
coindex
ÎÎT [
.
ÎÎ[ \
seg
ÎÎ\ _
)
ÎÎ_ `
)
ÎÎ` a
;
ÎÎa b
return
ÌÌ 
isPaused
ÌÌ #
;
ÌÌ# $
case
ÓÓ 
Segment
ÓÓ 
.
ÓÓ 

SlowUpdate
ÓÓ '
:
ÓÓ' (
isPaused
ÔÔ 
=
ÔÔ 
SlowUpdatePaused
ÔÔ /
[
ÔÔ/ 0
coindex
ÔÔ0 7
.
ÔÔ7 8
i
ÔÔ8 9
]
ÔÔ9 :
;
ÔÔ: ;
SlowUpdatePaused
 $
[
$ %
coindex
% ,
.
, -
i
- .
]
. /
=
0 1
newPausedState
2 @
;
@ A
if
ÚÚ 
(
ÚÚ 
newPausedState
ÚÚ &
&&
ÚÚ' )!
SlowUpdateProcesses
ÚÚ* =
[
ÚÚ= >
coindex
ÚÚ> E
.
ÚÚE F
i
ÚÚF G
]
ÚÚG H
.
ÚÚH I
Current
ÚÚI P
>
ÚÚQ R
GetSegmentTime
ÚÚS a
(
ÚÚa b
coindex
ÚÚb i
.
ÚÚi j
seg
ÚÚj m
)
ÚÚm n
)
ÚÚn o!
SlowUpdateProcesses
ÛÛ +
[
ÛÛ+ ,
coindex
ÛÛ, 3
.
ÛÛ3 4
i
ÛÛ4 5
]
ÛÛ5 6
=
ÛÛ7 8
_InjectDelay
ÛÛ9 E
(
ÛÛE F!
SlowUpdateProcesses
ÛÛF Y
[
ÛÛY Z
coindex
ÛÛZ a
.
ÛÛa b
i
ÛÛb c
]
ÛÛc d
,
ÛÛd e!
SlowUpdateProcesses
ÙÙ /
[
ÙÙ/ 0
coindex
ÙÙ0 7
.
ÙÙ7 8
i
ÙÙ8 9
]
ÙÙ9 :
.
ÙÙ: ;
Current
ÙÙ; B
-
ÙÙC D
GetSegmentTime
ÙÙE S
(
ÙÙS T
coindex
ÙÙT [
.
ÙÙ[ \
seg
ÙÙ\ _
)
ÙÙ_ `
)
ÙÙ` a
;
ÙÙa b
return
ˆˆ 
isPaused
ˆˆ #
;
ˆˆ# $
default
˜˜ 
:
˜˜ 
return
¯¯ 
false
¯¯  
;
¯¯  !
}
˘˘ 
}
˙˙ 	
private
¸¸ 
bool
¸¸ 
SetHeld
¸¸ 
(
¸¸ 
ProcessIndex
¸¸ )
coindex
¸¸* 1
,
¸¸1 2
bool
¸¸3 7
newHeldState
¸¸8 D
)
¸¸D E
{
˝˝ 	
if
˛˛ 
(
˛˛ 
CoindexPeek
˛˛ 
(
˛˛ 
coindex
˛˛ #
)
˛˛# $
==
˛˛% '
null
˛˛( ,
)
˛˛, -
return
ˇˇ 
false
ˇˇ 
;
ˇˇ 
bool
ÅÅ 
isHeld
ÅÅ 
;
ÅÅ 
switch
ÉÉ 
(
ÉÉ 
coindex
ÉÉ 
.
ÉÉ 
seg
ÉÉ 
)
ÉÉ  
{
ÑÑ 
case
ÖÖ 
Segment
ÖÖ 
.
ÖÖ 
Update
ÖÖ #
:
ÖÖ# $
isHeld
ÜÜ 
=
ÜÜ 

UpdateHeld
ÜÜ '
[
ÜÜ' (
coindex
ÜÜ( /
.
ÜÜ/ 0
i
ÜÜ0 1
]
ÜÜ1 2
;
ÜÜ2 3

UpdateHeld
áá 
[
áá 
coindex
áá &
.
áá& '
i
áá' (
]
áá( )
=
áá* +
newHeldState
áá, 8
;
áá8 9
if
ââ 
(
ââ 
newHeldState
ââ $
&&
ââ% '
UpdateProcesses
ââ( 7
[
ââ7 8
coindex
ââ8 ?
.
ââ? @
i
ââ@ A
]
ââA B
.
ââB C
Current
ââC J
>
ââK L
GetSegmentTime
ââM [
(
ââ[ \
coindex
ââ\ c
.
ââc d
seg
ââd g
)
ââg h
)
ââh i
UpdateProcesses
ää '
[
ää' (
coindex
ää( /
.
ää/ 0
i
ää0 1
]
ää1 2
=
ää3 4
_InjectDelay
ää5 A
(
ääA B
UpdateProcesses
ääB Q
[
ääQ R
coindex
ääR Y
.
ääY Z
i
ääZ [
]
ää[ \
,
ää\ ]
UpdateProcesses
ãã +
[
ãã+ ,
coindex
ãã, 3
.
ãã3 4
i
ãã4 5
]
ãã5 6
.
ãã6 7
Current
ãã7 >
-
ãã? @
GetSegmentTime
ããA O
(
ããO P
coindex
ããP W
.
ããW X
seg
ããX [
)
ãã[ \
)
ãã\ ]
;
ãã] ^
return
çç 
isHeld
çç !
;
çç! "
case
éé 
Segment
éé 
.
éé 
FixedUpdate
éé (
:
éé( )
isHeld
èè 
=
èè 
FixedUpdateHeld
èè ,
[
èè, -
coindex
èè- 4
.
èè4 5
i
èè5 6
]
èè6 7
;
èè7 8
FixedUpdateHeld
êê #
[
êê# $
coindex
êê$ +
.
êê+ ,
i
êê, -
]
êê- .
=
êê/ 0
newHeldState
êê1 =
;
êê= >
if
íí 
(
íí 
newHeldState
íí $
&&
íí% '"
FixedUpdateProcesses
íí( <
[
íí< =
coindex
íí= D
.
ííD E
i
ííE F
]
ííF G
.
ííG H
Current
ííH O
>
ííP Q
GetSegmentTime
ííR `
(
íí` a
coindex
íía h
.
ííh i
seg
ííi l
)
ííl m
)
íím n"
FixedUpdateProcesses
ìì ,
[
ìì, -
coindex
ìì- 4
.
ìì4 5
i
ìì5 6
]
ìì6 7
=
ìì8 9
_InjectDelay
ìì: F
(
ììF G"
FixedUpdateProcesses
ììG [
[
ìì[ \
coindex
ìì\ c
.
ììc d
i
ììd e
]
ììe f
,
ììf g"
FixedUpdateProcesses
îî 0
[
îî0 1
coindex
îî1 8
.
îî8 9
i
îî9 :
]
îî: ;
.
îî; <
Current
îî< C
-
îîD E
GetSegmentTime
îîF T
(
îîT U
coindex
îîU \
.
îî\ ]
seg
îî] `
)
îî` a
)
îîa b
;
îîb c
return
ññ 
isHeld
ññ !
;
ññ! "
case
óó 
Segment
óó 
.
óó 

LateUpdate
óó '
:
óó' (
isHeld
òò 
=
òò 
LateUpdateHeld
òò +
[
òò+ ,
coindex
òò, 3
.
òò3 4
i
òò4 5
]
òò5 6
;
òò6 7
LateUpdateHeld
ôô "
[
ôô" #
coindex
ôô# *
.
ôô* +
i
ôô+ ,
]
ôô, -
=
ôô. /
newHeldState
ôô0 <
;
ôô< =
if
õõ 
(
õõ 
newHeldState
õõ $
&&
õõ% '!
LateUpdateProcesses
õõ( ;
[
õõ; <
coindex
õõ< C
.
õõC D
i
õõD E
]
õõE F
.
õõF G
Current
õõG N
>
õõO P
GetSegmentTime
õõQ _
(
õõ_ `
coindex
õõ` g
.
õõg h
seg
õõh k
)
õõk l
)
õõl m!
LateUpdateProcesses
úú +
[
úú+ ,
coindex
úú, 3
.
úú3 4
i
úú4 5
]
úú5 6
=
úú7 8
_InjectDelay
úú9 E
(
úúE F!
LateUpdateProcesses
úúF Y
[
úúY Z
coindex
úúZ a
.
úúa b
i
úúb c
]
úúc d
,
úúd e!
LateUpdateProcesses
ùù /
[
ùù/ 0
coindex
ùù0 7
.
ùù7 8
i
ùù8 9
]
ùù9 :
.
ùù: ;
Current
ùù; B
-
ùùC D
GetSegmentTime
ùùE S
(
ùùS T
coindex
ùùT [
.
ùù[ \
seg
ùù\ _
)
ùù_ `
)
ùù` a
;
ùùa b
return
üü 
isHeld
üü !
;
üü! "
case
†† 
Segment
†† 
.
†† 

SlowUpdate
†† '
:
††' (
isHeld
°° 
=
°° 
SlowUpdateHeld
°° +
[
°°+ ,
coindex
°°, 3
.
°°3 4
i
°°4 5
]
°°5 6
;
°°6 7
SlowUpdateHeld
¢¢ "
[
¢¢" #
coindex
¢¢# *
.
¢¢* +
i
¢¢+ ,
]
¢¢, -
=
¢¢. /
newHeldState
¢¢0 <
;
¢¢< =
if
§§ 
(
§§ 
newHeldState
§§ $
&&
§§% '!
SlowUpdateProcesses
§§( ;
[
§§; <
coindex
§§< C
.
§§C D
i
§§D E
]
§§E F
.
§§F G
Current
§§G N
>
§§O P
GetSegmentTime
§§Q _
(
§§_ `
coindex
§§` g
.
§§g h
seg
§§h k
)
§§k l
)
§§l m!
SlowUpdateProcesses
•• +
[
••+ ,
coindex
••, 3
.
••3 4
i
••4 5
]
••5 6
=
••7 8
_InjectDelay
••9 E
(
••E F!
SlowUpdateProcesses
••F Y
[
••Y Z
coindex
••Z a
.
••a b
i
••b c
]
••c d
,
••d e!
SlowUpdateProcesses
¶¶ /
[
¶¶/ 0
coindex
¶¶0 7
.
¶¶7 8
i
¶¶8 9
]
¶¶9 :
.
¶¶: ;
Current
¶¶; B
-
¶¶C D
GetSegmentTime
¶¶E S
(
¶¶S T
coindex
¶¶T [
.
¶¶[ \
seg
¶¶\ _
)
¶¶_ `
)
¶¶` a
;
¶¶a b
return
®® 
isHeld
®® !
;
®®! "
default
©© 
:
©© 
return
™™ 
false
™™  
;
™™  !
}
´´ 
}
¨¨ 	
private
ÆÆ 
IEnumerator
ÆÆ 
<
ÆÆ 
float
ÆÆ !
>
ÆÆ! "
_InjectDelay
ÆÆ# /
(
ÆÆ/ 0
IEnumerator
ÆÆ0 ;
<
ÆÆ; <
float
ÆÆ< A
>
ÆÆA B
proc
ÆÆC G
,
ÆÆG H
float
ÆÆI N
	delayTime
ÆÆO X
)
ÆÆX Y
{
ØØ 	
yield
∞∞ 
return
∞∞ &
WaitForSecondsOnInstance
∞∞ 1
(
∞∞1 2
	delayTime
∞∞2 ;
)
∞∞; <
;
∞∞< =
_tmpRef
≤≤ 
=
≤≤ 
proc
≤≤ 
;
≤≤ !
ReplacementFunction
≥≥ 
=
≥≥  !$
ReturnTmpRefForRepFunc
≥≥" 8
;
≥≥8 9
yield
¥¥ 
return
¥¥ 
float
¥¥ 
.
¥¥ 
NaN
¥¥ "
;
¥¥" #
}
µµ 	
private
∑∑ 
bool
∑∑ 
CoindexIsPaused
∑∑ $
(
∑∑$ %
ProcessIndex
∑∑% 1
coindex
∑∑2 9
)
∑∑9 :
{
∏∏ 	
switch
ππ 
(
ππ 
coindex
ππ 
.
ππ 
seg
ππ 
)
ππ  
{
∫∫ 
case
ªª 
Segment
ªª 
.
ªª 
Update
ªª #
:
ªª# $
return
ºº 
UpdatePaused
ºº '
[
ºº' (
coindex
ºº( /
.
ºº/ 0
i
ºº0 1
]
ºº1 2
;
ºº2 3
case
ΩΩ 
Segment
ΩΩ 
.
ΩΩ 
FixedUpdate
ΩΩ (
:
ΩΩ( )
return
ææ 
FixedUpdatePaused
ææ ,
[
ææ, -
coindex
ææ- 4
.
ææ4 5
i
ææ5 6
]
ææ6 7
;
ææ7 8
case
øø 
Segment
øø 
.
øø 

LateUpdate
øø '
:
øø' (
return
¿¿ 
LateUpdatePaused
¿¿ +
[
¿¿+ ,
coindex
¿¿, 3
.
¿¿3 4
i
¿¿4 5
]
¿¿5 6
;
¿¿6 7
case
¡¡ 
Segment
¡¡ 
.
¡¡ 

SlowUpdate
¡¡ '
:
¡¡' (
return
¬¬ 
SlowUpdatePaused
¬¬ +
[
¬¬+ ,
coindex
¬¬, 3
.
¬¬3 4
i
¬¬4 5
]
¬¬5 6
;
¬¬6 7
default
√√ 
:
√√ 
return
ƒƒ 
false
ƒƒ  
;
ƒƒ  !
}
≈≈ 
}
∆∆ 	
private
»» 
bool
»» 
CoindexIsHeld
»» "
(
»»" #
ProcessIndex
»»# /
coindex
»»0 7
)
»»7 8
{
…… 	
switch
   
(
   
coindex
   
.
   
seg
   
)
    
{
ÀÀ 
case
ÃÃ 
Segment
ÃÃ 
.
ÃÃ 
Update
ÃÃ #
:
ÃÃ# $
return
ÕÕ 

UpdateHeld
ÕÕ %
[
ÕÕ% &
coindex
ÕÕ& -
.
ÕÕ- .
i
ÕÕ. /
]
ÕÕ/ 0
;
ÕÕ0 1
case
ŒŒ 
Segment
ŒŒ 
.
ŒŒ 
FixedUpdate
ŒŒ (
:
ŒŒ( )
return
œœ 
FixedUpdateHeld
œœ *
[
œœ* +
coindex
œœ+ 2
.
œœ2 3
i
œœ3 4
]
œœ4 5
;
œœ5 6
case
–– 
Segment
–– 
.
–– 

LateUpdate
–– '
:
––' (
return
—— 
LateUpdateHeld
—— )
[
——) *
coindex
——* 1
.
——1 2
i
——2 3
]
——3 4
;
——4 5
case
““ 
Segment
““ 
.
““ 

SlowUpdate
““ '
:
““' (
return
”” 
SlowUpdateHeld
”” )
[
””) *
coindex
””* 1
.
””1 2
i
””2 3
]
””3 4
;
””4 5
default
‘‘ 
:
‘‘ 
return
’’ 
false
’’  
;
’’  !
}
÷÷ 
}
◊◊ 	
private
ŸŸ 
void
ŸŸ 
CoindexReplace
ŸŸ #
(
ŸŸ# $
ProcessIndex
ŸŸ$ 0
coindex
ŸŸ1 8
,
ŸŸ8 9
IEnumerator
ŸŸ: E
<
ŸŸE F
float
ŸŸF K
>
ŸŸK L
replacement
ŸŸM X
)
ŸŸX Y
{
⁄⁄ 	
switch
€€ 
(
€€ 
coindex
€€ 
.
€€ 
seg
€€ 
)
€€  
{
‹‹ 
case
›› 
Segment
›› 
.
›› 
Update
›› #
:
››# $
UpdateProcesses
ﬁﬁ #
[
ﬁﬁ# $
coindex
ﬁﬁ$ +
.
ﬁﬁ+ ,
i
ﬁﬁ, -
]
ﬁﬁ- .
=
ﬁﬁ/ 0
replacement
ﬁﬁ1 <
;
ﬁﬁ< =
return
ﬂﬂ 
;
ﬂﬂ 
case
‡‡ 
Segment
‡‡ 
.
‡‡ 
FixedUpdate
‡‡ (
:
‡‡( )"
FixedUpdateProcesses
·· (
[
··( )
coindex
··) 0
.
··0 1
i
··1 2
]
··2 3
=
··4 5
replacement
··6 A
;
··A B
return
‚‚ 
;
‚‚ 
case
„„ 
Segment
„„ 
.
„„ 

LateUpdate
„„ '
:
„„' (!
LateUpdateProcesses
‰‰ '
[
‰‰' (
coindex
‰‰( /
.
‰‰/ 0
i
‰‰0 1
]
‰‰1 2
=
‰‰3 4
replacement
‰‰5 @
;
‰‰@ A
return
ÂÂ 
;
ÂÂ 
case
ÊÊ 
Segment
ÊÊ 
.
ÊÊ 

SlowUpdate
ÊÊ '
:
ÊÊ' (!
SlowUpdateProcesses
ÁÁ '
[
ÁÁ' (
coindex
ÁÁ( /
.
ÁÁ/ 0
i
ÁÁ0 1
]
ÁÁ1 2
=
ÁÁ3 4
replacement
ÁÁ5 @
;
ÁÁ@ A
return
ËË 
;
ËË 
}
ÈÈ 
}
ÍÍ 	
public
 
static
 
float
 
WaitForSeconds
 *
(
* +
float
+ 0
waitTime
1 9
)
9 :
{
ÒÒ 	
if
ÚÚ 
(
ÚÚ 
float
ÚÚ 
.
ÚÚ 
IsNaN
ÚÚ 
(
ÚÚ 
waitTime
ÚÚ $
)
ÚÚ$ %
)
ÚÚ% &
waitTime
ÚÚ' /
=
ÚÚ0 1
$num
ÚÚ2 4
;
ÚÚ4 5
return
ÛÛ 
	LocalTime
ÛÛ 
+
ÛÛ 
waitTime
ÛÛ '
;
ÛÛ' (
}
ÙÙ 	
public
˙˙ 
float
˙˙ &
WaitForSecondsOnInstance
˙˙ -
(
˙˙- .
float
˙˙. 3
waitTime
˙˙4 <
)
˙˙< =
{
˚˚ 	
if
¸¸ 
(
¸¸ 
float
¸¸ 
.
¸¸ 
IsNaN
¸¸ 
(
¸¸ 
waitTime
¸¸ $
)
¸¸$ %
)
¸¸% &
waitTime
¸¸' /
=
¸¸0 1
$num
¸¸2 4
;
¸¸4 5
return
˝˝ 
	localTime
˝˝ 
+
˝˝ 
waitTime
˝˝ '
;
˝˝' (
}
˛˛ 	
public
ÖÖ 
static
ÖÖ 
float
ÖÖ 
WaitUntilDone
ÖÖ )
(
ÖÖ) *
CoroutineHandle
ÖÖ* 9
otherCoroutine
ÖÖ: H
)
ÖÖH I
{
ÜÜ 	
return
áá 
WaitUntilDone
áá  
(
áá  !
otherCoroutine
áá! /
,
áá/ 0
true
áá1 5
)
áá5 6
;
áá6 7
}
àà 	
public
êê 
static
êê 
float
êê 
WaitUntilDone
êê )
(
êê) *
CoroutineHandle
êê* 9
otherCoroutine
êê: H
,
êêH I
bool
êêJ N
warnOnIssue
êêO Z
)
êêZ [
{
ëë 	
Timing
íí 
inst
íí 
=
íí 
GetInstance
íí %
(
íí% &
otherCoroutine
íí& 4
.
íí4 5
Key
íí5 8
)
íí8 9
;
íí9 :
if
îî 
(
îî 
inst
îî 
!=
îî 
null
îî 
&&
îî 
inst
îî  $
.
îî$ %
_handleToIndex
îî% 3
.
îî3 4
ContainsKey
îî4 ?
(
îî? @
otherCoroutine
îî@ N
)
îîN O
)
îîO P
{
ïï 
if
ññ 
(
ññ 
inst
ññ 
.
ññ 
CoindexIsNull
ññ &
(
ññ& '
inst
ññ' +
.
ññ+ ,
_handleToIndex
ññ, :
[
ññ: ;
otherCoroutine
ññ; I
]
ññI J
)
ññJ K
)
ññK L
return
óó 
$num
óó 
;
óó 
if
ôô 
(
ôô 
!
ôô 
inst
ôô 
.
ôô 
_waitingTriggers
ôô *
.
ôô* +
ContainsKey
ôô+ 6
(
ôô6 7
otherCoroutine
ôô7 E
)
ôôE F
)
ôôF G
{
öö 
inst
õõ 
.
õõ 
CoindexReplace
õõ '
(
õõ' (
inst
õõ( ,
.
õõ, -
_handleToIndex
õõ- ;
[
õõ; <
otherCoroutine
õõ< J
]
õõJ K
,
õõK L
inst
úú 
.
úú 
_StartWhenDone
úú +
(
úú+ ,
otherCoroutine
úú, :
,
úú: ;
inst
úú< @
.
úú@ A
CoindexPeek
úúA L
(
úúL M
inst
úúM Q
.
úúQ R
_handleToIndex
úúR `
[
úú` a
otherCoroutine
úúa o
]
úúo p
)
úúp q
)
úúq r
)
úúr s
;
úús t
inst
ùù 
.
ùù 
_waitingTriggers
ùù )
.
ùù) *
Add
ùù* -
(
ùù- .
otherCoroutine
ùù. <
,
ùù< =
new
ùù> A
HashSet
ùùB I
<
ùùI J
CoroutineHandle
ùùJ Y
>
ùùY Z
(
ùùZ [
)
ùù[ \
)
ùù\ ]
;
ùù] ^
}
ûû 
if
†† 
(
†† 
inst
†† 
.
†† 
currentCoroutine
†† )
==
††* ,
otherCoroutine
††- ;
)
††; <
{
°° 
Assert
¢¢ 
.
¢¢ 
IsFalse
¢¢ "
(
¢¢" #
warnOnIssue
¢¢# .
,
¢¢. /
$str
¢¢0 U
)
¢¢U V
;
¢¢V W
return
££ 
WaitForOneFrame
££ *
;
££* +
}
§§ 
if
•• 
(
•• 
!
•• 
inst
•• 
.
•• 
currentCoroutine
•• *
.
••* +
IsValid
••+ 2
)
••2 3
{
¶¶ 
Assert
ßß 
.
ßß 
IsFalse
ßß "
(
ßß" #
warnOnIssue
ßß# .
,
ßß. /
$str
ßß0 n
)
ßßn o
;
ßßo p
return
®® 
WaitForOneFrame
®® *
;
®®* +
}
©© 
inst
´´ 
.
´´ 
_waitingTriggers
´´ %
[
´´% &
otherCoroutine
´´& 4
]
´´4 5
.
´´5 6
Add
´´6 9
(
´´9 :
inst
´´: >
.
´´> ?
currentCoroutine
´´? O
)
´´O P
;
´´P Q
if
¨¨ 
(
¨¨ 
!
¨¨ 
inst
¨¨ 
.
¨¨ 
_allWaiting
¨¨ %
.
¨¨% &
Contains
¨¨& .
(
¨¨. /
inst
¨¨/ 3
.
¨¨3 4
currentCoroutine
¨¨4 D
)
¨¨D E
)
¨¨E F
inst
≠≠ 
.
≠≠ 
_allWaiting
≠≠ $
.
≠≠$ %
Add
≠≠% (
(
≠≠( )
inst
≠≠) -
.
≠≠- .
currentCoroutine
≠≠. >
)
≠≠> ?
;
≠≠? @
inst
ÆÆ 
.
ÆÆ 
SetHeld
ÆÆ 
(
ÆÆ 
inst
ÆÆ !
.
ÆÆ! "
_handleToIndex
ÆÆ" 0
[
ÆÆ0 1
inst
ÆÆ1 5
.
ÆÆ5 6
currentCoroutine
ÆÆ6 F
]
ÆÆF G
,
ÆÆG H
true
ÆÆI M
)
ÆÆM N
;
ÆÆN O
inst
ØØ 
.
ØØ 

SwapToLast
ØØ 
(
ØØ  
otherCoroutine
ØØ  .
,
ØØ. /
inst
ØØ0 4
.
ØØ4 5
currentCoroutine
ØØ5 E
)
ØØE F
;
ØØF G
return
±± 
float
±± 
.
±± 
NaN
±±  
;
±±  !
}
≤≤ 
Assert
¥¥ 
.
¥¥ 
IsFalse
¥¥ 
(
¥¥ 
warnOnIssue
¥¥ &
,
¥¥& '
$str
¥¥( z
+
¥¥{ |
otherCoroutine¥¥} ã
)¥¥ã å
;¥¥å ç
return
µµ 
WaitForOneFrame
µµ "
;
µµ" #
}
∂∂ 	
private
∏∏ 
IEnumerator
∏∏ 
<
∏∏ 
float
∏∏ !
>
∏∏! "
_StartWhenDone
∏∏# 1
(
∏∏1 2
CoroutineHandle
∏∏2 A
handle
∏∏B H
,
∏∏H I
IEnumerator
∏∏J U
<
∏∏U V
float
∏∏V [
>
∏∏[ \
proc
∏∏] a
)
∏∏a b
{
ππ 	
if
∫∫ 
(
∫∫ 
!
∫∫ 
_waitingTriggers
∫∫ !
.
∫∫! "
ContainsKey
∫∫" -
(
∫∫- .
handle
∫∫. 4
)
∫∫4 5
)
∫∫5 6
yield
∫∫7 <
break
∫∫= B
;
∫∫B C
try
ºº 
{
ΩΩ 
if
ææ 
(
ææ 
proc
ææ 
.
ææ 
Current
ææ  
>
ææ! "
	localTime
ææ# ,
)
ææ, -
yield
øø 
return
øø  
proc
øø! %
.
øø% &
Current
øø& -
;
øø- .
while
¡¡ 
(
¡¡ 
proc
¡¡ 
.
¡¡ 
MoveNext
¡¡ $
(
¡¡$ %
)
¡¡% &
)
¡¡& '
yield
¬¬ 
return
¬¬  
proc
¬¬! %
.
¬¬% &
Current
¬¬& -
;
¬¬- .
}
√√ 
finally
ƒƒ 
{
≈≈ !
CloseWaitingProcess
∆∆ #
(
∆∆# $
handle
∆∆$ *
)
∆∆* +
;
∆∆+ ,
}
«« 
}
»» 	
private
   
void
   

SwapToLast
   
(
    
CoroutineHandle
    /
firstHandle
  0 ;
,
  ; <
CoroutineHandle
  = L

lastHandle
  M W
)
  W X
{
ÀÀ 	
if
ÃÃ 
(
ÃÃ 
firstHandle
ÃÃ 
.
ÃÃ 
Key
ÃÃ 
!=
ÃÃ  "

lastHandle
ÃÃ# -
.
ÃÃ- .
Key
ÃÃ. 1
)
ÃÃ1 2
return
ÕÕ 
;
ÕÕ 
ProcessIndex
œœ 

firstIndex
œœ #
=
œœ$ %
_handleToIndex
œœ& 4
[
œœ4 5
firstHandle
œœ5 @
]
œœ@ A
;
œœA B
ProcessIndex
–– 
	lastIndex
–– "
=
––# $
_handleToIndex
––% 3
[
––3 4

lastHandle
––4 >
]
––> ?
;
––? @
if
““ 
(
““ 

firstIndex
““ 
.
““ 
seg
““ 
!=
““ !
	lastIndex
““" +
.
““+ ,
seg
““, /
||
““0 2

firstIndex
““3 =
.
““= >
i
““> ?
<
““@ A
	lastIndex
““B K
.
““K L
i
““L M
)
““M N
return
”” 
;
”” 
IEnumerator
’’ 
<
’’ 
float
’’ 
>
’’ 
	tempCoptr
’’ (
=
’’) *
CoindexPeek
’’+ 6
(
’’6 7

firstIndex
’’7 A
)
’’A B
;
’’B C
CoindexReplace
÷÷ 
(
÷÷ 

firstIndex
÷÷ %
,
÷÷% &
CoindexPeek
÷÷' 2
(
÷÷2 3
	lastIndex
÷÷3 <
)
÷÷< =
)
÷÷= >
;
÷÷> ?
CoindexReplace
◊◊ 
(
◊◊ 
	lastIndex
◊◊ $
,
◊◊$ %
	tempCoptr
◊◊& /
)
◊◊/ 0
;
◊◊0 1
_indexToHandle
ŸŸ 
[
ŸŸ 

firstIndex
ŸŸ %
]
ŸŸ% &
=
ŸŸ' (

lastHandle
ŸŸ) 3
;
ŸŸ3 4
_indexToHandle
⁄⁄ 
[
⁄⁄ 
	lastIndex
⁄⁄ $
]
⁄⁄$ %
=
⁄⁄& '
firstHandle
⁄⁄( 3
;
⁄⁄3 4
_handleToIndex
€€ 
[
€€ 
firstHandle
€€ &
]
€€& '
=
€€( )
	lastIndex
€€* 3
;
€€3 4
_handleToIndex
‹‹ 
[
‹‹ 

lastHandle
‹‹ %
]
‹‹% &
=
‹‹' (

firstIndex
‹‹) 3
;
‹‹3 4
bool
›› 
tmpB
›› 
=
›› 
SetPause
››  
(
››  !

firstIndex
››! +
,
››+ ,
CoindexIsPaused
››- <
(
››< =
	lastIndex
››= F
)
››F G
)
››G H
;
››H I
SetPause
ﬁﬁ 
(
ﬁﬁ 
	lastIndex
ﬁﬁ 
,
ﬁﬁ 
tmpB
ﬁﬁ  $
)
ﬁﬁ$ %
;
ﬁﬁ% &
tmpB
ﬂﬂ 
=
ﬂﬂ 
SetHeld
ﬂﬂ 
(
ﬂﬂ 

firstIndex
ﬂﬂ %
,
ﬂﬂ% &
CoindexIsHeld
ﬂﬂ' 4
(
ﬂﬂ4 5
	lastIndex
ﬂﬂ5 >
)
ﬂﬂ> ?
)
ﬂﬂ? @
;
ﬂﬂ@ A
SetHeld
‡‡ 
(
‡‡ 
	lastIndex
‡‡ 
,
‡‡ 
tmpB
‡‡ #
)
‡‡# $
;
‡‡$ %
if
‚‚ 
(
‚‚ 
_waitingTriggers
‚‚  
.
‚‚  !
ContainsKey
‚‚! ,
(
‚‚, -

lastHandle
‚‚- 7
)
‚‚7 8
)
‚‚8 9
{
„„ 
var
‰‰ 
	trigsEnum
‰‰ 
=
‰‰ 
_waitingTriggers
‰‰  0
[
‰‰0 1

lastHandle
‰‰1 ;
]
‰‰; <
.
‰‰< =
GetEnumerator
‰‰= J
(
‰‰J K
)
‰‰K L
;
‰‰L M
while
ÂÂ 
(
ÂÂ 
	trigsEnum
ÂÂ  
.
ÂÂ  !
MoveNext
ÂÂ! )
(
ÂÂ) *
)
ÂÂ* +
)
ÂÂ+ ,

SwapToLast
ÊÊ 
(
ÊÊ 

lastHandle
ÊÊ )
,
ÊÊ) *
	trigsEnum
ÊÊ+ 4
.
ÊÊ4 5
Current
ÊÊ5 <
)
ÊÊ< =
;
ÊÊ= >
}
ÁÁ 
if
ÈÈ 
(
ÈÈ 
_allWaiting
ÈÈ 
.
ÈÈ 
Contains
ÈÈ $
(
ÈÈ$ %
firstHandle
ÈÈ% 0
)
ÈÈ0 1
)
ÈÈ1 2
{
ÍÍ 
var
ÎÎ 
keyEnum
ÎÎ 
=
ÎÎ 
_waitingTriggers
ÎÎ .
.
ÎÎ. /
GetEnumerator
ÎÎ/ <
(
ÎÎ< =
)
ÎÎ= >
;
ÎÎ> ?
while
ÏÏ 
(
ÏÏ 
keyEnum
ÏÏ 
.
ÏÏ 
MoveNext
ÏÏ '
(
ÏÏ' (
)
ÏÏ( )
)
ÏÏ) *
{
ÌÌ 
var
ÓÓ 
	valueEnum
ÓÓ !
=
ÓÓ" #
keyEnum
ÓÓ$ +
.
ÓÓ+ ,
Current
ÓÓ, 3
.
ÓÓ3 4
Value
ÓÓ4 9
.
ÓÓ9 :
GetEnumerator
ÓÓ: G
(
ÓÓG H
)
ÓÓH I
;
ÓÓI J
while
ÔÔ 
(
ÔÔ 
	valueEnum
ÔÔ $
.
ÔÔ$ %
MoveNext
ÔÔ% -
(
ÔÔ- .
)
ÔÔ. /
)
ÔÔ/ 0
if
 
(
 
	valueEnum
 %
.
% &
Current
& -
==
. 0
firstHandle
1 <
)
< =

SwapToLast
ÒÒ &
(
ÒÒ& '
keyEnum
ÒÒ' .
.
ÒÒ. /
Current
ÒÒ/ 6
.
ÒÒ6 7
Key
ÒÒ7 :
,
ÒÒ: ;
firstHandle
ÒÒ< G
)
ÒÒG H
;
ÒÒH I
}
ÚÚ 
}
ÛÛ 
}
ÙÙ 	
private
ˆˆ 
void
ˆˆ !
CloseWaitingProcess
ˆˆ (
(
ˆˆ( )
CoroutineHandle
ˆˆ) 8
handle
ˆˆ9 ?
)
ˆˆ? @
{
˜˜ 	
if
¯¯ 
(
¯¯ 
!
¯¯ 
_waitingTriggers
¯¯ !
.
¯¯! "
ContainsKey
¯¯" -
(
¯¯- .
handle
¯¯. 4
)
¯¯4 5
)
¯¯5 6
return
¯¯7 =
;
¯¯= >
var
˙˙ 
	tasksEnum
˙˙ 
=
˙˙ 
_waitingTriggers
˙˙ ,
[
˙˙, -
handle
˙˙- 3
]
˙˙3 4
.
˙˙4 5
GetEnumerator
˙˙5 B
(
˙˙B C
)
˙˙C D
;
˙˙D E
_waitingTriggers
˚˚ 
.
˚˚ 
Remove
˚˚ #
(
˚˚# $
handle
˚˚$ *
)
˚˚* +
;
˚˚+ ,
while
˝˝ 
(
˝˝ 
	tasksEnum
˝˝ 
.
˝˝ 
MoveNext
˝˝ %
(
˝˝% &
)
˝˝& '
)
˝˝' (
{
˛˛ 
if
ˇˇ 
(
ˇˇ 
_handleToIndex
ˇˇ "
.
ˇˇ" #
ContainsKey
ˇˇ# .
(
ˇˇ. /
	tasksEnum
ˇˇ/ 8
.
ˇˇ8 9
Current
ˇˇ9 @
)
ˇˇ@ A
&&
ˇˇB D
!
ˇˇE F#
HandleIsInWaitingList
ˇˇF [
(
ˇˇ[ \
	tasksEnum
ˇˇ\ e
.
ˇˇe f
Current
ˇˇf m
)
ˇˇm n
)
ˇˇn o
{
ÄÄ 
SetHeld
ÅÅ 
(
ÅÅ 
_handleToIndex
ÅÅ *
[
ÅÅ* +
	tasksEnum
ÅÅ+ 4
.
ÅÅ4 5
Current
ÅÅ5 <
]
ÅÅ< =
,
ÅÅ= >
false
ÅÅ? D
)
ÅÅD E
;
ÅÅE F
_allWaiting
ÇÇ 
.
ÇÇ  
Remove
ÇÇ  &
(
ÇÇ& '
	tasksEnum
ÇÇ' 0
.
ÇÇ0 1
Current
ÇÇ1 8
)
ÇÇ8 9
;
ÇÇ9 :
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
private
áá 
bool
áá #
HandleIsInWaitingList
áá *
(
áá* +
CoroutineHandle
áá+ :
handle
áá; A
)
ááA B
{
àà 	
var
ââ 
triggersEnum
ââ 
=
ââ 
_waitingTriggers
ââ /
.
ââ/ 0
GetEnumerator
ââ0 =
(
ââ= >
)
ââ> ?
;
ââ? @
while
ää 
(
ää 
triggersEnum
ää 
.
ää  
MoveNext
ää  (
(
ää( )
)
ää) *
)
ää* +
if
ãã 
(
ãã 
triggersEnum
ãã  
.
ãã  !
Current
ãã! (
.
ãã( )
Value
ãã) .
.
ãã. /
Contains
ãã/ 7
(
ãã7 8
handle
ãã8 >
)
ãã> ?
)
ãã? @
return
åå 
true
åå 
;
åå  
return
éé 
false
éé 
;
éé 
}
èè 	
private
ëë 
static
ëë 
IEnumerator
ëë "
<
ëë" #
float
ëë# (
>
ëë( )$
ReturnTmpRefForRepFunc
ëë* @
(
ëë@ A
IEnumerator
ëëA L
<
ëëL M
float
ëëM R
>
ëëR S
coptr
ëëT Y
,
ëëY Z
CoroutineHandle
ëë[ j
handle
ëëk q
)
ëëq r
{
íí 	
return
ìì 
_tmpRef
ìì 
as
ìì 
IEnumerator
ìì )
<
ìì) *
float
ìì* /
>
ìì/ 0
;
ìì0 1
}
îî 	
public
ªª 
static
ªª 
float
ªª 
WaitUntilDone
ªª )
(
ªª) *
AsyncOperation
ªª* 8
	operation
ªª9 B
)
ªªB C
{
ºº 	
if
ΩΩ 
(
ΩΩ 
	operation
ΩΩ 
==
ΩΩ 
null
ΩΩ !
||
ΩΩ" $
	operation
ΩΩ% .
.
ΩΩ. /
isDone
ΩΩ/ 5
)
ΩΩ5 6
return
ΩΩ7 =
float
ΩΩ> C
.
ΩΩC D
NaN
ΩΩD G
;
ΩΩG H
CoroutineHandle
øø 
handle
øø "
=
øø# $
CurrentCoroutine
øø% 5
;
øø5 6
Timing
¿¿ 
inst
¿¿ 
=
¿¿ 
GetInstance
¿¿ %
(
¿¿% &
CurrentCoroutine
¿¿& 6
.
¿¿6 7
Key
¿¿7 :
)
¿¿: ;
;
¿¿; <
if
¡¡ 
(
¡¡ 
inst
¡¡ 
==
¡¡ 
null
¡¡ 
)
¡¡ 
return
¡¡ $
float
¡¡% *
.
¡¡* +
NaN
¡¡+ .
;
¡¡. /
_tmpRef
√√ 
=
√√ 
_StartWhenDone
√√ $
(
√√$ %
	operation
√√% .
,
√√. /
inst
√√0 4
.
√√4 5
CoindexPeek
√√5 @
(
√√@ A
inst
√√A E
.
√√E F
_handleToIndex
√√F T
[
√√T U
handle
√√U [
]
√√[ \
)
√√\ ]
)
√√] ^
;
√√^ _!
ReplacementFunction
ƒƒ 
=
ƒƒ  !$
ReturnTmpRefForRepFunc
ƒƒ" 8
;
ƒƒ8 9
return
≈≈ 
float
≈≈ 
.
≈≈ 
NaN
≈≈ 
;
≈≈ 
}
∆∆ 	
private
»» 
static
»» 
IEnumerator
»» "
<
»»" #
float
»»# (
>
»»( )
_StartWhenDone
»»* 8
(
»»8 9
AsyncOperation
»»9 G
	operation
»»H Q
,
»»Q R
IEnumerator
»»S ^
<
»»^ _
float
»»_ d
>
»»d e

pausedProc
»»f p
)
»»p q
{
…… 	
while
   
(
   
!
   
	operation
   
.
   
isDone
   $
)
  $ %
yield
ÀÀ 
return
ÀÀ 
WaitForOneFrame
ÀÀ ,
;
ÀÀ, -
_tmpRef
ÕÕ 
=
ÕÕ 

pausedProc
ÕÕ  
;
ÕÕ  !!
ReplacementFunction
ŒŒ 
=
ŒŒ  !$
ReturnTmpRefForRepFunc
ŒŒ" 8
;
ŒŒ8 9
yield
œœ 
return
œœ 
float
œœ 
.
œœ 
NaN
œœ "
;
œœ" #
}
–– 	
public
◊◊ 
static
◊◊ 
float
◊◊ 
WaitUntilDone
◊◊ )
(
◊◊) *$
CustomYieldInstruction
◊◊* @
	operation
◊◊A J
)
◊◊J K
{
ÿÿ 	
if
ŸŸ 
(
ŸŸ 
	operation
ŸŸ 
==
ŸŸ 
null
ŸŸ !
||
ŸŸ" $
!
ŸŸ% &
	operation
ŸŸ& /
.
ŸŸ/ 0
keepWaiting
ŸŸ0 ;
)
ŸŸ; <
return
ŸŸ= C
float
ŸŸD I
.
ŸŸI J
NaN
ŸŸJ M
;
ŸŸM N
CoroutineHandle
€€ 
handle
€€ "
=
€€# $
CurrentCoroutine
€€% 5
;
€€5 6
Timing
‹‹ 
inst
‹‹ 
=
‹‹ 
GetInstance
‹‹ %
(
‹‹% &
CurrentCoroutine
‹‹& 6
.
‹‹6 7
Key
‹‹7 :
)
‹‹: ;
;
‹‹; <
if
›› 
(
›› 
inst
›› 
==
›› 
null
›› 
)
›› 
return
›› $
float
››% *
.
››* +
NaN
››+ .
;
››. /
_tmpRef
ﬂﬂ 
=
ﬂﬂ 
_StartWhenDone
ﬂﬂ $
(
ﬂﬂ$ %
	operation
ﬂﬂ% .
,
ﬂﬂ. /
inst
ﬂﬂ0 4
.
ﬂﬂ4 5
CoindexPeek
ﬂﬂ5 @
(
ﬂﬂ@ A
inst
ﬂﬂA E
.
ﬂﬂE F
_handleToIndex
ﬂﬂF T
[
ﬂﬂT U
handle
ﬂﬂU [
]
ﬂﬂ[ \
)
ﬂﬂ\ ]
)
ﬂﬂ] ^
;
ﬂﬂ^ _!
ReplacementFunction
‡‡ 
=
‡‡  !$
ReturnTmpRefForRepFunc
‡‡" 8
;
‡‡8 9
return
·· 
float
·· 
.
·· 
NaN
·· 
;
·· 
}
‚‚ 	
private
‰‰ 
static
‰‰ 
IEnumerator
‰‰ "
<
‰‰" #
float
‰‰# (
>
‰‰( )
_StartWhenDone
‰‰* 8
(
‰‰8 9$
CustomYieldInstruction
‰‰9 O
	operation
‰‰P Y
,
‰‰Y Z
IEnumerator
‰‰[ f
<
‰‰f g
float
‰‰g l
>
‰‰l m

pausedProc
‰‰n x
)
‰‰x y
{
ÂÂ 	
while
ÊÊ 
(
ÊÊ 
	operation
ÊÊ 
.
ÊÊ 
keepWaiting
ÊÊ (
)
ÊÊ( )
yield
ÁÁ 
return
ÁÁ 
WaitForOneFrame
ÁÁ ,
;
ÁÁ, -
_tmpRef
ÈÈ 
=
ÈÈ 

pausedProc
ÈÈ  
;
ÈÈ  !!
ReplacementFunction
ÍÍ 
=
ÍÍ  !$
ReturnTmpRefForRepFunc
ÍÍ" 8
;
ÍÍ8 9
yield
ÎÎ 
return
ÎÎ 
float
ÎÎ 
.
ÎÎ 
NaN
ÎÎ "
;
ÎÎ" #
}
ÏÏ 	
public
ÙÙ 
bool
ÙÙ 
LockCoroutine
ÙÙ !
(
ÙÙ! "
CoroutineHandle
ÙÙ" 1
	coroutine
ÙÙ2 ;
,
ÙÙ; <
CoroutineHandle
ÙÙ= L
key
ÙÙM P
)
ÙÙP Q
{
ıı 	
if
ˆˆ 
(
ˆˆ 
	coroutine
ˆˆ 
.
ˆˆ 
Key
ˆˆ 
!=
ˆˆ  
_instanceID
ˆˆ! ,
||
ˆˆ- /
key
ˆˆ0 3
==
ˆˆ4 6
new
ˆˆ7 :
CoroutineHandle
ˆˆ; J
(
ˆˆJ K
)
ˆˆK L
||
ˆˆM O
key
ˆˆP S
.
ˆˆS T
Key
ˆˆT W
!=
ˆˆX Z
$num
ˆˆ[ \
)
ˆˆ\ ]
return
˜˜ 
false
˜˜ 
;
˜˜ 
if
˘˘ 
(
˘˘ 
!
˘˘ 
_waitingTriggers
˘˘ !
.
˘˘! "
ContainsKey
˘˘" -
(
˘˘- .
key
˘˘. 1
)
˘˘1 2
)
˘˘2 3
_waitingTriggers
˙˙  
.
˙˙  !
Add
˙˙! $
(
˙˙$ %
key
˙˙% (
,
˙˙( )
new
˙˙* -
HashSet
˙˙. 5
<
˙˙5 6
CoroutineHandle
˙˙6 E
>
˙˙E F
{
˙˙G H
	coroutine
˙˙I R
}
˙˙S T
)
˙˙T U
;
˙˙U V
else
˚˚ 
_waitingTriggers
¸¸  
[
¸¸  !
key
¸¸! $
]
¸¸$ %
.
¸¸% &
Add
¸¸& )
(
¸¸) *
	coroutine
¸¸* 3
)
¸¸3 4
;
¸¸4 5
_allWaiting
˛˛ 
.
˛˛ 
Add
˛˛ 
(
˛˛ 
	coroutine
˛˛ %
)
˛˛% &
;
˛˛& '
SetHeld
ÄÄ 
(
ÄÄ 
_handleToIndex
ÄÄ "
[
ÄÄ" #
	coroutine
ÄÄ# ,
]
ÄÄ, -
,
ÄÄ- .
true
ÄÄ/ 3
)
ÄÄ3 4
;
ÄÄ4 5
return
ÇÇ 
true
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
public
ãã 
bool
ãã 
UnlockCoroutine
ãã #
(
ãã# $
CoroutineHandle
ãã$ 3
	coroutine
ãã4 =
,
ãã= >
CoroutineHandle
ãã? N
key
ããO R
)
ããR S
{
åå 	
if
çç 
(
çç 
	coroutine
çç 
.
çç 
Key
çç 
!=
çç  
_instanceID
çç! ,
||
çç- /
key
çç0 3
==
çç4 6
new
çç7 :
CoroutineHandle
çç; J
(
ççJ K
)
ççK L
||
ççM O
!
éé 
_handleToIndex
éé 
.
éé  
ContainsKey
éé  +
(
éé+ ,
	coroutine
éé, 5
)
éé5 6
||
éé7 9
!
éé: ;
_waitingTriggers
éé; K
.
ééK L
ContainsKey
ééL W
(
ééW X
key
ééX [
)
éé[ \
)
éé\ ]
return
èè 
false
èè 
;
èè 
if
ëë 
(
ëë 
_waitingTriggers
ëë  
[
ëë  !
key
ëë! $
]
ëë$ %
.
ëë% &
Count
ëë& +
==
ëë, .
$num
ëë/ 0
)
ëë0 1
_waitingTriggers
íí  
.
íí  !
Remove
íí! '
(
íí' (
key
íí( +
)
íí+ ,
;
íí, -
else
ìì 
_waitingTriggers
îî  
[
îî  !
key
îî! $
]
îî$ %
.
îî% &
Remove
îî& ,
(
îî, -
	coroutine
îî- 6
)
îî6 7
;
îî7 8
if
ññ 
(
ññ 
!
ññ #
HandleIsInWaitingList
ññ &
(
ññ& '
	coroutine
ññ' 0
)
ññ0 1
)
ññ1 2
{
óó 
SetHeld
òò 
(
òò 
_handleToIndex
òò &
[
òò& '
	coroutine
òò' 0
]
òò0 1
,
òò1 2
false
òò3 8
)
òò8 9
;
òò9 :
_allWaiting
ôô 
.
ôô 
Remove
ôô "
(
ôô" #
	coroutine
ôô# ,
)
ôô, -
;
ôô- .
}
öö 
return
úú 
true
úú 
;
úú 
}
ùù 	
public
•• 
static
•• 
CoroutineHandle
•• %
CallDelayed
••& 1
(
••1 2
float
••2 7
delay
••8 =
,
••= >
System
••? E
.
••E F
Action
••F L
action
••M S
)
••S T
{
¶¶ 	
return
ßß 
action
ßß 
==
ßß 
null
ßß !
?
ßß" #
new
ßß$ '
CoroutineHandle
ßß( 7
(
ßß7 8
)
ßß8 9
:
ßß: ;
RunCoroutine
ßß< H
(
ßßH I
Instance
ßßI Q
.
ßßQ R
_DelayedCall
ßßR ^
(
ßß^ _
delay
ßß_ d
,
ßßd e
action
ßßf l
,
ßßl m
null
ßßn r
)
ßßr s
)
ßßs t
;
ßßt u
}
®® 	
public
∞∞ 
CoroutineHandle
∞∞ #
CallDelayedOnInstance
∞∞ 4
(
∞∞4 5
float
∞∞5 :
delay
∞∞; @
,
∞∞@ A
System
∞∞B H
.
∞∞H I
Action
∞∞I O
action
∞∞P V
)
∞∞V W
{
±± 	
return
≤≤ 
action
≤≤ 
==
≤≤ 
null
≤≤ !
?
≤≤" #
new
≤≤$ '
CoroutineHandle
≤≤( 7
(
≤≤7 8
)
≤≤8 9
:
≤≤: ;$
RunCoroutineOnInstance
≤≤< R
(
≤≤R S
_DelayedCall
≤≤S _
(
≤≤_ `
delay
≤≤` e
,
≤≤e f
action
≤≤g m
,
≤≤m n
null
≤≤o s
)
≤≤s t
)
≤≤t u
;
≤≤u v
}
≥≥ 	
public
ºº 
static
ºº 
CoroutineHandle
ºº %
CallDelayed
ºº& 1
(
ºº1 2
float
ºº2 7
delay
ºº8 =
,
ºº= >
System
ºº? E
.
ººE F
Action
ººF L
action
ººM S
,
ººS T

GameObject
ººU _

cancelWith
ºº` j
)
ººj k
{
ΩΩ 	
return
ææ 
action
ææ 
==
ææ 
null
ææ !
?
ææ" #
new
ææ$ '
CoroutineHandle
ææ( 7
(
ææ7 8
)
ææ8 9
:
ææ: ;
RunCoroutine
ææ< H
(
ææH I
Instance
ææI Q
.
ææQ R
_DelayedCall
ææR ^
(
ææ^ _
delay
ææ_ d
,
ææd e
action
ææf l
,
ææl m

cancelWith
ææn x
)
ææx y
)
ææy z
;
ææz {
}
øø 	
public
»» 
CoroutineHandle
»» #
CallDelayedOnInstance
»» 4
(
»»4 5
float
»»5 :
delay
»»; @
,
»»@ A
System
»»B H
.
»»H I
Action
»»I O
action
»»P V
,
»»V W

GameObject
»»X b

cancelWith
»»c m
)
»»m n
{
…… 	
return
   
action
   
==
   
null
   !
?
  " #
new
  $ '
CoroutineHandle
  ( 7
(
  7 8
)
  8 9
:
  : ;$
RunCoroutineOnInstance
  < R
(
  R S
_DelayedCall
  S _
(
  _ `
delay
  ` e
,
  e f
action
  g m
,
  m n

cancelWith
  o y
)
  y z
)
  z {
;
  { |
}
ÀÀ 	
public
‘‘ 
static
‘‘ 
CoroutineHandle
‘‘ %
CallDelayed
‘‘& 1
(
‘‘1 2
float
‘‘2 7
delay
‘‘8 =
,
‘‘= >
Segment
‘‘? F
segment
‘‘G N
,
‘‘N O
System
‘‘P V
.
‘‘V W
Action
‘‘W ]
action
‘‘^ d
)
‘‘d e
{
’’ 	
return
÷÷ 
action
÷÷ 
==
÷÷ 
null
÷÷ !
?
÷÷" #
new
÷÷$ '
CoroutineHandle
÷÷( 7
(
÷÷7 8
)
÷÷8 9
:
÷÷: ;
RunCoroutine
÷÷< H
(
÷÷H I
Instance
÷÷I Q
.
÷÷Q R
_DelayedCall
÷÷R ^
(
÷÷^ _
delay
÷÷_ d
,
÷÷d e
action
÷÷f l
,
÷÷l m
null
÷÷n r
)
÷÷r s
,
÷÷s t
segment
÷÷u |
)
÷÷| }
;
÷÷} ~
}
◊◊ 	
public
‡‡ 
CoroutineHandle
‡‡ #
CallDelayedOnInstance
‡‡ 4
(
‡‡4 5
float
‡‡5 :
delay
‡‡; @
,
‡‡@ A
Segment
‡‡B I
segment
‡‡J Q
,
‡‡Q R
System
‡‡S Y
.
‡‡Y Z
Action
‡‡Z `
action
‡‡a g
)
‡‡g h
{
·· 	
return
‚‚ 
action
‚‚ 
==
‚‚ 
null
‚‚ !
?
‚‚" #
new
‚‚$ '
CoroutineHandle
‚‚( 7
(
‚‚7 8
)
‚‚8 9
:
‚‚: ;$
RunCoroutineOnInstance
‚‚< R
(
‚‚R S
_DelayedCall
‚‚S _
(
‚‚_ `
delay
‚‚` e
,
‚‚e f
action
‚‚g m
,
‚‚m n
null
‚‚o s
)
‚‚s t
,
‚‚t u
segment
‚‚v }
)
‚‚} ~
;
‚‚~ 
}
„„ 	
public
ÓÓ 
static
ÓÓ 
CoroutineHandle
ÓÓ %
CallDelayed
ÓÓ& 1
(
ÓÓ1 2
float
ÓÓ2 7
delay
ÓÓ8 =
,
ÓÓ= >
Segment
ÓÓ? F
segment
ÓÓG N
,
ÓÓN O
System
ÓÓP V
.
ÓÓV W
Action
ÓÓW ]
action
ÓÓ^ d
,
ÓÓd e

GameObject
ÓÓf p

gameObject
ÓÓq {
)
ÓÓ{ |
{
ÔÔ 	
return
 
action
 
==
 
null
 !
?
" #
new
$ '
CoroutineHandle
( 7
(
7 8
)
8 9
:
: ;
RunCoroutine
< H
(
H I
Instance
I Q
.
Q R
_DelayedCall
R ^
(
^ _
delay
_ d
,
d e
action
f l
,
l m

gameObject
n x
)
x y
,
y z
segment{ Ç
)Ç É
;É Ñ
}
ÒÒ 	
public
¸¸ 
CoroutineHandle
¸¸ #
CallDelayedOnInstance
¸¸ 4
(
¸¸4 5
float
¸¸5 :
delay
¸¸; @
,
¸¸@ A
Segment
¸¸B I
segment
¸¸J Q
,
¸¸Q R
System
¸¸S Y
.
¸¸Y Z
Action
¸¸Z `
action
¸¸a g
,
¸¸g h

GameObject
¸¸i s

gameObject
¸¸t ~
)
¸¸~ 
{
˝˝ 	
return
˛˛ 
action
˛˛ 
==
˛˛ 
null
˛˛ !
?
˛˛" #
new
˛˛$ '
CoroutineHandle
˛˛( 7
(
˛˛7 8
)
˛˛8 9
:
˛˛: ;$
RunCoroutineOnInstance
˛˛< R
(
˛˛R S
_DelayedCall
˛˛S _
(
˛˛_ `
delay
˛˛` e
,
˛˛e f
action
˛˛g m
,
˛˛m n

gameObject
˛˛o y
)
˛˛y z
,
˛˛z {
segment˛˛| É
)˛˛É Ñ
;˛˛Ñ Ö
}
ˇˇ 	
private
ÅÅ 
IEnumerator
ÅÅ 
<
ÅÅ 
float
ÅÅ !
>
ÅÅ! "
_DelayedCall
ÅÅ# /
(
ÅÅ/ 0
float
ÅÅ0 5
delay
ÅÅ6 ;
,
ÅÅ; <
System
ÅÅ= C
.
ÅÅC D
Action
ÅÅD J
action
ÅÅK Q
,
ÅÅQ R

GameObject
ÅÅS ]

cancelWith
ÅÅ^ h
)
ÅÅh i
{
ÇÇ 	
yield
ÉÉ 
return
ÉÉ &
WaitForSecondsOnInstance
ÉÉ 1
(
ÉÉ1 2
delay
ÉÉ2 7
)
ÉÉ7 8
;
ÉÉ8 9
if
ÖÖ 
(
ÖÖ 
ReferenceEquals
ÖÖ 
(
ÖÖ 

cancelWith
ÖÖ )
,
ÖÖ) *
null
ÖÖ+ /
)
ÖÖ/ 0
||
ÖÖ1 3

cancelWith
ÖÖ4 >
!=
ÖÖ? A
null
ÖÖB F
)
ÖÖF G
action
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 	
public
ëë 
static
ëë 
CoroutineHandle
ëë %
CallPeriodically
ëë& 6
(
ëë6 7
float
ëë7 <
	timeframe
ëë= F
,
ëëF G
float
ëëH M
period
ëëN T
,
ëëT U
System
ëëV \
.
ëë\ ]
Action
ëë] c
action
ëëd j
,
ëëj k
System
ëël r
.
ëër s
Action
ëës y
onDoneëëz Ä
=ëëÅ Ç
nullëëÉ á
)ëëá à
{
íí 	
return
ìì 
action
ìì 
==
ìì 
null
ìì !
?
ìì" #
new
ìì$ '
CoroutineHandle
ìì( 7
(
ìì7 8
)
ìì8 9
:
ìì: ;
RunCoroutine
ìì< H
(
ììH I
Instance
ììI Q
.
ììQ R
_CallContinuously
ììR c
(
ììc d
	timeframe
ììd m
,
ììm n
period
ììo u
,
ììu v
action
ììw }
,
ìì} ~
onDoneìì Ö
)ììÖ Ü
,ììÜ á
Segmentììà è
.ììè ê
Updateììê ñ
)ììñ ó
;ììó ò
}
îî 	
public
ûû 
CoroutineHandle
ûû (
CallPeriodicallyOnInstance
ûû 9
(
ûû9 :
float
ûû: ?
	timeframe
ûû@ I
,
ûûI J
float
ûûK P
period
ûûQ W
,
ûûW X
System
ûûY _
.
ûû_ `
Action
ûû` f
action
ûûg m
,
ûûm n
System
ûûo u
.
ûûu v
Action
ûûv |
onDoneûû} É
=ûûÑ Ö
nullûûÜ ä
)ûûä ã
{
üü 	
return
†† 
action
†† 
==
†† 
null
†† !
?
††" #
new
††$ '
CoroutineHandle
††( 7
(
††7 8
)
††8 9
:
††: ;$
RunCoroutineOnInstance
††< R
(
††R S
_CallContinuously
††S d
(
††d e
	timeframe
††e n
,
††n o
period
††p v
,
††v w
action
††x ~
,
††~ 
onDone††Ä Ü
)††Ü á
,††á à
Segment††â ê
.††ê ë
Update††ë ó
)††ó ò
;††ò ô
}
°° 	
public
¨¨ 
static
¨¨ 
CoroutineHandle
¨¨ %
CallPeriodically
¨¨& 6
(
¨¨6 7
float
¨¨7 <
	timeframe
¨¨= F
,
¨¨F G
float
¨¨H M
period
¨¨N T
,
¨¨T U
System
¨¨V \
.
¨¨\ ]
Action
¨¨] c
action
¨¨d j
,
¨¨j k
Segment
¨¨l s
segment
¨¨t {
,
¨¨{ |
System¨¨} É
.¨¨É Ñ
Action¨¨Ñ ä
onDone¨¨ã ë
=¨¨í ì
null¨¨î ò
)¨¨ò ô
{
≠≠ 	
return
ÆÆ 
action
ÆÆ 
==
ÆÆ 
null
ÆÆ !
?
ÆÆ" #
new
ÆÆ$ '
CoroutineHandle
ÆÆ( 7
(
ÆÆ7 8
)
ÆÆ8 9
:
ÆÆ: ;
RunCoroutine
ÆÆ< H
(
ÆÆH I
Instance
ÆÆI Q
.
ÆÆQ R
_CallContinuously
ÆÆR c
(
ÆÆc d
	timeframe
ÆÆd m
,
ÆÆm n
period
ÆÆo u
,
ÆÆu v
action
ÆÆw }
,
ÆÆ} ~
onDoneÆÆ Ö
)ÆÆÖ Ü
,ÆÆÜ á
segmentÆÆà è
)ÆÆè ê
;ÆÆê ë
}
ØØ 	
public
∫∫ 
CoroutineHandle
∫∫ (
CallPeriodicallyOnInstance
∫∫ 9
(
∫∫9 :
float
∫∫: ?
	timeframe
∫∫@ I
,
∫∫I J
float
∫∫K P
period
∫∫Q W
,
∫∫W X
System
∫∫Y _
.
∫∫_ `
Action
∫∫` f
action
∫∫g m
,
∫∫m n
Segment
∫∫o v
segment
∫∫w ~
,
∫∫~ 
System∫∫Ä Ü
.∫∫Ü á
Action∫∫á ç
onDone∫∫é î
=∫∫ï ñ
null∫∫ó õ
)∫∫õ ú
{
ªª 	
return
ºº 
action
ºº 
==
ºº 
null
ºº !
?
ºº" #
new
ºº$ '
CoroutineHandle
ºº( 7
(
ºº7 8
)
ºº8 9
:
ºº: ;$
RunCoroutineOnInstance
ºº< R
(
ººR S
_CallContinuously
ººS d
(
ººd e
	timeframe
ººe n
,
ººn o
period
ººp v
,
ººv w
action
ººx ~
,
ºº~ 
onDoneººÄ Ü
)ººÜ á
,ººá à
segmentººâ ê
)ººê ë
;ººë í
}
ΩΩ 	
public
∆∆ 
static
∆∆ 
CoroutineHandle
∆∆ %
CallContinuously
∆∆& 6
(
∆∆6 7
float
∆∆7 <
	timeframe
∆∆= F
,
∆∆F G
System
∆∆H N
.
∆∆N O
Action
∆∆O U
action
∆∆V \
,
∆∆\ ]
System
∆∆^ d
.
∆∆d e
Action
∆∆e k
onDone
∆∆l r
=
∆∆s t
null
∆∆u y
)
∆∆y z
{
«« 	
return
»» 
action
»» 
==
»» 
null
»» !
?
»»" #
new
»»$ '
CoroutineHandle
»»( 7
(
»»7 8
)
»»8 9
:
»»: ;
RunCoroutine
»»< H
(
»»H I
Instance
»»I Q
.
»»Q R
_CallContinuously
»»R c
(
»»c d
	timeframe
»»d m
,
»»m n
$num
»»o q
,
»»q r
action
»»s y
,
»»y z
onDone»»{ Å
)»»Å Ç
,»»Ç É
Segment»»Ñ ã
.»»ã å
Update»»å í
)»»í ì
;»»ì î
}
…… 	
public
““ 
CoroutineHandle
““ (
CallContinuouslyOnInstance
““ 9
(
““9 :
float
““: ?
	timeframe
““@ I
,
““I J
System
““K Q
.
““Q R
Action
““R X
action
““Y _
,
““_ `
System
““a g
.
““g h
Action
““h n
onDone
““o u
=
““v w
null
““x |
)
““| }
{
”” 	
return
‘‘ 
action
‘‘ 
==
‘‘ 
null
‘‘ !
?
‘‘" #
new
‘‘$ '
CoroutineHandle
‘‘( 7
(
‘‘7 8
)
‘‘8 9
:
‘‘: ;$
RunCoroutineOnInstance
‘‘< R
(
‘‘R S
_CallContinuously
‘‘S d
(
‘‘d e
	timeframe
‘‘e n
,
‘‘n o
$num
‘‘p r
,
‘‘r s
action
‘‘t z
,
‘‘z {
onDone‘‘| Ç
)‘‘Ç É
,‘‘É Ñ
Segment‘‘Ö å
.‘‘å ç
Update‘‘ç ì
)‘‘ì î
;‘‘î ï
}
’’ 	
public
ﬂﬂ 
static
ﬂﬂ 
CoroutineHandle
ﬂﬂ %
CallContinuously
ﬂﬂ& 6
(
ﬂﬂ6 7
float
ﬂﬂ7 <
	timeframe
ﬂﬂ= F
,
ﬂﬂF G
System
ﬂﬂH N
.
ﬂﬂN O
Action
ﬂﬂO U
action
ﬂﬂV \
,
ﬂﬂ\ ]
Segment
ﬂﬂ^ e
timing
ﬂﬂf l
,
ﬂﬂl m
System
ﬂﬂn t
.
ﬂﬂt u
Action
ﬂﬂu {
onDoneﬂﬂ| Ç
=ﬂﬂÉ Ñ
nullﬂﬂÖ â
)ﬂﬂâ ä
{
‡‡ 	
return
·· 
action
·· 
==
·· 
null
·· !
?
··" #
new
··$ '
CoroutineHandle
··( 7
(
··7 8
)
··8 9
:
··: ;
RunCoroutine
··< H
(
··H I
Instance
··I Q
.
··Q R
_CallContinuously
··R c
(
··c d
	timeframe
··d m
,
··m n
$num
··o q
,
··q r
action
··s y
,
··y z
onDone··{ Å
)··Å Ç
,··Ç É
timing··Ñ ä
)··ä ã
;··ã å
}
‚‚ 	
public
ÏÏ 
CoroutineHandle
ÏÏ (
CallContinuouslyOnInstance
ÏÏ 9
(
ÏÏ9 :
float
ÏÏ: ?
	timeframe
ÏÏ@ I
,
ÏÏI J
System
ÏÏK Q
.
ÏÏQ R
Action
ÏÏR X
action
ÏÏY _
,
ÏÏ_ `
Segment
ÏÏa h
timing
ÏÏi o
,
ÏÏo p
System
ÏÏq w
.
ÏÏw x
Action
ÏÏx ~
onDoneÏÏ Ö
=ÏÏÜ á
nullÏÏà å
)ÏÏå ç
{
ÌÌ 	
return
ÓÓ 
action
ÓÓ 
==
ÓÓ 
null
ÓÓ !
?
ÓÓ" #
new
ÓÓ$ '
CoroutineHandle
ÓÓ( 7
(
ÓÓ7 8
)
ÓÓ8 9
:
ÓÓ: ;$
RunCoroutineOnInstance
ÓÓ< R
(
ÓÓR S
_CallContinuously
ÓÓS d
(
ÓÓd e
	timeframe
ÓÓe n
,
ÓÓn o
$num
ÓÓp r
,
ÓÓr s
action
ÓÓt z
,
ÓÓz {
onDoneÓÓ| Ç
)ÓÓÇ É
,ÓÓÉ Ñ
timingÓÓÖ ã
)ÓÓã å
;ÓÓå ç
}
ÔÔ 	
private
ÒÒ 
IEnumerator
ÒÒ 
<
ÒÒ 
float
ÒÒ !
>
ÒÒ! "
_CallContinuously
ÒÒ# 4
(
ÒÒ4 5
float
ÒÒ5 :
	timeframe
ÒÒ; D
,
ÒÒD E
float
ÒÒF K
period
ÒÒL R
,
ÒÒR S
System
ÒÒT Z
.
ÒÒZ [
Action
ÒÒ[ a
action
ÒÒb h
,
ÒÒh i
System
ÒÒj p
.
ÒÒp q
Action
ÒÒq w
onDone
ÒÒx ~
)
ÒÒ~ 
{
ÚÚ 	
double
ÛÛ 
	startTime
ÛÛ 
=
ÛÛ 
	localTime
ÛÛ (
;
ÛÛ( )
while
ÙÙ 
(
ÙÙ 
	localTime
ÙÙ 
<=
ÙÙ 
	startTime
ÙÙ  )
+
ÙÙ* +
	timeframe
ÙÙ, 5
)
ÙÙ5 6
{
ıı 
yield
ˆˆ 
return
ˆˆ &
WaitForSecondsOnInstance
ˆˆ 5
(
ˆˆ5 6
period
ˆˆ6 <
)
ˆˆ< =
;
ˆˆ= >
action
¯¯ 
(
¯¯ 
)
¯¯ 
;
¯¯ 
}
˘˘ 
if
˚˚ 
(
˚˚ 
onDone
˚˚ 
!=
˚˚ 
null
˚˚ 
)
˚˚ 
onDone
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
}
˝˝ 	
public
àà 
static
àà 
CoroutineHandle
àà %
CallPeriodically
àà& 6
<
àà6 7
T
àà7 8
>
àà8 9
(
ââ 
T
ââ 
	reference
ââ 
,
ââ 
float
ââ 
	timeframe
ââ  )
,
ââ) *
float
ââ+ 0
period
ââ1 7
,
ââ7 8
System
ââ9 ?
.
ââ? @
Action
ââ@ F
<
ââF G
T
ââG H
>
ââH I
action
ââJ P
,
ââP Q
System
ââR X
.
ââX Y
Action
ââY _
<
ââ_ `
T
ââ` a
>
ââa b
onDone
ââc i
=
ââj k
null
ââl p
)
ââp q
{
ää 	
return
ãã 
action
ãã 
==
ãã 
null
ãã !
?
ãã" #
new
ãã$ '
CoroutineHandle
ãã( 7
(
ãã7 8
)
ãã8 9
:
ãã: ;
RunCoroutine
åå 
(
åå 
Instance
åå %
.
åå% &
_CallContinuously
åå& 7
(
åå7 8
	reference
åå8 A
,
ååA B
	timeframe
ååC L
,
ååL M
period
ååN T
,
ååT U
action
ååV \
,
åå\ ]
onDone
åå^ d
)
ååd e
,
ååe f
Segment
ååg n
.
åån o
Update
ååo u
)
ååu v
;
ååv w
}
çç 	
public
òò 
CoroutineHandle
òò (
CallPeriodicallyOnInstance
òò 9
<
òò9 :
T
òò: ;
>
òò; <
(
ôô 
T
ôô 
	reference
ôô 
,
ôô 
float
ôô 
	timeframe
ôô  )
,
ôô) *
float
ôô+ 0
period
ôô1 7
,
ôô7 8
System
ôô9 ?
.
ôô? @
Action
ôô@ F
<
ôôF G
T
ôôG H
>
ôôH I
action
ôôJ P
,
ôôP Q
System
ôôR X
.
ôôX Y
Action
ôôY _
<
ôô_ `
T
ôô` a
>
ôôa b
onDone
ôôc i
=
ôôj k
null
ôôl p
)
ôôp q
{
öö 	
return
õõ 
action
õõ 
==
õõ 
null
õõ !
?
õõ" #
new
õõ$ '
CoroutineHandle
õõ( 7
(
õõ7 8
)
õõ8 9
:
õõ: ;$
RunCoroutineOnInstance
úú &
(
úú& '
_CallContinuously
úú' 8
(
úú8 9
	reference
úú9 B
,
úúB C
	timeframe
úúD M
,
úúM N
period
úúO U
,
úúU V
action
úúW ]
,
úú] ^
onDone
úú_ e
)
úúe f
,
úúf g
Segment
úúh o
.
úúo p
Update
úúp v
)
úúv w
;
úúw x
}
ùù 	
public
©© 
static
©© 
CoroutineHandle
©© %
CallPeriodically
©©& 6
<
©©6 7
T
©©7 8
>
©©8 9
(
©©9 :
T
©©: ;
	reference
©©< E
,
©©E F
float
©©G L
	timeframe
©©M V
,
©©V W
float
©©X ]
period
©©^ d
,
©©d e
System
©©f l
.
©©l m
Action
©©m s
<
©©s t
T
©©t u
>
©©u v
action
©©w }
,
©©} ~
Segment
™™ 
timing
™™ 
,
™™ 
System
™™ "
.
™™" #
Action
™™# )
<
™™) *
T
™™* +
>
™™+ ,
onDone
™™- 3
=
™™4 5
null
™™6 :
)
™™: ;
{
´´ 	
return
¨¨ 
action
¨¨ 
==
¨¨ 
null
¨¨ !
?
¨¨" #
new
¨¨$ '
CoroutineHandle
¨¨( 7
(
¨¨7 8
)
¨¨8 9
:
¨¨: ;
RunCoroutine
≠≠ 
(
≠≠ 
Instance
≠≠ %
.
≠≠% &
_CallContinuously
≠≠& 7
(
≠≠7 8
	reference
≠≠8 A
,
≠≠A B
	timeframe
≠≠C L
,
≠≠L M
period
≠≠N T
,
≠≠T U
action
≠≠V \
,
≠≠\ ]
onDone
≠≠^ d
)
≠≠d e
,
≠≠e f
timing
≠≠g m
)
≠≠m n
;
≠≠n o
}
ÆÆ 	
public
∫∫ 
CoroutineHandle
∫∫ (
CallPeriodicallyOnInstance
∫∫ 9
<
∫∫9 :
T
∫∫: ;
>
∫∫; <
(
∫∫< =
T
∫∫= >
	reference
∫∫? H
,
∫∫H I
float
∫∫J O
	timeframe
∫∫P Y
,
∫∫Y Z
float
∫∫[ `
period
∫∫a g
,
∫∫g h
System
∫∫i o
.
∫∫o p
Action
∫∫p v
<
∫∫v w
T
∫∫w x
>
∫∫x y
action∫∫z Ä
,∫∫Ä Å
Segment
ªª 
timing
ªª 
,
ªª 
System
ªª "
.
ªª" #
Action
ªª# )
<
ªª) *
T
ªª* +
>
ªª+ ,
onDone
ªª- 3
=
ªª4 5
null
ªª6 :
)
ªª: ;
{
ºº 	
return
ΩΩ 
action
ΩΩ 
==
ΩΩ 
null
ΩΩ !
?
ΩΩ" #
new
ΩΩ$ '
CoroutineHandle
ΩΩ( 7
(
ΩΩ7 8
)
ΩΩ8 9
:
ΩΩ: ;$
RunCoroutineOnInstance
ææ &
(
ææ& '
_CallContinuously
ææ' 8
(
ææ8 9
	reference
ææ9 B
,
ææB C
	timeframe
ææD M
,
ææM N
period
ææO U
,
ææU V
action
ææW ]
,
ææ] ^
onDone
ææ_ e
)
ææe f
,
ææf g
timing
ææh n
)
ææn o
;
ææo p
}
øø 	
public
…… 
static
…… 
CoroutineHandle
…… %
CallContinuously
……& 6
<
……6 7
T
……7 8
>
……8 9
(
……9 :
T
……: ;
	reference
……< E
,
……E F
float
……G L
	timeframe
……M V
,
……V W
System
……X ^
.
……^ _
Action
……_ e
<
……e f
T
……f g
>
……g h
action
……i o
,
……o p
System
……q w
.
……w x
Action
……x ~
<
……~ 
T…… Ä
>……Ä Å
onDone……Ç à
=……â ä
null……ã è
)……è ê
{
   	
return
ÀÀ 
action
ÀÀ 
==
ÀÀ 
null
ÀÀ !
?
ÀÀ" #
new
ÀÀ$ '
CoroutineHandle
ÀÀ( 7
(
ÀÀ7 8
)
ÀÀ8 9
:
ÀÀ: ;
RunCoroutine
ÃÃ 
(
ÃÃ 
Instance
ÃÃ %
.
ÃÃ% &
_CallContinuously
ÃÃ& 7
(
ÃÃ7 8
	reference
ÃÃ8 A
,
ÃÃA B
	timeframe
ÃÃC L
,
ÃÃL M
$num
ÃÃN P
,
ÃÃP Q
action
ÃÃR X
,
ÃÃX Y
onDone
ÃÃZ `
)
ÃÃ` a
,
ÃÃa b
Segment
ÃÃc j
.
ÃÃj k
Update
ÃÃk q
)
ÃÃq r
;
ÃÃr s
}
ÕÕ 	
public
◊◊ 
CoroutineHandle
◊◊ (
CallContinuouslyOnInstance
◊◊ 9
<
◊◊9 :
T
◊◊: ;
>
◊◊; <
(
◊◊< =
T
◊◊= >
	reference
◊◊? H
,
◊◊H I
float
◊◊J O
	timeframe
◊◊P Y
,
◊◊Y Z
System
◊◊[ a
.
◊◊a b
Action
◊◊b h
<
◊◊h i
T
◊◊i j
>
◊◊j k
action
◊◊l r
,
◊◊r s
System
◊◊t z
.
◊◊z {
Action◊◊{ Å
<◊◊Å Ç
T◊◊Ç É
>◊◊É Ñ
onDone◊◊Ö ã
=◊◊å ç
null◊◊é í
)◊◊í ì
{
ÿÿ 	
return
ŸŸ 
action
ŸŸ 
==
ŸŸ 
null
ŸŸ !
?
ŸŸ" #
new
ŸŸ$ '
CoroutineHandle
ŸŸ( 7
(
ŸŸ7 8
)
ŸŸ8 9
:
ŸŸ: ;$
RunCoroutineOnInstance
⁄⁄ &
(
⁄⁄& '
_CallContinuously
⁄⁄' 8
(
⁄⁄8 9
	reference
⁄⁄9 B
,
⁄⁄B C
	timeframe
⁄⁄D M
,
⁄⁄M N
$num
⁄⁄O Q
,
⁄⁄Q R
action
⁄⁄S Y
,
⁄⁄Y Z
onDone
⁄⁄[ a
)
⁄⁄a b
,
⁄⁄b c
Segment
⁄⁄d k
.
⁄⁄k l
Update
⁄⁄l r
)
⁄⁄r s
;
⁄⁄s t
}
€€ 	
public
ÊÊ 
static
ÊÊ 
CoroutineHandle
ÊÊ %
CallContinuously
ÊÊ& 6
<
ÊÊ6 7
T
ÊÊ7 8
>
ÊÊ8 9
(
ÊÊ9 :
T
ÊÊ: ;
	reference
ÊÊ< E
,
ÊÊE F
float
ÊÊG L
	timeframe
ÊÊM V
,
ÊÊV W
System
ÊÊX ^
.
ÊÊ^ _
Action
ÊÊ_ e
<
ÊÊe f
T
ÊÊf g
>
ÊÊg h
action
ÊÊi o
,
ÊÊo p
Segment
ÁÁ 
timing
ÁÁ 
,
ÁÁ 
System
ÁÁ "
.
ÁÁ" #
Action
ÁÁ# )
<
ÁÁ) *
T
ÁÁ* +
>
ÁÁ+ ,
onDone
ÁÁ- 3
=
ÁÁ4 5
null
ÁÁ6 :
)
ÁÁ: ;
{
ËË 	
return
ÈÈ 
action
ÈÈ 
==
ÈÈ 
null
ÈÈ !
?
ÈÈ" #
new
ÈÈ$ '
CoroutineHandle
ÈÈ( 7
(
ÈÈ7 8
)
ÈÈ8 9
:
ÈÈ: ;
RunCoroutine
ÍÍ 
(
ÍÍ 
Instance
ÍÍ %
.
ÍÍ% &
_CallContinuously
ÍÍ& 7
(
ÍÍ7 8
	reference
ÍÍ8 A
,
ÍÍA B
	timeframe
ÍÍC L
,
ÍÍL M
$num
ÍÍN P
,
ÍÍP Q
action
ÍÍR X
,
ÍÍX Y
onDone
ÍÍZ `
)
ÍÍ` a
,
ÍÍa b
timing
ÍÍc i
)
ÍÍi j
;
ÍÍj k
}
ÎÎ 	
public
ˆˆ 
CoroutineHandle
ˆˆ (
CallContinuouslyOnInstance
ˆˆ 9
<
ˆˆ9 :
T
ˆˆ: ;
>
ˆˆ; <
(
ˆˆ< =
T
ˆˆ= >
	reference
ˆˆ? H
,
ˆˆH I
float
ˆˆJ O
	timeframe
ˆˆP Y
,
ˆˆY Z
System
ˆˆ[ a
.
ˆˆa b
Action
ˆˆb h
<
ˆˆh i
T
ˆˆi j
>
ˆˆj k
action
ˆˆl r
,
ˆˆr s
Segment
˜˜ 
timing
˜˜ 
,
˜˜ 
System
˜˜ "
.
˜˜" #
Action
˜˜# )
<
˜˜) *
T
˜˜* +
>
˜˜+ ,
onDone
˜˜- 3
=
˜˜4 5
null
˜˜6 :
)
˜˜: ;
{
¯¯ 	
return
˘˘ 
action
˘˘ 
==
˘˘ 
null
˘˘ !
?
˘˘" #
new
˘˘$ '
CoroutineHandle
˘˘( 7
(
˘˘7 8
)
˘˘8 9
:
˘˘: ;$
RunCoroutineOnInstance
˙˙ &
(
˙˙& '
_CallContinuously
˙˙' 8
(
˙˙8 9
	reference
˙˙9 B
,
˙˙B C
	timeframe
˙˙D M
,
˙˙M N
$num
˙˙O Q
,
˙˙Q R
action
˙˙S Y
,
˙˙Y Z
onDone
˙˙[ a
)
˙˙a b
,
˙˙b c
timing
˙˙d j
)
˙˙j k
;
˙˙k l
}
˚˚ 	
private
˝˝ 
IEnumerator
˝˝ 
<
˝˝ 
float
˝˝ !
>
˝˝! "
_CallContinuously
˝˝# 4
<
˝˝4 5
T
˝˝5 6
>
˝˝6 7
(
˝˝7 8
T
˝˝8 9
	reference
˝˝: C
,
˝˝C D
float
˝˝E J
	timeframe
˝˝K T
,
˝˝T U
float
˝˝V [
period
˝˝\ b
,
˝˝b c
System
˛˛ 
.
˛˛ 
Action
˛˛ 
<
˛˛ 
T
˛˛ 
>
˛˛ 
action
˛˛ #
,
˛˛# $
System
˛˛% +
.
˛˛+ ,
Action
˛˛, 2
<
˛˛2 3
T
˛˛3 4
>
˛˛4 5
onDone
˛˛6 <
=
˛˛= >
null
˛˛? C
)
˛˛C D
{
ˇˇ 	
double
ÄÄ 
	startTime
ÄÄ 
=
ÄÄ 
	localTime
ÄÄ (
;
ÄÄ( )
while
ÅÅ 
(
ÅÅ 
	localTime
ÅÅ 
<=
ÅÅ 
	startTime
ÅÅ  )
+
ÅÅ* +
	timeframe
ÅÅ, 5
)
ÅÅ5 6
{
ÇÇ 
yield
ÉÉ 
return
ÉÉ &
WaitForSecondsOnInstance
ÉÉ 5
(
ÉÉ5 6
period
ÉÉ6 <
)
ÉÉ< =
;
ÉÉ= >
action
ÖÖ 
(
ÖÖ 
	reference
ÖÖ  
)
ÖÖ  !
;
ÖÖ! "
}
ÜÜ 
if
àà 
(
àà 
onDone
àà 
!=
àà 
null
àà 
)
àà 
onDone
ââ 
(
ââ 
	reference
ââ  
)
ââ  !
;
ââ! "
}
ää 	
private
åå 
struct
åå 
ProcessIndex
åå #
:
åå$ %
System
åå& ,
.
åå, -

IEquatable
åå- 7
<
åå7 8
ProcessIndex
åå8 D
>
ååD E
{
çç 	
public
éé 
Segment
éé 
seg
éé 
;
éé 
public
èè 
int
èè 
i
èè 
;
èè 
public
ëë 
bool
ëë 
Equals
ëë 
(
ëë 
ProcessIndex
ëë +
other
ëë, 1
)
ëë1 2
{
íí 
return
ìì 
seg
ìì 
==
ìì 
other
ìì #
.
ìì# $
seg
ìì$ '
&&
ìì( *
i
ìì+ ,
==
ìì- /
other
ìì0 5
.
ìì5 6
i
ìì6 7
;
ìì7 8
}
îî 
public
ññ 
override
ññ 
bool
ññ  
Equals
ññ! '
(
ññ' (
object
ññ( .
other
ññ/ 4
)
ññ4 5
{
óó 
if
òò 
(
òò 
other
òò 
is
òò 
ProcessIndex
òò )
)
òò) *
return
ôô 
Equals
ôô !
(
ôô! "
(
ôô" #
ProcessIndex
ôô# /
)
ôô/ 0
other
ôô0 5
)
ôô5 6
;
ôô6 7
return
öö 
false
öö 
;
öö 
}
õõ 
public
ùù 
static
ùù 
bool
ùù 
operator
ùù '
==
ùù( *
(
ùù* +
ProcessIndex
ùù+ 7
a
ùù8 9
,
ùù9 :
ProcessIndex
ùù; G
b
ùùH I
)
ùùI J
{
ûû 
return
üü 
a
üü 
.
üü 
seg
üü 
==
üü 
b
üü  !
.
üü! "
seg
üü" %
&&
üü& (
a
üü) *
.
üü* +
i
üü+ ,
==
üü- /
b
üü0 1
.
üü1 2
i
üü2 3
;
üü3 4
}
†† 
public
¢¢ 
static
¢¢ 
bool
¢¢ 
operator
¢¢ '
!=
¢¢( *
(
¢¢* +
ProcessIndex
¢¢+ 7
a
¢¢8 9
,
¢¢9 :
ProcessIndex
¢¢; G
b
¢¢H I
)
¢¢I J
{
££ 
return
§§ 
a
§§ 
.
§§ 
seg
§§ 
!=
§§ 
b
§§  !
.
§§! "
seg
§§" %
||
§§& (
a
§§) *
.
§§* +
i
§§+ ,
!=
§§- /
b
§§0 1
.
§§1 2
i
§§2 3
;
§§3 4
}
•• 
public
ßß 
override
ßß 
int
ßß 
GetHashCode
ßß  +
(
ßß+ ,
)
ßß, -
{
®® 
return
©© 
(
©© 
(
©© 
(
©© 
int
©© 
)
©© 
seg
©© !
-
©©" #
$num
©©$ %
)
©©% &
*
©©' (
(
©©) *
int
©©* -
.
©©- .
MaxValue
©©. 6
/
©©7 8
$num
©©9 :
)
©©: ;
)
©©; <
+
©©= >
i
©©? @
;
©©@ A
}
™™ 
}
´´ 	
[
≠≠ 	
System
≠≠	 
.
≠≠ 
Obsolete
≠≠ 
(
≠≠ 
$str
≠≠ N
,
≠≠N O
true
≠≠P T
)
≠≠T U
]
≠≠U V
public
ÆÆ 
new
ÆÆ 
	Coroutine
ÆÆ 
StartCoroutine
ÆÆ +
(
ÆÆ+ ,
System
ÆÆ, 2
.
ÆÆ2 3
Collections
ÆÆ3 >
.
ÆÆ> ?
IEnumerator
ÆÆ? J
routine
ÆÆK R
)
ÆÆR S
{
ÆÆT U
return
ÆÆV \
null
ÆÆ] a
;
ÆÆa b
}
ÆÆc d
[
∞∞ 	
System
∞∞	 
.
∞∞ 
Obsolete
∞∞ 
(
∞∞ 
$str
∞∞ N
,
∞∞N O
true
∞∞P T
)
∞∞T U
]
∞∞U V
public
±± 
new
±± 
	Coroutine
±± 
StartCoroutine
±± +
(
±±+ ,
string
±±, 2

methodName
±±3 =
,
±±= >
object
±±? E
value
±±F K
)
±±K L
{
±±M N
return
±±O U
null
±±V Z
;
±±Z [
}
±±\ ]
[
≥≥ 	
System
≥≥	 
.
≥≥ 
Obsolete
≥≥ 
(
≥≥ 
$str
≥≥ N
,
≥≥N O
true
≥≥P T
)
≥≥T U
]
≥≥U V
public
¥¥ 
new
¥¥ 
	Coroutine
¥¥ 
StartCoroutine
¥¥ +
(
¥¥+ ,
string
¥¥, 2

methodName
¥¥3 =
)
¥¥= >
{
¥¥? @
return
¥¥A G
null
¥¥H L
;
¥¥L M
}
¥¥N O
[
∂∂ 	
System
∂∂	 
.
∂∂ 
Obsolete
∂∂ 
(
∂∂ 
$str
∂∂ N
,
∂∂N O
true
∂∂P T
)
∂∂T U
]
∂∂U V
public
∑∑ 
new
∑∑ 
	Coroutine
∑∑ !
StartCoroutine_Auto
∑∑ 0
(
∑∑0 1
System
∑∑1 7
.
∑∑7 8
Collections
∑∑8 C
.
∑∑C D
IEnumerator
∑∑D O
routine
∑∑P W
)
∑∑W X
{
∑∑Y Z
return
∑∑[ a
null
∑∑b f
;
∑∑f g
}
∑∑h i
[
ππ 	
System
ππ	 
.
ππ 
Obsolete
ππ 
(
ππ 
$str
ππ P
,
ππP Q
true
ππR V
)
ππV W
]
ππW X
public
∫∫ 
new
∫∫ 
void
∫∫ 
StopCoroutine
∫∫ %
(
∫∫% &
string
∫∫& ,

methodName
∫∫- 7
)
∫∫7 8
{
∫∫9 :
}
∫∫; <
[
ºº 	
System
ºº	 
.
ºº 
Obsolete
ºº 
(
ºº 
$str
ºº P
,
ººP Q
true
ººR V
)
ººV W
]
ººW X
public
ΩΩ 
new
ΩΩ 
void
ΩΩ 
StopCoroutine
ΩΩ %
(
ΩΩ% &
System
ΩΩ& ,
.
ΩΩ, -
Collections
ΩΩ- 8
.
ΩΩ8 9
IEnumerator
ΩΩ9 D
routine
ΩΩE L
)
ΩΩL M
{
ΩΩN O
}
ΩΩP Q
[
øø 	
System
øø	 
.
øø 
Obsolete
øø 
(
øø 
$str
øø P
,
øøP Q
true
øøR V
)
øøV W
]
øøW X
public
¿¿ 
new
¿¿ 
void
¿¿ 
StopCoroutine
¿¿ %
(
¿¿% &
	Coroutine
¿¿& /
routine
¿¿0 7
)
¿¿7 8
{
¿¿9 :
}
¿¿; <
[
¬¬ 	
System
¬¬	 
.
¬¬ 
Obsolete
¬¬ 
(
¬¬ 
$str
¬¬ P
,
¬¬P Q
true
¬¬R V
)
¬¬V W
]
¬¬W X
public
√√ 
new
√√ 
void
√√ 
StopAllCoroutines
√√ )
(
√√) *
)
√√* +
{
√√, -
}
√√. /
[
≈≈ 	
System
≈≈	 
.
≈≈ 
Obsolete
≈≈ 
(
≈≈ 
$str
≈≈ <
,
≈≈< =
true
≈≈> B
)
≈≈B C
]
≈≈C D
public
∆∆ 
new
∆∆ 
static
∆∆ 
void
∆∆ 
Destroy
∆∆ &
(
∆∆& '
Object
∆∆' -
obj
∆∆. 1
)
∆∆1 2
{
∆∆3 4
}
∆∆5 6
[
»» 	
System
»»	 
.
»» 
Obsolete
»» 
(
»» 
$str
»» <
,
»»< =
true
»»> B
)
»»B C
]
»»C D
public
…… 
new
…… 
static
…… 
void
…… 
Destroy
…… &
(
……& '
Object
……' -
obj
……. 1
,
……1 2
float
……3 8
f
……9 :
)
……: ;
{
……< =
}
……> ?
[
ÀÀ 	
System
ÀÀ	 
.
ÀÀ 
Obsolete
ÀÀ 
(
ÀÀ 
$str
ÀÀ <
,
ÀÀ< =
true
ÀÀ> B
)
ÀÀB C
]
ÀÀC D
public
ÃÃ 
new
ÃÃ 
static
ÃÃ 
void
ÃÃ 
DestroyObject
ÃÃ ,
(
ÃÃ, -
Object
ÃÃ- 3
obj
ÃÃ4 7
)
ÃÃ7 8
{
ÃÃ9 :
}
ÃÃ; <
[
ŒŒ 	
System
ŒŒ	 
.
ŒŒ 
Obsolete
ŒŒ 
(
ŒŒ 
$str
ŒŒ <
,
ŒŒ< =
true
ŒŒ> B
)
ŒŒB C
]
ŒŒC D
public
œœ 
new
œœ 
static
œœ 
void
œœ 
DestroyObject
œœ ,
(
œœ, -
Object
œœ- 3
obj
œœ4 7
,
œœ7 8
float
œœ9 >
f
œœ? @
)
œœ@ A
{
œœB C
}
œœD E
[
—— 	
System
——	 
.
—— 
Obsolete
—— 
(
—— 
$str
—— <
,
——< =
true
——> B
)
——B C
]
——C D
public
““ 
new
““ 
static
““ 
void
““ 
DestroyImmediate
““ /
(
““/ 0
Object
““0 6
obj
““7 :
)
““: ;
{
““< =
}
““> ?
[
‘‘ 	
System
‘‘	 
.
‘‘ 
Obsolete
‘‘ 
(
‘‘ 
$str
‘‘ <
,
‘‘< =
true
‘‘> B
)
‘‘B C
]
‘‘C D
public
’’ 
new
’’ 
static
’’ 
void
’’ 
DestroyImmediate
’’ /
(
’’/ 0
Object
’’0 6
obj
’’7 :
,
’’: ;
bool
’’< @
b
’’A B
)
’’B C
{
’’D E
}
’’F G
[
◊◊ 	
System
◊◊	 
.
◊◊ 
Obsolete
◊◊ 
(
◊◊ 
$str
◊◊ <
,
◊◊< =
true
◊◊> B
)
◊◊B C
]
◊◊C D
public
ÿÿ 
new
ÿÿ 
static
ÿÿ 
void
ÿÿ 
Instantiate
ÿÿ *
(
ÿÿ* +
Object
ÿÿ+ 1
obj
ÿÿ2 5
)
ÿÿ5 6
{
ÿÿ7 8
}
ÿÿ9 :
[
⁄⁄ 	
System
⁄⁄	 
.
⁄⁄ 
Obsolete
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ <
,
⁄⁄< =
true
⁄⁄> B
)
⁄⁄B C
]
⁄⁄C D
public
€€ 
new
€€ 
static
€€ 
void
€€ 
Instantiate
€€ *
(
€€* +
Object
€€+ 1
original
€€2 :
,
€€: ;
Vector3
€€< C
position
€€D L
,
€€L M

Quaternion
€€N X
rotation
€€Y a
)
€€a b
{
€€c d
}
€€e f
[
›› 	
System
››	 
.
›› 
Obsolete
›› 
(
›› 
$str
›› <
,
››< =
true
››> B
)
››B C
]
››C D
public
ﬁﬁ 
new
ﬁﬁ 
static
ﬁﬁ 
void
ﬁﬁ 
Instantiate
ﬁﬁ *
<
ﬁﬁ* +
T
ﬁﬁ+ ,
>
ﬁﬁ, -
(
ﬁﬁ- .
T
ﬁﬁ. /
original
ﬁﬁ0 8
)
ﬁﬁ8 9
where
ﬁﬁ: ?
T
ﬁﬁ@ A
:
ﬁﬁB C
Object
ﬁﬁD J
{
ﬁﬁK L
}
ﬁﬁM N
[
‡‡ 	
System
‡‡	 
.
‡‡ 
Obsolete
‡‡ 
(
‡‡ 
$str
‡‡ %
,
‡‡% &
true
‡‡' +
)
‡‡+ ,
]
‡‡, -
public
·· 
new
·· 
static
·· 
T
·· 
FindObjectOfType
·· ,
<
··, -
T
··- .
>
··. /
(
··/ 0
)
··0 1
where
··2 7
T
··8 9
:
··: ;
Object
··< B
{
··C D
return
··E K
null
··L P
;
··P Q
}
··R S
[
„„ 	
System
„„	 
.
„„ 
Obsolete
„„ 
(
„„ 
$str
„„ %
,
„„% &
true
„„' +
)
„„+ ,
]
„„, -
public
‰‰ 
new
‰‰ 
static
‰‰ 
Object
‰‰  
FindObjectOfType
‰‰! 1
(
‰‰1 2
System
‰‰2 8
.
‰‰8 9
Type
‰‰9 =
t
‰‰> ?
)
‰‰? @
{
‰‰A B
return
‰‰C I
null
‰‰J N
;
‰‰N O
}
‰‰P Q
[
ÊÊ 	
System
ÊÊ	 
.
ÊÊ 
Obsolete
ÊÊ 
(
ÊÊ 
$str
ÊÊ %
,
ÊÊ% &
true
ÊÊ' +
)
ÊÊ+ ,
]
ÊÊ, -
public
ÁÁ 
new
ÁÁ 
static
ÁÁ 
T
ÁÁ 
[
ÁÁ 
]
ÁÁ 
FindObjectsOfType
ÁÁ /
<
ÁÁ/ 0
T
ÁÁ0 1
>
ÁÁ1 2
(
ÁÁ2 3
)
ÁÁ3 4
where
ÁÁ5 :
T
ÁÁ; <
:
ÁÁ= >
Object
ÁÁ? E
{
ÁÁF G
return
ÁÁH N
null
ÁÁO S
;
ÁÁS T
}
ÁÁU V
[
ÈÈ 	
System
ÈÈ	 
.
ÈÈ 
Obsolete
ÈÈ 
(
ÈÈ 
$str
ÈÈ %
,
ÈÈ% &
true
ÈÈ' +
)
ÈÈ+ ,
]
ÈÈ, -
public
ÍÍ 
new
ÍÍ 
static
ÍÍ 
Object
ÍÍ  
[
ÍÍ  !
]
ÍÍ! "
FindObjectsOfType
ÍÍ# 4
(
ÍÍ4 5
System
ÍÍ5 ;
.
ÍÍ; <
Type
ÍÍ< @
t
ÍÍA B
)
ÍÍB C
{
ÍÍD E
return
ÍÍF L
null
ÍÍM Q
;
ÍÍQ R
}
ÍÍS T
[
ÏÏ 	
System
ÏÏ	 
.
ÏÏ 
Obsolete
ÏÏ 
(
ÏÏ 
$str
ÏÏ %
,
ÏÏ% &
true
ÏÏ' +
)
ÏÏ+ ,
]
ÏÏ, -
public
ÌÌ 
new
ÌÌ 
static
ÌÌ 
void
ÌÌ 
print
ÌÌ $
(
ÌÌ$ %
object
ÌÌ% +
message
ÌÌ, 3
)
ÌÌ3 4
{
ÌÌ5 6
}
ÌÌ7 8
}
ÓÓ 
public
ÛÛ 

enum
ÛÛ 
Segment
ÛÛ 
{
ÙÙ 
Invalid
¯¯ 
=
¯¯ 
-
¯¯ 
$num
¯¯ 
,
¯¯ 
Update
¸¸ 
,
¸¸ 
FixedUpdate
ÄÄ 
,
ÄÄ 

LateUpdate
ÑÑ 
,
ÑÑ 

SlowUpdate
àà 
}
ââ 
public
èè 

enum
èè 
DebugInfoType
èè 
{
êê 
None
îî 
,
îî  
SeperateCoroutines
òò 
,
òò 
SeperateTags
úú 
}
ùù 
public
¢¢ 

struct
¢¢ 
CoroutineHandle
¢¢ !
:
¢¢" #
System
¢¢$ *
.
¢¢* +

IEquatable
¢¢+ 5
<
¢¢5 6
CoroutineHandle
¢¢6 E
>
¢¢E F
{
££ 
private
§§ 
const
§§ 
byte
§§ 
ReservedSpace
§§ (
=
§§) *
$num
§§+ /
;
§§/ 0
private
•• 
readonly
•• 
static
•• 
int
••  #
[
••# $
]
••$ %
	NextIndex
••& /
=
••0 1
{
••2 3
ReservedSpace
••4 A
+
••B C
$num
••D E
,
••E F
$num
••G H
,
••H I
$num
••J K
,
••K L
$num
••M N
,
••N O
$num
••P Q
,
••Q R
$num
••S T
,
••T U
$num
••V W
,
••W X
$num
••Y Z
,
••Z [
$num
••\ ]
,
••] ^
$num
••_ `
,
••` a
$num
••b c
,
••c d
$num
••e f
,
••f g
$num
••h i
,
••i j
$num
••k l
,
••l m
$num
••n o
,
••o p
$num
••q r
}
••s t
;
••t u
private
¶¶ 
readonly
¶¶ 
int
¶¶ 
_id
¶¶  
;
¶¶  !
public
®® 
byte
®® 
Key
®® 
{
®® 
get
®® 
{
®® 
return
®®  &
(
®®' (
byte
®®( ,
)
®®, -
(
®®- .
_id
®®. 1
&
®®2 3
ReservedSpace
®®4 A
)
®®A B
;
®®B C
}
®®D E
}
®®F G
public
™™ 
CoroutineHandle
™™ 
(
™™ 
byte
™™ #
ind
™™$ '
)
™™' (
{
´´ 	
if
¨¨ 
(
¨¨ 
ind
¨¨ 
>
¨¨ 
ReservedSpace
¨¨ #
)
¨¨# $
ind
≠≠ 
-=
≠≠ 
ReservedSpace
≠≠ $
;
≠≠$ %
_id
ØØ 
=
ØØ 
	NextIndex
ØØ 
[
ØØ 
ind
ØØ 
]
ØØ  
+
ØØ! "
ind
ØØ# &
;
ØØ& '
	NextIndex
∞∞ 
[
∞∞ 
ind
∞∞ 
]
∞∞ 
+=
∞∞ 
ReservedSpace
∞∞ +
+
∞∞, -
$num
∞∞. /
;
∞∞/ 0
}
±± 	
public
≥≥ 
bool
≥≥ 
Equals
≥≥ 
(
≥≥ 
CoroutineHandle
≥≥ *
other
≥≥+ 0
)
≥≥0 1
{
¥¥ 	
return
µµ 
_id
µµ 
==
µµ 
other
µµ 
.
µµ  
_id
µµ  #
;
µµ# $
}
∂∂ 	
public
∏∏ 
override
∏∏ 
bool
∏∏ 
Equals
∏∏ #
(
∏∏# $
object
∏∏$ *
other
∏∏+ 0
)
∏∏0 1
{
ππ 	
if
∫∫ 
(
∫∫ 
other
∫∫ 
is
∫∫ 
CoroutineHandle
∫∫ (
)
∫∫( )
return
ªª 
Equals
ªª 
(
ªª 
(
ªª 
CoroutineHandle
ªª .
)
ªª. /
other
ªª/ 4
)
ªª4 5
;
ªª5 6
return
ºº 
false
ºº 
;
ºº 
}
ΩΩ 	
public
øø 
static
øø 
bool
øø 
operator
øø #
==
øø# %
(
øø% &
CoroutineHandle
øø& 5
a
øø6 7
,
øø7 8
CoroutineHandle
øø9 H
b
øøI J
)
øøJ K
{
¿¿ 	
return
¡¡ 
a
¡¡ 
.
¡¡ 
_id
¡¡ 
==
¡¡ 
b
¡¡ 
.
¡¡ 
_id
¡¡ !
;
¡¡! "
}
¬¬ 	
public
ƒƒ 
static
ƒƒ 
bool
ƒƒ 
operator
ƒƒ #
!=
ƒƒ# %
(
ƒƒ% &
CoroutineHandle
ƒƒ& 5
a
ƒƒ6 7
,
ƒƒ7 8
CoroutineHandle
ƒƒ9 H
b
ƒƒI J
)
ƒƒJ K
{
≈≈ 	
return
∆∆ 
a
∆∆ 
.
∆∆ 
_id
∆∆ 
!=
∆∆ 
b
∆∆ 
.
∆∆ 
_id
∆∆ !
;
∆∆! "
}
«« 	
public
…… 
override
…… 
int
…… 
GetHashCode
…… '
(
……' (
)
……( )
{
   	
return
ÀÀ 
_id
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
public
—— 
bool
—— 
IsValid
—— 
{
““ 	
get
”” 
{
”” 
return
”” 
Key
”” 
!=
”” 
$num
””  !
;
””! "
}
””# $
}
‘‘ 	
}
’’ 
public
◊◊ 

static
◊◊ 
class
◊◊ "
MECExtensionMethods1
◊◊ ,
{
ÿÿ 
public
ﬁﬁ 
static
ﬁﬁ 
CoroutineHandle
ﬁﬁ %
RunCoroutine
ﬁﬁ& 2
(
ﬁﬁ2 3
this
ﬁﬁ3 7
IEnumerator
ﬁﬁ8 C
<
ﬁﬁC D
float
ﬁﬁD I
>
ﬁﬁI J
	coroutine
ﬁﬁK T
)
ﬁﬁT U
{
ﬂﬂ 	
return
‡‡ 
Timing
‡‡ 
.
‡‡ 
RunCoroutine
‡‡ &
(
‡‡& '
	coroutine
‡‡' 0
)
‡‡0 1
;
‡‡1 2
}
·· 	
public
ÈÈ 
static
ÈÈ 
CoroutineHandle
ÈÈ %
RunCoroutine
ÈÈ& 2
(
ÈÈ2 3
this
ÈÈ3 7
IEnumerator
ÈÈ8 C
<
ÈÈC D
float
ÈÈD I
>
ÈÈI J
	coroutine
ÈÈK T
,
ÈÈT U
string
ÈÈV \
tag
ÈÈ] `
)
ÈÈ` a
{
ÍÍ 	
return
ÎÎ 
Timing
ÎÎ 
.
ÎÎ 
RunCoroutine
ÎÎ &
(
ÎÎ& '
	coroutine
ÎÎ' 0
,
ÎÎ0 1
tag
ÎÎ2 5
)
ÎÎ5 6
;
ÎÎ6 7
}
ÏÏ 	
public
ÙÙ 
static
ÙÙ 
CoroutineHandle
ÙÙ %
RunCoroutine
ÙÙ& 2
(
ÙÙ2 3
this
ÙÙ3 7
IEnumerator
ÙÙ8 C
<
ÙÙC D
float
ÙÙD I
>
ÙÙI J
	coroutine
ÙÙK T
,
ÙÙT U
Segment
ÙÙV ]
segment
ÙÙ^ e
)
ÙÙe f
{
ıı 	
return
ˆˆ 
Timing
ˆˆ 
.
ˆˆ 
RunCoroutine
ˆˆ &
(
ˆˆ& '
	coroutine
ˆˆ' 0
,
ˆˆ0 1
segment
ˆˆ2 9
)
ˆˆ9 :
;
ˆˆ: ;
}
˜˜ 	
public
ÄÄ 
static
ÄÄ 
CoroutineHandle
ÄÄ %
RunCoroutine
ÄÄ& 2
(
ÄÄ2 3
this
ÄÄ3 7
IEnumerator
ÄÄ8 C
<
ÄÄC D
float
ÄÄD I
>
ÄÄI J
	coroutine
ÄÄK T
,
ÄÄT U
Segment
ÄÄV ]
segment
ÄÄ^ e
,
ÄÄe f
string
ÄÄg m
tag
ÄÄn q
)
ÄÄq r
{
ÅÅ 	
return
ÇÇ 
Timing
ÇÇ 
.
ÇÇ 
RunCoroutine
ÇÇ &
(
ÇÇ& '
	coroutine
ÇÇ' 0
,
ÇÇ0 1
segment
ÇÇ2 9
,
ÇÇ9 :
tag
ÇÇ; >
)
ÇÇ> ?
;
ÇÇ? @
}
ÉÉ 	
}
ÑÑ 
}ÖÖ 
publicáá 
static
áá 
class
áá "
MECExtensionMethods2
áá (
{àà 
public
èè 

static
èè 
IEnumerator
èè 
<
èè 
float
èè #
>
èè# $

CancelWith
èè% /
(
èè/ 0
this
èè0 4
IEnumerator
èè5 @
<
èè@ A
float
èèA F
>
èèF G
	coroutine
èèH Q
,
èèQ R

GameObject
èèS ]

gameObject
èè^ h
)
èèh i
{
êê 
while
ëë 
(
ëë 
MEC
ëë 
.
ëë 
Timing
ëë 
.
ëë 

MainThread
ëë $
!=
ëë% '
System
ëë( .
.
ëë. /
	Threading
ëë/ 8
.
ëë8 9
Thread
ëë9 ?
.
ëë? @
CurrentThread
ëë@ M
||
ëëN P
(
ëëQ R

gameObject
ëëR \
&&
ëë] _

gameObject
ëë` j
.
ëëj k
activeInHierarchy
ëëk |
&&
ëë} 
	coroutineëëÄ â
.ëëâ ä
MoveNextëëä í
(ëëí ì
)ëëì î
)ëëî ï
)ëëï ñ
yield
íí 
return
íí 
	coroutine
íí "
.
íí" #
Current
íí# *
;
íí* +
}
ìì 
public
úú 

static
úú 
IEnumerator
úú 
<
úú 
float
úú #
>
úú# $

CancelWith
úú% /
(
úú/ 0
this
úú0 4
IEnumerator
úú5 @
<
úú@ A
float
úúA F
>
úúF G
	coroutine
úúH Q
,
úúQ R

GameObject
úúS ]
gameObject1
úú^ i
,
úúi j

GameObject
úúk u
gameObject2úúv Å
)úúÅ Ç
{
ùù 
while
ûû 
(
ûû 
MEC
ûû 
.
ûû 
Timing
ûû 
.
ûû 

MainThread
ûû $
!=
ûû% '
System
ûû( .
.
ûû. /
	Threading
ûû/ 8
.
ûû8 9
Thread
ûû9 ?
.
ûû? @
CurrentThread
ûû@ M
||
ûûN P
(
ûûQ R
gameObject1
ûûR ]
&&
ûû^ `
gameObject1
ûûa l
.
ûûl m
activeInHierarchy
ûûm ~
&&ûû Å
gameObject2
üü 
&&
üü 
gameObject2
üü *
.
üü* +
activeInHierarchy
üü+ <
&&
üü= ?
	coroutine
üü@ I
.
üüI J
MoveNext
üüJ R
(
üüR S
)
üüS T
)
üüT U
)
üüU V
yield
†† 
return
†† 
	coroutine
†† "
.
††" #
Current
††# *
;
††* +
}
°° 
public
´´ 

static
´´ 
IEnumerator
´´ 
<
´´ 
float
´´ #
>
´´# $

CancelWith
´´% /
(
´´/ 0
this
´´0 4
IEnumerator
´´5 @
<
´´@ A
float
´´A F
>
´´F G
	coroutine
´´H Q
,
´´Q R

GameObject
¨¨ 
gameObject1
¨¨ 
,
¨¨ 

GameObject
¨¨  *
gameObject2
¨¨+ 6
,
¨¨6 7

GameObject
¨¨8 B
gameObject3
¨¨C N
)
¨¨N O
{
≠≠ 
while
ÆÆ 
(
ÆÆ 
MEC
ÆÆ 
.
ÆÆ 
Timing
ÆÆ 
.
ÆÆ 

MainThread
ÆÆ $
!=
ÆÆ% '
System
ÆÆ( .
.
ÆÆ. /
	Threading
ÆÆ/ 8
.
ÆÆ8 9
Thread
ÆÆ9 ?
.
ÆÆ? @
CurrentThread
ÆÆ@ M
||
ÆÆN P
(
ÆÆQ R
gameObject1
ÆÆR ]
&&
ÆÆ^ `
gameObject1
ÆÆa l
.
ÆÆl m
activeInHierarchy
ÆÆm ~
&&ÆÆ Å
gameObject2
ØØ 
&&
ØØ 
gameObject2
ØØ *
.
ØØ* +
activeInHierarchy
ØØ+ <
&&
ØØ= ?
gameObject3
ØØ@ K
&&
ØØL N
gameObject3
ØØO Z
.
ØØZ [
activeInHierarchy
ØØ[ l
&&
ØØm o
	coroutine
ØØp y
.
ØØy z
MoveNextØØz Ç
(ØØÇ É
)ØØÉ Ñ
)ØØÑ Ö
)ØØÖ Ü
yield
∞∞ 
return
∞∞ 
	coroutine
∞∞ "
.
∞∞" #
Current
∞∞# *
;
∞∞* +
}
±± 
}≤≤ ÀŒ
JD:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModulePhysics.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class  
DOTweenModulePhysics )
{ 
public 
static 
TweenerCore !
<! "
Vector3" )
,) *
Vector3+ 2
,2 3
VectorOptions4 A
>A B
DOMoveC I
(I J
thisJ N
	RigidbodyO X
targetY _
,_ `
Vector3a h
endValuei q
,q r
floats x
duration	y Å
,
Å Ç
bool
É á
snapping
à ê
=
ë í
false
ì ò
)
ò ô
{ 	
TweenerCore 
< 
Vector3 
,  
Vector3! (
,( )
VectorOptions* 7
>7 8
t9 :
=; <
DOTween= D
.D E
ToE G
(G H
(H I
)I J
=>K M
targetN T
.T U
positionU ]
,] ^
target_ e
.e f
MovePositionf r
,r s
endValuet |
,| }
duration	~ Ü
)
Ü á
;
á à
t 
. 

SetOptions 
( 
snapping !
)! "
." #
	SetTarget# ,
(, -
target- 3
)3 4
;4 5
return 
t 
; 
} 	
public%% 
static%% 
TweenerCore%% !
<%%! "
Vector3%%" )
,%%) *
Vector3%%+ 2
,%%2 3
VectorOptions%%4 A
>%%A B
DOMoveX%%C J
(%%J K
this%%K O
	Rigidbody%%P Y
target%%Z `
,%%` a
float%%b g
endValue%%h p
,%%p q
float%%r w
duration	%%x Ä
,
%%Ä Å
bool
%%Ç Ü
snapping
%%á è
=
%%ê ë
false
%%í ó
)
%%ó ò
{&& 	
TweenerCore'' 
<'' 
Vector3'' 
,''  
Vector3''! (
,''( )
VectorOptions''* 7
>''7 8
t''9 :
=''; <
DOTween''= D
.''D E
To''E G
(''G H
(''H I
)''I J
=>''K M
target''N T
.''T U
position''U ]
,''] ^
target''_ e
.''e f
MovePosition''f r
,''r s
new''t w
Vector3''x 
(	'' Ä
endValue
''Ä à
,
''à â
$num
''ä ã
,
''ã å
$num
''ç é
)
''é è
,
''è ê
duration
''ë ô
)
''ô ö
;
''ö õ
t(( 
.(( 

SetOptions(( 
((( 
AxisConstraint(( '
.((' (
X((( )
,(() *
snapping((+ 3
)((3 4
.((4 5
	SetTarget((5 >
(((> ?
target((? E
)((E F
;((F G
return)) 
t)) 
;)) 
}** 	
public00 
static00 
TweenerCore00 !
<00! "
Vector300" )
,00) *
Vector300+ 2
,002 3
VectorOptions004 A
>00A B
DOMoveY00C J
(00J K
this00K O
	Rigidbody00P Y
target00Z `
,00` a
float00b g
endValue00h p
,00p q
float00r w
duration	00x Ä
,
00Ä Å
bool
00Ç Ü
snapping
00á è
=
00ê ë
false
00í ó
)
00ó ò
{11 	
TweenerCore22 
<22 
Vector322 
,22  
Vector322! (
,22( )
VectorOptions22* 7
>227 8
t229 :
=22; <
DOTween22= D
.22D E
To22E G
(22G H
(22H I
)22I J
=>22K M
target22N T
.22T U
position22U ]
,22] ^
target22_ e
.22e f
MovePosition22f r
,22r s
new22t w
Vector322x 
(	22 Ä
$num
22Ä Å
,
22Å Ç
endValue
22É ã
,
22ã å
$num
22ç é
)
22é è
,
22è ê
duration
22ë ô
)
22ô ö
;
22ö õ
t33 
.33 

SetOptions33 
(33 
AxisConstraint33 '
.33' (
Y33( )
,33) *
snapping33+ 3
)333 4
.334 5
	SetTarget335 >
(33> ?
target33? E
)33E F
;33F G
return44 
t44 
;44 
}55 	
public;; 
static;; 
TweenerCore;; !
<;;! "
Vector3;;" )
,;;) *
Vector3;;+ 2
,;;2 3
VectorOptions;;4 A
>;;A B
DOMoveZ;;C J
(;;J K
this;;K O
	Rigidbody;;P Y
target;;Z `
,;;` a
float;;b g
endValue;;h p
,;;p q
float;;r w
duration	;;x Ä
,
;;Ä Å
bool
;;Ç Ü
snapping
;;á è
=
;;ê ë
false
;;í ó
)
;;ó ò
{<< 	
TweenerCore== 
<== 
Vector3== 
,==  
Vector3==! (
,==( )
VectorOptions==* 7
>==7 8
t==9 :
===; <
DOTween=== D
.==D E
To==E G
(==G H
(==H I
)==I J
=>==K M
target==N T
.==T U
position==U ]
,==] ^
target==_ e
.==e f
MovePosition==f r
,==r s
new==t w
Vector3==x 
(	== Ä
$num
==Ä Å
,
==Å Ç
$num
==É Ñ
,
==Ñ Ö
endValue
==Ü é
)
==é è
,
==è ê
duration
==ë ô
)
==ô ö
;
==ö õ
t>> 
.>> 

SetOptions>> 
(>> 
AxisConstraint>> '
.>>' (
Z>>( )
,>>) *
snapping>>+ 3
)>>3 4
.>>4 5
	SetTarget>>5 >
(>>> ?
target>>? E
)>>E F
;>>F G
return?? 
t?? 
;?? 
}@@ 	
publicFF 
staticFF 
TweenerCoreFF !
<FF! "

QuaternionFF" ,
,FF, -
Vector3FF. 5
,FF5 6
QuaternionOptionsFF7 H
>FFH I
DORotateFFJ R
(FFR S
thisFFS W
	RigidbodyFFX a
targetFFb h
,FFh i
Vector3FFj q
endValueFFr z
,FFz {
float	FF| Å
duration
FFÇ ä
,
FFä ã

RotateMode
FFå ñ
mode
FFó õ
=
FFú ù

RotateMode
FFû ®
.
FF® ©
Fast
FF© ≠
)
FF≠ Æ
{GG 	
TweenerCoreHH 
<HH 

QuaternionHH "
,HH" #
Vector3HH$ +
,HH+ ,
QuaternionOptionsHH- >
>HH> ?
tHH@ A
=HHB C
DOTweenHHD K
.HHK L
ToHHL N
(HHN O
(HHO P
)HHP Q
=>HHR T
targetHHU [
.HH[ \
rotationHH\ d
,HHd e
targetHHf l
.HHl m
MoveRotationHHm y
,HHy z
endValue	HH{ É
,
HHÉ Ñ
duration
HHÖ ç
)
HHç é
;
HHé è
tII 
.II 
	SetTargetII 
(II 
targetII 
)II 
;II  
tJJ 
.JJ 
plugOptionsJJ 
.JJ 

rotateModeJJ $
=JJ% &
modeJJ' +
;JJ+ ,
returnKK 
tKK 
;KK 
}LL 	
publicSS 
staticSS 
TweenerCoreSS !
<SS! "

QuaternionSS" ,
,SS, -
Vector3SS. 5
,SS5 6
QuaternionOptionsSS7 H
>SSH I
DOLookAtSSJ R
(SSR S
thisSSS W
	RigidbodySSX a
targetSSb h
,SSh i
Vector3SSj q
towardsSSr y
,SSy z
float	SS{ Ä
duration
SSÅ â
,
SSâ ä
AxisConstraint
SSã ô
axisConstraint
SSö ®
=
SS© ™
AxisConstraint
SS´ π
.
SSπ ∫
None
SS∫ æ
,
SSæ ø
Vector3
SS¿ «
?
SS« »
up
SS… À
=
SSÃ Õ
null
SSŒ “
)
SS“ ”
{TT 	
TweenerCoreUU 
<UU 

QuaternionUU "
,UU" #
Vector3UU$ +
,UU+ ,
QuaternionOptionsUU- >
>UU> ?
tUU@ A
=UUB C
DOTweenUUD K
.UUK L
ToUUL N
(UUN O
(UUO P
)UUP Q
=>UUR T
targetUUU [
.UU[ \
rotationUU\ d
,UUd e
targetUUf l
.UUl m
MoveRotationUUm y
,UUy z
towards	UU{ Ç
,
UUÇ É
duration
UUÑ å
)
UUå ç
.VV 
	SetTargetVV 
(VV 
targetVV !
)VV! "
.VV" #!
SetSpecialStartupModeVV# 8
(VV8 9
SpecialStartupModeVV9 K
.VVK L
	SetLookAtVVL U
)VVU V
;VVV W
tWW 
.WW 
plugOptionsWW 
.WW 
axisConstraintWW (
=WW) *
axisConstraintWW+ 9
;WW9 :
tXX 
.XX 
plugOptionsXX 
.XX 
upXX 
=XX 
(XX  
upXX  "
==XX# %
nullXX& *
)XX* +
?XX, -
Vector3XX. 5
.XX5 6
upXX6 8
:XX9 :
(XX; <
Vector3XX< C
)XXC D
upXXD F
;XXF G
returnYY 
tYY 
;YY 
}ZZ 	
publicff 
staticff 
Sequenceff 
DOJumpff %
(ff% &
thisff& *
	Rigidbodyff+ 4
targetff5 ;
,ff; <
Vector3ff= D
endValueffE M
,ffM N
floatffO T
	jumpPowerffU ^
,ff^ _
intff` c
numJumpsffd l
,ffl m
floatffn s
durationfft |
,ff| }
bool	ff~ Ç
snapping
ffÉ ã
=
ffå ç
false
ffé ì
)
ffì î
{gg 	
ifhh 
(hh 
numJumpshh 
<hh 
$numhh 
)hh 
numJumpshh &
=hh' (
$numhh) *
;hh* +
floatii 
	startPosYii 
=ii 
$numii 
;ii  
floatjj 
offsetYjj 
=jj 
-jj 
$numjj 
;jj 
boolkk 

offsetYSetkk 
=kk 
falsekk #
;kk# $
Sequencell 
sll 
=ll 
DOTweenll  
.ll  !
Sequencell! )
(ll) *
)ll* +
;ll+ ,
Tweenmm 
yTweenmm 
=mm 
DOTweenmm "
.mm" #
Tomm# %
(mm% &
(mm& '
)mm' (
=>mm) +
targetmm, 2
.mm2 3
positionmm3 ;
,mm; <
targetmm= C
.mmC D
MovePositionmmD P
,mmP Q
newmmR U
Vector3mmV ]
(mm] ^
$nummm^ _
,mm_ `
	jumpPowermma j
,mmj k
$nummml m
)mmm n
,mmn o
durationmmp x
/mmy z
(mm{ |
numJumps	mm| Ñ
*
mmÖ Ü
$num
mmá à
)
mmà â
)
mmâ ä
.nn 

SetOptionsnn 
(nn 
AxisConstraintnn *
.nn* +
Ynn+ ,
,nn, -
snappingnn. 6
)nn6 7
.nn7 8
SetEasenn8 ?
(nn? @
Easenn@ D
.nnD E
OutQuadnnE L
)nnL M
.nnM N
SetRelativennN Y
(nnY Z
)nnZ [
.oo 
SetLoopsoo 
(oo 
numJumpsoo "
*oo# $
$numoo% &
,oo& '
LoopTypeoo( 0
.oo0 1
Yoyooo1 5
)oo5 6
.pp 
OnStartpp 
(pp 
(pp 
)pp 
=>pp 
	startPosYpp (
=pp) *
targetpp+ 1
.pp1 2
positionpp2 :
.pp: ;
ypp; <
)pp< =
;pp= >
sqq 
.qq 
Appendqq 
(qq 
DOTweenqq 
.qq 
Toqq 
(qq  
(qq  !
)qq! "
=>qq# %
targetqq& ,
.qq, -
positionqq- 5
,qq5 6
targetqq7 =
.qq= >
MovePositionqq> J
,qqJ K
newqqL O
Vector3qqP W
(qqW X
endValueqqX `
.qq` a
xqqa b
,qqb c
$numqqd e
,qqe f
$numqqg h
)qqh i
,qqi j
durationqqk s
)qqs t
.rr 

SetOptionsrr 
(rr  
AxisConstraintrr  .
.rr. /
Xrr/ 0
,rr0 1
snappingrr2 :
)rr: ;
.rr; <
SetEaserr< C
(rrC D
EaserrD H
.rrH I
LinearrrI O
)rrO P
)ss 
.ss 
Joinss 
(ss 
DOTweenss 
.ss 
Toss !
(ss! "
(ss" #
)ss# $
=>ss% '
targetss( .
.ss. /
positionss/ 7
,ss7 8
targetss9 ?
.ss? @
MovePositionss@ L
,ssL M
newssN Q
Vector3ssR Y
(ssY Z
$numssZ [
,ss[ \
$numss] ^
,ss^ _
endValuess` h
.ssh i
zssi j
)ssj k
,ssk l
durationssm u
)ssu v
.tt 

SetOptionstt 
(tt  
AxisConstrainttt  .
.tt. /
Ztt/ 0
,tt0 1
snappingtt2 :
)tt: ;
.tt; <
SetEasett< C
(ttC D
EasettD H
.ttH I
LinearttI O
)ttO P
)uu 
.uu 
Joinuu 
(uu 
yTweenuu 
)uu 
.vv 
	SetTargetvv 
(vv 
targetvv !
)vv! "
.vv" #
SetEasevv# *
(vv* +
DOTweenvv+ 2
.vv2 3
defaultEaseTypevv3 B
)vvB C
;vvC D
yTweenww 
.ww 
OnUpdateww 
(ww 
(ww 
)ww 
=>ww !
{ww" #
ifxx 
(xx 
!xx 

offsetYSetxx 
)xx  
{xx! "

offsetYSetyy 
=yy  
trueyy! %
;yy% &
offsetYzz 
=zz 
szz 
.zz  

isRelativezz  *
?zz+ ,
endValuezz- 5
.zz5 6
yzz6 7
:zz8 9
endValuezz: B
.zzB C
yzzC D
-zzE F
	startPosYzzG P
;zzP Q
}{{ 
Vector3|| 
pos|| 
=|| 
target|| $
.||$ %
position||% -
;||- .
pos}} 
.}} 
y}} 
+=}} 
	DOVirtual}} "
.}}" #

EasedValue}}# -
(}}- .
$num}}. /
,}}/ 0
offsetY}}1 8
,}}8 9
yTween}}: @
.}}@ A
ElapsedPercentage}}A R
(}}R S
)}}S T
,}}T U
Ease}}V Z
.}}Z [
OutQuad}}[ b
)}}b c
;}}c d
target~~ 
.~~ 
MovePosition~~ #
(~~# $
pos~~$ '
)~~' (
;~~( )
} 
) 
; 
return
ÄÄ 
s
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
public
èè 
static
èè 
TweenerCore
èè !
<
èè! "
Vector3
èè" )
,
èè) *
Path
èè+ /
,
èè/ 0
PathOptions
èè1 <
>
èè< =
DOPath
èè> D
(
èèD E
this
êê 
	Rigidbody
êê 
target
êê !
,
êê! "
Vector3
êê# *
[
êê* +
]
êê+ ,
path
êê- 1
,
êê1 2
float
êê3 8
duration
êê9 A
,
êêA B
PathType
êêC K
pathType
êêL T
=
êêU V
PathType
êêW _
.
êê_ `
Linear
êê` f
,
êêf g
PathMode
ëë 
pathMode
ëë 
=
ëë 
PathMode
ëë  (
.
ëë( )
Full3D
ëë) /
,
ëë/ 0
int
ëë1 4

resolution
ëë5 ?
=
ëë@ A
$num
ëëB D
,
ëëD E
Color
ëëF K
?
ëëK L

gizmoColor
ëëM W
=
ëëX Y
null
ëëZ ^
)
íí 	
{
ìì 	
if
îî 
(
îî 

resolution
îî 
<
îî 
$num
îî 
)
îî 

resolution
îî  *
=
îî+ ,
$num
îî- .
;
îî. /
TweenerCore
ïï 
<
ïï 
Vector3
ïï 
,
ïï  
Path
ïï! %
,
ïï% &
PathOptions
ïï' 2
>
ïï2 3
t
ïï4 5
=
ïï6 7
DOTween
ïï8 ?
.
ïï? @
To
ïï@ B
(
ïïB C

PathPlugin
ïïC M
.
ïïM N
Get
ïïN Q
(
ïïQ R
)
ïïR S
,
ïïS T
(
ïïU V
)
ïïV W
=>
ïïX Z
target
ïï[ a
.
ïïa b
position
ïïb j
,
ïïj k
target
ïïl r
.
ïïr s
MovePosition
ïïs 
,ïï Ä
newïïÅ Ñ
PathïïÖ â
(ïïâ ä
pathTypeïïä í
,ïïí ì
pathïïî ò
,ïïò ô

resolutionïïö §
,ïï§ •

gizmoColorïï¶ ∞
)ïï∞ ±
,ïï± ≤
durationïï≥ ª
)ïïª º
.
ññ 
	SetTarget
ññ 
(
ññ 
target
ññ !
)
ññ! "
.
ññ" #
	SetUpdate
ññ# ,
(
ññ, -

UpdateType
ññ- 7
.
ññ7 8
Fixed
ññ8 =
)
ññ= >
;
ññ> ?
t
òò 
.
òò 
plugOptions
òò 
.
òò 
isRigidbody
òò %
=
òò& '
true
òò( ,
;
òò, -
t
ôô 
.
ôô 
plugOptions
ôô 
.
ôô 
mode
ôô 
=
ôô  
pathMode
ôô! )
;
ôô) *
return
öö 
t
öö 
;
öö 
}
õõ 	
public
®® 
static
®® 
TweenerCore
®® !
<
®®! "
Vector3
®®" )
,
®®) *
Path
®®+ /
,
®®/ 0
PathOptions
®®1 <
>
®®< =
DOLocalPath
®®> I
(
®®I J
this
©© 
	Rigidbody
©© 
target
©© !
,
©©! "
Vector3
©©# *
[
©©* +
]
©©+ ,
path
©©- 1
,
©©1 2
float
©©3 8
duration
©©9 A
,
©©A B
PathType
©©C K
pathType
©©L T
=
©©U V
PathType
©©W _
.
©©_ `
Linear
©©` f
,
©©f g
PathMode
™™ 
pathMode
™™ 
=
™™ 
PathMode
™™  (
.
™™( )
Full3D
™™) /
,
™™/ 0
int
™™1 4

resolution
™™5 ?
=
™™@ A
$num
™™B D
,
™™D E
Color
™™F K
?
™™K L

gizmoColor
™™M W
=
™™X Y
null
™™Z ^
)
´´ 	
{
¨¨ 	
if
≠≠ 
(
≠≠ 

resolution
≠≠ 
<
≠≠ 
$num
≠≠ 
)
≠≠ 

resolution
≠≠  *
=
≠≠+ ,
$num
≠≠- .
;
≠≠. /
	Transform
ÆÆ 
trans
ÆÆ 
=
ÆÆ 
target
ÆÆ $
.
ÆÆ$ %
	transform
ÆÆ% .
;
ÆÆ. /
TweenerCore
ØØ 
<
ØØ 
Vector3
ØØ 
,
ØØ  
Path
ØØ! %
,
ØØ% &
PathOptions
ØØ' 2
>
ØØ2 3
t
ØØ4 5
=
ØØ6 7
DOTween
ØØ8 ?
.
ØØ? @
To
ØØ@ B
(
ØØB C

PathPlugin
ØØC M
.
ØØM N
Get
ØØN Q
(
ØØQ R
)
ØØR S
,
ØØS T
(
ØØU V
)
ØØV W
=>
ØØX Z
trans
ØØ[ `
.
ØØ` a
localPosition
ØØa n
,
ØØn o
x
ØØp q
=>
ØØr t
target
ØØu {
.
ØØ{ |
MovePositionØØ| à
(ØØà â
transØØâ é
.ØØé è
parentØØè ï
==ØØñ ò
nullØØô ù
?ØØû ü
xØØ† °
:ØØ¢ £
transØØ§ ©
.ØØ© ™
parentØØ™ ∞
.ØØ∞ ±
TransformPointØØ± ø
(ØØø ¿
xØØ¿ ¡
)ØØ¡ ¬
)ØØ¬ √
,ØØ√ ƒ
newØØ≈ »
PathØØ… Õ
(ØØÕ Œ
pathTypeØØŒ ÷
,ØØ÷ ◊
pathØØÿ ‹
,ØØ‹ ›

resolutionØØﬁ Ë
,ØØË È

gizmoColorØØÍ Ù
)ØØÙ ı
,ØØı ˆ
durationØØ˜ ˇ
)ØØˇ Ä
.
∞∞ 
	SetTarget
∞∞ 
(
∞∞ 
target
∞∞ !
)
∞∞! "
.
∞∞" #
	SetUpdate
∞∞# ,
(
∞∞, -

UpdateType
∞∞- 7
.
∞∞7 8
Fixed
∞∞8 =
)
∞∞= >
;
∞∞> ?
t
≤≤ 
.
≤≤ 
plugOptions
≤≤ 
.
≤≤ 
isRigidbody
≤≤ %
=
≤≤& '
true
≤≤( ,
;
≤≤, -
t
≥≥ 
.
≥≥ 
plugOptions
≥≥ 
.
≥≥ 
mode
≥≥ 
=
≥≥  
pathMode
≥≥! )
;
≥≥) *
t
¥¥ 
.
¥¥ 
plugOptions
¥¥ 
.
¥¥ 
useLocalPosition
¥¥ *
=
¥¥+ ,
true
¥¥- 1
;
¥¥1 2
return
µµ 
t
µµ 
;
µµ 
}
∂∂ 	
internal
∏∏ 
static
∏∏ 
TweenerCore
∏∏ #
<
∏∏# $
Vector3
∏∏$ +
,
∏∏+ ,
Path
∏∏- 1
,
∏∏1 2
PathOptions
∏∏3 >
>
∏∏> ?
DOPath
∏∏@ F
(
∏∏F G
this
ππ 
	Rigidbody
ππ 
target
ππ !
,
ππ! "
Path
ππ# '
path
ππ( ,
,
ππ, -
float
ππ. 3
duration
ππ4 <
,
ππ< =
PathMode
ππ> F
pathMode
ππG O
=
ππP Q
PathMode
ππR Z
.
ππZ [
Full3D
ππ[ a
)
∫∫ 	
{
ªª 	
TweenerCore
ºº 
<
ºº 
Vector3
ºº 
,
ºº  
Path
ºº! %
,
ºº% &
PathOptions
ºº' 2
>
ºº2 3
t
ºº4 5
=
ºº6 7
DOTween
ºº8 ?
.
ºº? @
To
ºº@ B
(
ººB C

PathPlugin
ººC M
.
ººM N
Get
ººN Q
(
ººQ R
)
ººR S
,
ººS T
(
ººU V
)
ººV W
=>
ººX Z
target
ºº[ a
.
ººa b
position
ººb j
,
ººj k
target
ººl r
.
ººr s
MovePosition
ººs 
,ºº Ä
pathººÅ Ö
,ººÖ Ü
durationººá è
)ººè ê
.
ΩΩ 
	SetTarget
ΩΩ 
(
ΩΩ 
target
ΩΩ !
)
ΩΩ! "
;
ΩΩ" #
t
øø 
.
øø 
plugOptions
øø 
.
øø 
isRigidbody
øø %
=
øø& '
true
øø( ,
;
øø, -
t
¿¿ 
.
¿¿ 
plugOptions
¿¿ 
.
¿¿ 
mode
¿¿ 
=
¿¿  
pathMode
¿¿! )
;
¿¿) *
return
¡¡ 
t
¡¡ 
;
¡¡ 
}
¬¬ 	
internal
√√ 
static
√√ 
TweenerCore
√√ #
<
√√# $
Vector3
√√$ +
,
√√+ ,
Path
√√- 1
,
√√1 2
PathOptions
√√3 >
>
√√> ?
DOLocalPath
√√@ K
(
√√K L
this
ƒƒ 
	Rigidbody
ƒƒ 
target
ƒƒ !
,
ƒƒ! "
Path
ƒƒ# '
path
ƒƒ( ,
,
ƒƒ, -
float
ƒƒ. 3
duration
ƒƒ4 <
,
ƒƒ< =
PathMode
ƒƒ> F
pathMode
ƒƒG O
=
ƒƒP Q
PathMode
ƒƒR Z
.
ƒƒZ [
Full3D
ƒƒ[ a
)
≈≈ 	
{
∆∆ 	
	Transform
«« 
trans
«« 
=
«« 
target
«« $
.
««$ %
	transform
««% .
;
««. /
TweenerCore
»» 
<
»» 
Vector3
»» 
,
»»  
Path
»»! %
,
»»% &
PathOptions
»»' 2
>
»»2 3
t
»»4 5
=
»»6 7
DOTween
»»8 ?
.
»»? @
To
»»@ B
(
»»B C

PathPlugin
»»C M
.
»»M N
Get
»»N Q
(
»»Q R
)
»»R S
,
»»S T
(
»»U V
)
»»V W
=>
»»X Z
trans
»»[ `
.
»»` a
localPosition
»»a n
,
»»n o
x
»»p q
=>
»»r t
target
»»u {
.
»»{ |
MovePosition»»| à
(»»à â
trans»»â é
.»»é è
parent»»è ï
==»»ñ ò
null»»ô ù
?»»û ü
x»»† °
:»»¢ £
trans»»§ ©
.»»© ™
parent»»™ ∞
.»»∞ ±
TransformPoint»»± ø
(»»ø ¿
x»»¿ ¡
)»»¡ ¬
)»»¬ √
,»»√ ƒ
path»»≈ …
,»»…  
duration»»À ”
)»»” ‘
.
…… 
	SetTarget
…… 
(
…… 
target
…… !
)
……! "
;
……" #
t
ÀÀ 
.
ÀÀ 
plugOptions
ÀÀ 
.
ÀÀ 
isRigidbody
ÀÀ %
=
ÀÀ& '
true
ÀÀ( ,
;
ÀÀ, -
t
ÃÃ 
.
ÃÃ 
plugOptions
ÃÃ 
.
ÃÃ 
mode
ÃÃ 
=
ÃÃ  
pathMode
ÃÃ! )
;
ÃÃ) *
t
ÕÕ 
.
ÕÕ 
plugOptions
ÕÕ 
.
ÕÕ 
useLocalPosition
ÕÕ *
=
ÕÕ+ ,
true
ÕÕ- 1
;
ÕÕ1 2
return
ŒŒ 
t
ŒŒ 
;
ŒŒ 
}
œœ 	
}
÷÷ 
}◊◊ Ï6
ID:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModuleSprite.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class 
DOTweenModuleSprite (
{ 
public 
static 
TweenerCore !
<! "
Color" '
,' (
Color) .
,. /
ColorOptions0 <
>< =
DOColor> E
(E F
thisF J
SpriteRendererK Y
targetZ `
,` a
Colorb g
endValueh p
,p q
floatr w
duration	x Ä
)
Ä Å
{ 	
TweenerCore 
< 
Color 
, 
Color $
,$ %
ColorOptions& 2
>2 3
t4 5
=6 7
DOTween8 ?
.? @
To@ B
(B C
(C D
)D E
=>F H
targetI O
.O P
colorP U
,U V
xW X
=>Y [
target\ b
.b c
colorc h
=i j
xk l
,l m
endValuen v
,v w
duration	x Ä
)
Ä Å
;
Å Ç
t 
. 
	SetTarget 
( 
target 
) 
;  
return 
t 
; 
} 	
public   
static   
TweenerCore   !
<  ! "
Color  " '
,  ' (
Color  ) .
,  . /
ColorOptions  0 <
>  < =
DOFade  > D
(  D E
this  E I
SpriteRenderer  J X
target  Y _
,  _ `
float  a f
endValue  g o
,  o p
float  q v
duration  w 
)	   Ä
{!! 	
TweenerCore"" 
<"" 
Color"" 
,"" 
Color"" $
,""$ %
ColorOptions""& 2
>""2 3
t""4 5
=""6 7
DOTween""8 ?
.""? @
ToAlpha""@ G
(""G H
(""H I
)""I J
=>""K M
target""N T
.""T U
color""U Z
,""Z [
x""\ ]
=>""^ `
target""a g
.""g h
color""h m
=""n o
x""p q
,""q r
endValue""s {
,""{ |
duration	""} Ö
)
""Ö Ü
;
""Ü á
t## 
.## 
	SetTarget## 
(## 
target## 
)## 
;##  
return$$ 
t$$ 
;$$ 
}%% 	
public++ 
static++ 
Sequence++ 
DOGradientColor++ .
(++. /
this++/ 3
SpriteRenderer++4 B
target++C I
,++I J
Gradient++K S
gradient++T \
,++\ ]
float++^ c
duration++d l
)++l m
{,, 	
Sequence-- 
s-- 
=-- 
DOTween--  
.--  !
Sequence--! )
(--) *
)--* +
;--+ ,
GradientColorKey.. 
[.. 
].. 
colors.. %
=..& '
gradient..( 0
...0 1
	colorKeys..1 :
;..: ;
int// 
len// 
=// 
colors// 
.// 
Length// #
;//# $
for00 
(00 
int00 
i00 
=00 
$num00 
;00 
i00 
<00 
len00  #
;00# $
++00% '
i00' (
)00( )
{00* +
GradientColorKey11  
c11! "
=11# $
colors11% +
[11+ ,
i11, -
]11- .
;11. /
if22 
(22 
i22 
==22 
$num22 
&&22 
c22 
.22  
time22  $
<=22% '
$num22( )
)22) *
{22+ ,
target33 
.33 
color33  
=33! "
c33# $
.33$ %
color33% *
;33* +
continue44 
;44 
}55 
float66 
colorDuration66 #
=66$ %
i66& '
==66( *
len66+ .
-66/ 0
$num661 2
?77 
duration77 
-77  
s77! "
.77" #
Duration77# +
(77+ ,
false77, 1
)771 2
:88 
duration88 
*88  
(88! "
i88" #
==88$ &
$num88' (
?88) *
c88+ ,
.88, -
time88- 1
:882 3
c884 5
.885 6
time886 :
-88; <
colors88= C
[88C D
i88D E
-88F G
$num88H I
]88I J
.88J K
time88K O
)88O P
;88P Q
s99 
.99 
Append99 
(99 
target99 
.99  
DOColor99  '
(99' (
c99( )
.99) *
color99* /
,99/ 0
colorDuration991 >
)99> ?
.99? @
SetEase99@ G
(99G H
Ease99H L
.99L M
Linear99M S
)99S T
)99T U
;99U V
}:: 
s;; 
.;; 
	SetTarget;; 
(;; 
target;; 
);; 
;;;  
return<< 
s<< 
;<< 
}== 	
publicJJ 
staticJJ 
TweenerJJ 
DOBlendableColorJJ .
(JJ. /
thisJJ/ 3
SpriteRendererJJ4 B
targetJJC I
,JJI J
ColorJJK P
endValueJJQ Y
,JJY Z
floatJJ[ `
durationJJa i
)JJi j
{KK 	
endValueLL 
=LL 
endValueLL 
-LL  !
targetLL" (
.LL( )
colorLL) .
;LL. /
ColorMM 
toMM 
=MM 
newMM 
ColorMM  
(MM  !
$numMM! "
,MM" #
$numMM$ %
,MM% &
$numMM' (
,MM( )
$numMM* +
)MM+ ,
;MM, -
returnNN 
DOTweenNN 
.NN 
ToNN 
(NN 
(NN 
)NN  
=>NN! #
toNN$ &
,NN& '
xNN( )
=>NN* ,
{NN- .
ColorOO 
diffOO 
=OO  
xOO! "
-OO# $
toOO% '
;OO' (
toPP 
=PP 
xPP 
;PP 
targetQQ 
.QQ 
colorQQ  
+=QQ! #
diffQQ$ (
;QQ( )
}RR 
,RR 
endValueRR 
,RR 
durationRR %
)RR% &
.SS 
	BlendableSS 
(SS 
)SS 
.SS 
	SetTargetSS &
(SS& '
targetSS' -
)SS- .
;SS. /
}TT 	
}[[ 
}\\ ›–
ED:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModuleUI.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class 
DOTweenModuleUI $
{ 
public 
static 
TweenerCore !
<! "
float" '
,' (
float) .
,. /
FloatOptions0 <
>< =
DOFade> D
(D E
thisE I
CanvasGroupJ U
targetV \
,\ ]
float^ c
endValued l
,l m
floatn s
durationt |
)| }
{ 	
TweenerCore 
< 
float 
, 
float $
,$ %
FloatOptions& 2
>2 3
t4 5
=6 7
DOTween8 ?
.? @
To@ B
(B C
(C D
)D E
=>F H
targetI O
.O P
alphaP U
,U V
xW X
=>Y [
target\ b
.b c
alphac h
=i j
xk l
,l m
endValuen v
,v w
duration	x Ä
)
Ä Å
;
Å Ç
t   
.   
	SetTarget   
(   
target   
)   
;    
return!! 
t!! 
;!! 
}"" 	
public++ 
static++ 
TweenerCore++ !
<++! "
Color++" '
,++' (
Color++) .
,++. /
ColorOptions++0 <
>++< =
DOColor++> E
(++E F
this++F J
Graphic++K R
target++S Y
,++Y Z
Color++[ `
endValue++a i
,++i j
float++k p
duration++q y
)++y z
{,, 	
TweenerCore-- 
<-- 
Color-- 
,-- 
Color-- $
,--$ %
ColorOptions--& 2
>--2 3
t--4 5
=--6 7
DOTween--8 ?
.--? @
To--@ B
(--B C
(--C D
)--D E
=>--F H
target--I O
.--O P
color--P U
,--U V
x--W X
=>--Y [
target--\ b
.--b c
color--c h
=--i j
x--k l
,--l m
endValue--n v
,--v w
duration	--x Ä
)
--Ä Å
;
--Å Ç
t.. 
... 
	SetTarget.. 
(.. 
target.. 
).. 
;..  
return// 
t// 
;// 
}00 	
public55 
static55 
TweenerCore55 !
<55! "
Color55" '
,55' (
Color55) .
,55. /
ColorOptions550 <
>55< =
DOFade55> D
(55D E
this55E I
Graphic55J Q
target55R X
,55X Y
float55Z _
endValue55` h
,55h i
float55j o
duration55p x
)55x y
{66 	
TweenerCore77 
<77 
Color77 
,77 
Color77 $
,77$ %
ColorOptions77& 2
>772 3
t774 5
=776 7
DOTween778 ?
.77? @
ToAlpha77@ G
(77G H
(77H I
)77I J
=>77K M
target77N T
.77T U
color77U Z
,77Z [
x77\ ]
=>77^ `
target77a g
.77g h
color77h m
=77n o
x77p q
,77q r
endValue77s {
,77{ |
duration	77} Ö
)
77Ö Ü
;
77Ü á
t88 
.88 
	SetTarget88 
(88 
target88 
)88 
;88  
return99 
t99 
;99 
}:: 	
publicCC 
staticCC 
TweenerCoreCC !
<CC! "
ColorCC" '
,CC' (
ColorCC) .
,CC. /
ColorOptionsCC0 <
>CC< =
DOColorCC> E
(CCE F
thisCCF J
ImageCCK P
targetCCQ W
,CCW X
ColorCCY ^
endValueCC_ g
,CCg h
floatCCi n
durationCCo w
)CCw x
{DD 	
TweenerCoreEE 
<EE 
ColorEE 
,EE 
ColorEE $
,EE$ %
ColorOptionsEE& 2
>EE2 3
tEE4 5
=EE6 7
DOTweenEE8 ?
.EE? @
ToEE@ B
(EEB C
(EEC D
)EED E
=>EEF H
targetEEI O
.EEO P
colorEEP U
,EEU V
xEEW X
=>EEY [
targetEE\ b
.EEb c
colorEEc h
=EEi j
xEEk l
,EEl m
endValueEEn v
,EEv w
duration	EEx Ä
)
EEÄ Å
;
EEÅ Ç
tFF 
.FF 
	SetTargetFF 
(FF 
targetFF 
)FF 
;FF  
returnGG 
tGG 
;GG 
}HH 	
publicMM 
staticMM 
TweenerCoreMM !
<MM! "
ColorMM" '
,MM' (
ColorMM) .
,MM. /
ColorOptionsMM0 <
>MM< =
DOFadeMM> D
(MMD E
thisMME I
ImageMMJ O
targetMMP V
,MMV W
floatMMX ]
endValueMM^ f
,MMf g
floatMMh m
durationMMn v
)MMv w
{NN 	
TweenerCoreOO 
<OO 
ColorOO 
,OO 
ColorOO $
,OO$ %
ColorOptionsOO& 2
>OO2 3
tOO4 5
=OO6 7
DOTweenOO8 ?
.OO? @
ToAlphaOO@ G
(OOG H
(OOH I
)OOI J
=>OOK M
targetOON T
.OOT U
colorOOU Z
,OOZ [
xOO\ ]
=>OO^ `
targetOOa g
.OOg h
colorOOh m
=OOn o
xOOp q
,OOq r
endValueOOs {
,OO{ |
duration	OO} Ö
)
OOÖ Ü
;
OOÜ á
tPP 
.PP 
	SetTargetPP 
(PP 
targetPP 
)PP 
;PP  
returnQQ 
tQQ 
;QQ 
}RR 	
publicWW 
staticWW 
TweenerCoreWW !
<WW! "
floatWW" '
,WW' (
floatWW) .
,WW. /
FloatOptionsWW0 <
>WW< =
DOFillAmountWW> J
(WWJ K
thisWWK O
ImageWWP U
targetWWV \
,WW\ ]
floatWW^ c
endValueWWd l
,WWl m
floatWWn s
durationWWt |
)WW| }
{XX 	
ifYY 
(YY 
endValueYY 
>YY 
$numYY 
)YY 
endValueYY &
=YY' (
$numYY) *
;YY* +
elseZZ 
ifZZ 
(ZZ 
endValueZZ 
<ZZ 
$numZZ  !
)ZZ! "
endValueZZ# +
=ZZ, -
$numZZ. /
;ZZ/ 0
TweenerCore[[ 
<[[ 
float[[ 
,[[ 
float[[ $
,[[$ %
FloatOptions[[& 2
>[[2 3
t[[4 5
=[[6 7
DOTween[[8 ?
.[[? @
To[[@ B
([[B C
([[C D
)[[D E
=>[[F H
target[[I O
.[[O P

fillAmount[[P Z
,[[Z [
x[[\ ]
=>[[^ `
target[[a g
.[[g h

fillAmount[[h r
=[[s t
x[[u v
,[[v w
endValue	[[x Ä
,
[[Ä Å
duration
[[Ç ä
)
[[ä ã
;
[[ã å
t\\ 
.\\ 
	SetTarget\\ 
(\\ 
target\\ 
)\\ 
;\\  
return]] 
t]] 
;]] 
}^^ 	
publicdd 
staticdd 
Sequencedd 
DOGradientColordd .
(dd. /
thisdd/ 3
Imagedd4 9
targetdd: @
,dd@ A
GradientddB J
gradientddK S
,ddS T
floatddU Z
durationdd[ c
)ddc d
{ee 	
Sequenceff 
sff 
=ff 
DOTweenff  
.ff  !
Sequenceff! )
(ff) *
)ff* +
;ff+ ,
GradientColorKeygg 
[gg 
]gg 
colorsgg %
=gg& '
gradientgg( 0
.gg0 1
	colorKeysgg1 :
;gg: ;
inthh 
lenhh 
=hh 
colorshh 
.hh 
Lengthhh #
;hh# $
forii 
(ii 
intii 
iii 
=ii 
$numii 
;ii 
iii 
<ii 
lenii  #
;ii# $
++ii% '
iii' (
)ii( )
{ii* +
GradientColorKeyjj  
cjj! "
=jj# $
colorsjj% +
[jj+ ,
ijj, -
]jj- .
;jj. /
ifkk 
(kk 
ikk 
==kk 
$numkk 
&&kk 
ckk 
.kk  
timekk  $
<=kk% '
$numkk( )
)kk) *
{kk+ ,
targetll 
.ll 
colorll  
=ll! "
cll# $
.ll$ %
colorll% *
;ll* +
continuemm 
;mm 
}nn 
floatoo 
colorDurationoo #
=oo$ %
ioo& '
==oo( *
lenoo+ .
-oo/ 0
$numoo1 2
?pp 
durationpp 
-pp  
spp! "
.pp" #
Durationpp# +
(pp+ ,
falsepp, 1
)pp1 2
:qq 
durationqq 
*qq  
(qq! "
iqq" #
==qq$ &
$numqq' (
?qq) *
cqq+ ,
.qq, -
timeqq- 1
:qq2 3
cqq4 5
.qq5 6
timeqq6 :
-qq; <
colorsqq= C
[qqC D
iqqD E
-qqF G
$numqqH I
]qqI J
.qqJ K
timeqqK O
)qqO P
;qqP Q
srr 
.rr 
Appendrr 
(rr 
targetrr 
.rr  
DOColorrr  '
(rr' (
crr( )
.rr) *
colorrr* /
,rr/ 0
colorDurationrr1 >
)rr> ?
.rr? @
SetEaserr@ G
(rrG H
EaserrH L
.rrL M
LinearrrM S
)rrS T
)rrT U
;rrU V
}ss 
stt 
.tt 
	SetTargettt 
(tt 
targettt 
)tt 
;tt  
returnuu 
suu 
;uu 
}vv 	
public
ÄÄ 
static
ÄÄ 
TweenerCore
ÄÄ !
<
ÄÄ! "
Vector2
ÄÄ" )
,
ÄÄ) *
Vector2
ÄÄ+ 2
,
ÄÄ2 3
VectorOptions
ÄÄ4 A
>
ÄÄA B
DOFlexibleSize
ÄÄC Q
(
ÄÄQ R
this
ÄÄR V
LayoutElement
ÄÄW d
target
ÄÄe k
,
ÄÄk l
Vector2
ÄÄm t
endValue
ÄÄu }
,
ÄÄ} ~
floatÄÄ Ñ
durationÄÄÖ ç
,ÄÄç é
boolÄÄè ì
snappingÄÄî ú
=ÄÄù û
falseÄÄü §
)ÄÄ§ •
{
ÅÅ 	
TweenerCore
ÇÇ 
<
ÇÇ 
Vector2
ÇÇ 
,
ÇÇ  
Vector2
ÇÇ! (
,
ÇÇ( )
VectorOptions
ÇÇ* 7
>
ÇÇ7 8
t
ÇÇ9 :
=
ÇÇ; <
DOTween
ÇÇ= D
.
ÇÇD E
To
ÇÇE G
(
ÇÇG H
(
ÇÇH I
)
ÇÇI J
=>
ÇÇK M
new
ÇÇN Q
Vector2
ÇÇR Y
(
ÇÇY Z
target
ÇÇZ `
.
ÇÇ` a
flexibleWidth
ÇÇa n
,
ÇÇn o
target
ÇÇp v
.
ÇÇv w
flexibleHeightÇÇw Ö
)ÇÇÖ Ü
,ÇÇÜ á
xÇÇà â
=>ÇÇä å
{ÇÇç é
target
ÉÉ 
.
ÉÉ 
flexibleWidth
ÉÉ (
=
ÉÉ) *
x
ÉÉ+ ,
.
ÉÉ, -
x
ÉÉ- .
;
ÉÉ. /
target
ÑÑ 
.
ÑÑ 
flexibleHeight
ÑÑ )
=
ÑÑ* +
x
ÑÑ, -
.
ÑÑ- .
y
ÑÑ. /
;
ÑÑ/ 0
}
ÖÖ 
,
ÖÖ 
endValue
ÖÖ 
,
ÖÖ 
duration
ÖÖ %
)
ÖÖ% &
;
ÖÖ& '
t
ÜÜ 
.
ÜÜ 

SetOptions
ÜÜ 
(
ÜÜ 
snapping
ÜÜ !
)
ÜÜ! "
.
ÜÜ" #
	SetTarget
ÜÜ# ,
(
ÜÜ, -
target
ÜÜ- 3
)
ÜÜ3 4
;
ÜÜ4 5
return
áá 
t
áá 
;
áá 
}
àà 	
public
éé 
static
éé 
TweenerCore
éé !
<
éé! "
Vector2
éé" )
,
éé) *
Vector2
éé+ 2
,
éé2 3
VectorOptions
éé4 A
>
ééA B
	DOMinSize
ééC L
(
ééL M
this
ééM Q
LayoutElement
ééR _
target
éé` f
,
ééf g
Vector2
ééh o
endValue
éép x
,
ééx y
float
ééz 
durationééÄ à
,ééà â
boolééä é
snappingééè ó
=ééò ô
falseééö ü
)ééü †
{
èè 	
TweenerCore
êê 
<
êê 
Vector2
êê 
,
êê  
Vector2
êê! (
,
êê( )
VectorOptions
êê* 7
>
êê7 8
t
êê9 :
=
êê; <
DOTween
êê= D
.
êêD E
To
êêE G
(
êêG H
(
êêH I
)
êêI J
=>
êêK M
new
êêN Q
Vector2
êêR Y
(
êêY Z
target
êêZ `
.
êê` a
minWidth
êêa i
,
êêi j
target
êêk q
.
êêq r
	minHeight
êêr {
)
êê{ |
,
êê| }
x
êê~ 
=>êêÄ Ç
{êêÉ Ñ
target
ëë 
.
ëë 
minWidth
ëë 
=
ëë  !
x
ëë" #
.
ëë# $
x
ëë$ %
;
ëë% &
target
íí 
.
íí 
	minHeight
íí  
=
íí! "
x
íí# $
.
íí$ %
y
íí% &
;
íí& '
}
ìì 
,
ìì 
endValue
ìì 
,
ìì 
duration
ìì !
)
ìì! "
;
ìì" #
t
îî 
.
îî 

SetOptions
îî 
(
îî 
snapping
îî !
)
îî! "
.
îî" #
	SetTarget
îî# ,
(
îî, -
target
îî- 3
)
îî3 4
;
îî4 5
return
ïï 
t
ïï 
;
ïï 
}
ññ 	
public
úú 
static
úú 
TweenerCore
úú !
<
úú! "
Vector2
úú" )
,
úú) *
Vector2
úú+ 2
,
úú2 3
VectorOptions
úú4 A
>
úúA B
DOPreferredSize
úúC R
(
úúR S
this
úúS W
LayoutElement
úúX e
target
úúf l
,
úúl m
Vector2
úún u
endValue
úúv ~
,
úú~ 
floatúúÄ Ö
durationúúÜ é
,úúé è
boolúúê î
snappingúúï ù
=úúû ü
falseúú† •
)úú• ¶
{
ùù 	
TweenerCore
ûû 
<
ûû 
Vector2
ûû 
,
ûû  
Vector2
ûû! (
,
ûû( )
VectorOptions
ûû* 7
>
ûû7 8
t
ûû9 :
=
ûû; <
DOTween
ûû= D
.
ûûD E
To
ûûE G
(
ûûG H
(
ûûH I
)
ûûI J
=>
ûûK M
new
ûûN Q
Vector2
ûûR Y
(
ûûY Z
target
ûûZ `
.
ûû` a
preferredWidth
ûûa o
,
ûûo p
target
ûûq w
.
ûûw x
preferredHeightûûx á
)ûûá à
,ûûà â
xûûä ã
=>ûûå é
{ûûè ê
target
üü 
.
üü 
preferredWidth
üü %
=
üü& '
x
üü( )
.
üü) *
x
üü* +
;
üü+ ,
target
†† 
.
†† 
preferredHeight
†† &
=
††' (
x
††) *
.
††* +
y
††+ ,
;
††, -
}
°° 
,
°° 
endValue
°° 
,
°° 
duration
°° !
)
°°! "
;
°°" #
t
¢¢ 
.
¢¢ 

SetOptions
¢¢ 
(
¢¢ 
snapping
¢¢ !
)
¢¢! "
.
¢¢" #
	SetTarget
¢¢# ,
(
¢¢, -
target
¢¢- 3
)
¢¢3 4
;
¢¢4 5
return
££ 
t
££ 
;
££ 
}
§§ 	
public
≠≠ 
static
≠≠ 
TweenerCore
≠≠ !
<
≠≠! "
Color
≠≠" '
,
≠≠' (
Color
≠≠) .
,
≠≠. /
ColorOptions
≠≠0 <
>
≠≠< =
DOColor
≠≠> E
(
≠≠E F
this
≠≠F J
Outline
≠≠K R
target
≠≠S Y
,
≠≠Y Z
Color
≠≠[ `
endValue
≠≠a i
,
≠≠i j
float
≠≠k p
duration
≠≠q y
)
≠≠y z
{
ÆÆ 	
TweenerCore
ØØ 
<
ØØ 
Color
ØØ 
,
ØØ 
Color
ØØ $
,
ØØ$ %
ColorOptions
ØØ& 2
>
ØØ2 3
t
ØØ4 5
=
ØØ6 7
DOTween
ØØ8 ?
.
ØØ? @
To
ØØ@ B
(
ØØB C
(
ØØC D
)
ØØD E
=>
ØØF H
target
ØØI O
.
ØØO P
effectColor
ØØP [
,
ØØ[ \
x
ØØ] ^
=>
ØØ_ a
target
ØØb h
.
ØØh i
effectColor
ØØi t
=
ØØu v
x
ØØw x
,
ØØx y
endValueØØz Ç
,ØØÇ É
durationØØÑ å
)ØØå ç
;ØØç é
t
∞∞ 
.
∞∞ 
	SetTarget
∞∞ 
(
∞∞ 
target
∞∞ 
)
∞∞ 
;
∞∞  
return
±± 
t
±± 
;
±± 
}
≤≤ 	
public
∑∑ 
static
∑∑ 
TweenerCore
∑∑ !
<
∑∑! "
Color
∑∑" '
,
∑∑' (
Color
∑∑) .
,
∑∑. /
ColorOptions
∑∑0 <
>
∑∑< =
DOFade
∑∑> D
(
∑∑D E
this
∑∑E I
Outline
∑∑J Q
target
∑∑R X
,
∑∑X Y
float
∑∑Z _
endValue
∑∑` h
,
∑∑h i
float
∑∑j o
duration
∑∑p x
)
∑∑x y
{
∏∏ 	
TweenerCore
ππ 
<
ππ 
Color
ππ 
,
ππ 
Color
ππ $
,
ππ$ %
ColorOptions
ππ& 2
>
ππ2 3
t
ππ4 5
=
ππ6 7
DOTween
ππ8 ?
.
ππ? @
ToAlpha
ππ@ G
(
ππG H
(
ππH I
)
ππI J
=>
ππK M
target
ππN T
.
ππT U
effectColor
ππU `
,
ππ` a
x
ππb c
=>
ππd f
target
ππg m
.
ππm n
effectColor
ππn y
=
ππz {
x
ππ| }
,
ππ} ~
endValueππ á
,ππá à
durationππâ ë
)ππë í
;ππí ì
t
∫∫ 
.
∫∫ 
	SetTarget
∫∫ 
(
∫∫ 
target
∫∫ 
)
∫∫ 
;
∫∫  
return
ªª 
t
ªª 
;
ªª 
}
ºº 	
public
¡¡ 
static
¡¡ 
TweenerCore
¡¡ !
<
¡¡! "
Vector2
¡¡" )
,
¡¡) *
Vector2
¡¡+ 2
,
¡¡2 3
VectorOptions
¡¡4 A
>
¡¡A B
DOScale
¡¡C J
(
¡¡J K
this
¡¡K O
Outline
¡¡P W
target
¡¡X ^
,
¡¡^ _
Vector2
¡¡` g
endValue
¡¡h p
,
¡¡p q
float
¡¡r w
duration¡¡x Ä
)¡¡Ä Å
{
¬¬ 	
TweenerCore
√√ 
<
√√ 
Vector2
√√ 
,
√√  
Vector2
√√! (
,
√√( )
VectorOptions
√√* 7
>
√√7 8
t
√√9 :
=
√√; <
DOTween
√√= D
.
√√D E
To
√√E G
(
√√G H
(
√√H I
)
√√I J
=>
√√K M
target
√√N T
.
√√T U
effectDistance
√√U c
,
√√c d
x
√√e f
=>
√√g i
target
√√j p
.
√√p q
effectDistance
√√q 
=√√Ä Å
x√√Ç É
,√√É Ñ
endValue√√Ö ç
,√√ç é
duration√√è ó
)√√ó ò
;√√ò ô
t
ƒƒ 
.
ƒƒ 
	SetTarget
ƒƒ 
(
ƒƒ 
target
ƒƒ 
)
ƒƒ 
;
ƒƒ  
return
≈≈ 
t
≈≈ 
;
≈≈ 
}
∆∆ 	
public
–– 
static
–– 
TweenerCore
–– !
<
––! "
Vector2
––" )
,
––) *
Vector2
––+ 2
,
––2 3
VectorOptions
––4 A
>
––A B
DOAnchorPos
––C N
(
––N O
this
––O S
RectTransform
––T a
target
––b h
,
––h i
Vector2
––j q
endValue
––r z
,
––z {
float––| Å
duration––Ç ä
,––ä ã
bool––å ê
snapping––ë ô
=––ö õ
false––ú °
)––° ¢
{
—— 	
TweenerCore
““ 
<
““ 
Vector2
““ 
,
““  
Vector2
““! (
,
““( )
VectorOptions
““* 7
>
““7 8
t
““9 :
=
““; <
DOTween
““= D
.
““D E
To
““E G
(
““G H
(
““H I
)
““I J
=>
““K M
target
““N T
.
““T U
anchoredPosition
““U e
,
““e f
x
““g h
=>
““i k
target
““l r
.
““r s
anchoredPosition““s É
=““Ñ Ö
x““Ü á
,““á à
endValue““â ë
,““ë í
duration““ì õ
)““õ ú
;““ú ù
t
”” 
.
”” 

SetOptions
”” 
(
”” 
snapping
”” !
)
””! "
.
””" #
	SetTarget
””# ,
(
””, -
target
””- 3
)
””3 4
;
””4 5
return
‘‘ 
t
‘‘ 
;
‘‘ 
}
’’ 	
public
⁄⁄ 
static
⁄⁄ 
TweenerCore
⁄⁄ !
<
⁄⁄! "
Vector2
⁄⁄" )
,
⁄⁄) *
Vector2
⁄⁄+ 2
,
⁄⁄2 3
VectorOptions
⁄⁄4 A
>
⁄⁄A B
DOAnchorPosX
⁄⁄C O
(
⁄⁄O P
this
⁄⁄P T
RectTransform
⁄⁄U b
target
⁄⁄c i
,
⁄⁄i j
float
⁄⁄k p
endValue
⁄⁄q y
,
⁄⁄y z
float⁄⁄{ Ä
duration⁄⁄Å â
,⁄⁄â ä
bool⁄⁄ã è
snapping⁄⁄ê ò
=⁄⁄ô ö
false⁄⁄õ †
)⁄⁄† °
{
€€ 	
TweenerCore
‹‹ 
<
‹‹ 
Vector2
‹‹ 
,
‹‹  
Vector2
‹‹! (
,
‹‹( )
VectorOptions
‹‹* 7
>
‹‹7 8
t
‹‹9 :
=
‹‹; <
DOTween
‹‹= D
.
‹‹D E
To
‹‹E G
(
‹‹G H
(
‹‹H I
)
‹‹I J
=>
‹‹K M
target
‹‹N T
.
‹‹T U
anchoredPosition
‹‹U e
,
‹‹e f
x
‹‹g h
=>
‹‹i k
target
‹‹l r
.
‹‹r s
anchoredPosition‹‹s É
=‹‹Ñ Ö
x‹‹Ü á
,‹‹á à
new‹‹â å
Vector2‹‹ç î
(‹‹î ï
endValue‹‹ï ù
,‹‹ù û
$num‹‹ü †
)‹‹† °
,‹‹° ¢
duration‹‹£ ´
)‹‹´ ¨
;‹‹¨ ≠
t
›› 
.
›› 

SetOptions
›› 
(
›› 
AxisConstraint
›› '
.
››' (
X
››( )
,
››) *
snapping
››+ 3
)
››3 4
.
››4 5
	SetTarget
››5 >
(
››> ?
target
››? E
)
››E F
;
››F G
return
ﬁﬁ 
t
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 	
public
‰‰ 
static
‰‰ 
TweenerCore
‰‰ !
<
‰‰! "
Vector2
‰‰" )
,
‰‰) *
Vector2
‰‰+ 2
,
‰‰2 3
VectorOptions
‰‰4 A
>
‰‰A B
DOAnchorPosY
‰‰C O
(
‰‰O P
this
‰‰P T
RectTransform
‰‰U b
target
‰‰c i
,
‰‰i j
float
‰‰k p
endValue
‰‰q y
,
‰‰y z
float‰‰{ Ä
duration‰‰Å â
,‰‰â ä
bool‰‰ã è
snapping‰‰ê ò
=‰‰ô ö
false‰‰õ †
)‰‰† °
{
ÂÂ 	
TweenerCore
ÊÊ 
<
ÊÊ 
Vector2
ÊÊ 
,
ÊÊ  
Vector2
ÊÊ! (
,
ÊÊ( )
VectorOptions
ÊÊ* 7
>
ÊÊ7 8
t
ÊÊ9 :
=
ÊÊ; <
DOTween
ÊÊ= D
.
ÊÊD E
To
ÊÊE G
(
ÊÊG H
(
ÊÊH I
)
ÊÊI J
=>
ÊÊK M
target
ÊÊN T
.
ÊÊT U
anchoredPosition
ÊÊU e
,
ÊÊe f
x
ÊÊg h
=>
ÊÊi k
target
ÊÊl r
.
ÊÊr s
anchoredPositionÊÊs É
=ÊÊÑ Ö
xÊÊÜ á
,ÊÊá à
newÊÊâ å
Vector2ÊÊç î
(ÊÊî ï
$numÊÊï ñ
,ÊÊñ ó
endValueÊÊò †
)ÊÊ† °
,ÊÊ° ¢
durationÊÊ£ ´
)ÊÊ´ ¨
;ÊÊ¨ ≠
t
ÁÁ 
.
ÁÁ 

SetOptions
ÁÁ 
(
ÁÁ 
AxisConstraint
ÁÁ '
.
ÁÁ' (
Y
ÁÁ( )
,
ÁÁ) *
snapping
ÁÁ+ 3
)
ÁÁ3 4
.
ÁÁ4 5
	SetTarget
ÁÁ5 >
(
ÁÁ> ?
target
ÁÁ? E
)
ÁÁE F
;
ÁÁF G
return
ËË 
t
ËË 
;
ËË 
}
ÈÈ 	
public
ÔÔ 
static
ÔÔ 
TweenerCore
ÔÔ !
<
ÔÔ! "
Vector3
ÔÔ" )
,
ÔÔ) *
Vector3
ÔÔ+ 2
,
ÔÔ2 3
VectorOptions
ÔÔ4 A
>
ÔÔA B
DOAnchorPos3D
ÔÔC P
(
ÔÔP Q
this
ÔÔQ U
RectTransform
ÔÔV c
target
ÔÔd j
,
ÔÔj k
Vector3
ÔÔl s
endValue
ÔÔt |
,
ÔÔ| }
floatÔÔ~ É
durationÔÔÑ å
,ÔÔå ç
boolÔÔé í
snappingÔÔì õ
=ÔÔú ù
falseÔÔû £
)ÔÔ£ §
{
 	
TweenerCore
ÒÒ 
<
ÒÒ 
Vector3
ÒÒ 
,
ÒÒ  
Vector3
ÒÒ! (
,
ÒÒ( )
VectorOptions
ÒÒ* 7
>
ÒÒ7 8
t
ÒÒ9 :
=
ÒÒ; <
DOTween
ÒÒ= D
.
ÒÒD E
To
ÒÒE G
(
ÒÒG H
(
ÒÒH I
)
ÒÒI J
=>
ÒÒK M
target
ÒÒN T
.
ÒÒT U 
anchoredPosition3D
ÒÒU g
,
ÒÒg h
x
ÒÒi j
=>
ÒÒk m
target
ÒÒn t
.
ÒÒt u!
anchoredPosition3DÒÒu á
=ÒÒà â
xÒÒä ã
,ÒÒã å
endValueÒÒç ï
,ÒÒï ñ
durationÒÒó ü
)ÒÒü †
;ÒÒ† °
t
ÚÚ 
.
ÚÚ 

SetOptions
ÚÚ 
(
ÚÚ 
snapping
ÚÚ !
)
ÚÚ! "
.
ÚÚ" #
	SetTarget
ÚÚ# ,
(
ÚÚ, -
target
ÚÚ- 3
)
ÚÚ3 4
;
ÚÚ4 5
return
ÛÛ 
t
ÛÛ 
;
ÛÛ 
}
ÙÙ 	
public
˘˘ 
static
˘˘ 
TweenerCore
˘˘ !
<
˘˘! "
Vector3
˘˘" )
,
˘˘) *
Vector3
˘˘+ 2
,
˘˘2 3
VectorOptions
˘˘4 A
>
˘˘A B
DOAnchorPos3DX
˘˘C Q
(
˘˘Q R
this
˘˘R V
RectTransform
˘˘W d
target
˘˘e k
,
˘˘k l
float
˘˘m r
endValue
˘˘s {
,
˘˘{ |
float˘˘} Ç
duration˘˘É ã
,˘˘ã å
bool˘˘ç ë
snapping˘˘í ö
=˘˘õ ú
false˘˘ù ¢
)˘˘¢ £
{
˙˙ 	
TweenerCore
˚˚ 
<
˚˚ 
Vector3
˚˚ 
,
˚˚  
Vector3
˚˚! (
,
˚˚( )
VectorOptions
˚˚* 7
>
˚˚7 8
t
˚˚9 :
=
˚˚; <
DOTween
˚˚= D
.
˚˚D E
To
˚˚E G
(
˚˚G H
(
˚˚H I
)
˚˚I J
=>
˚˚K M
target
˚˚N T
.
˚˚T U 
anchoredPosition3D
˚˚U g
,
˚˚g h
x
˚˚i j
=>
˚˚k m
target
˚˚n t
.
˚˚t u!
anchoredPosition3D˚˚u á
=˚˚à â
x˚˚ä ã
,˚˚ã å
new˚˚ç ê
Vector3˚˚ë ò
(˚˚ò ô
endValue˚˚ô °
,˚˚° ¢
$num˚˚£ §
,˚˚§ •
$num˚˚¶ ß
)˚˚ß ®
,˚˚® ©
duration˚˚™ ≤
)˚˚≤ ≥
;˚˚≥ ¥
t
¸¸ 
.
¸¸ 

SetOptions
¸¸ 
(
¸¸ 
AxisConstraint
¸¸ '
.
¸¸' (
X
¸¸( )
,
¸¸) *
snapping
¸¸+ 3
)
¸¸3 4
.
¸¸4 5
	SetTarget
¸¸5 >
(
¸¸> ?
target
¸¸? E
)
¸¸E F
;
¸¸F G
return
˝˝ 
t
˝˝ 
;
˝˝ 
}
˛˛ 	
public
ÉÉ 
static
ÉÉ 
TweenerCore
ÉÉ !
<
ÉÉ! "
Vector3
ÉÉ" )
,
ÉÉ) *
Vector3
ÉÉ+ 2
,
ÉÉ2 3
VectorOptions
ÉÉ4 A
>
ÉÉA B
DOAnchorPos3DY
ÉÉC Q
(
ÉÉQ R
this
ÉÉR V
RectTransform
ÉÉW d
target
ÉÉe k
,
ÉÉk l
float
ÉÉm r
endValue
ÉÉs {
,
ÉÉ{ |
floatÉÉ} Ç
durationÉÉÉ ã
,ÉÉã å
boolÉÉç ë
snappingÉÉí ö
=ÉÉõ ú
falseÉÉù ¢
)ÉÉ¢ £
{
ÑÑ 	
TweenerCore
ÖÖ 
<
ÖÖ 
Vector3
ÖÖ 
,
ÖÖ  
Vector3
ÖÖ! (
,
ÖÖ( )
VectorOptions
ÖÖ* 7
>
ÖÖ7 8
t
ÖÖ9 :
=
ÖÖ; <
DOTween
ÖÖ= D
.
ÖÖD E
To
ÖÖE G
(
ÖÖG H
(
ÖÖH I
)
ÖÖI J
=>
ÖÖK M
target
ÖÖN T
.
ÖÖT U 
anchoredPosition3D
ÖÖU g
,
ÖÖg h
x
ÖÖi j
=>
ÖÖk m
target
ÖÖn t
.
ÖÖt u!
anchoredPosition3DÖÖu á
=ÖÖà â
xÖÖä ã
,ÖÖã å
newÖÖç ê
Vector3ÖÖë ò
(ÖÖò ô
$numÖÖô ö
,ÖÖö õ
endValueÖÖú §
,ÖÖ§ •
$numÖÖ¶ ß
)ÖÖß ®
,ÖÖ® ©
durationÖÖ™ ≤
)ÖÖ≤ ≥
;ÖÖ≥ ¥
t
ÜÜ 
.
ÜÜ 

SetOptions
ÜÜ 
(
ÜÜ 
AxisConstraint
ÜÜ '
.
ÜÜ' (
Y
ÜÜ( )
,
ÜÜ) *
snapping
ÜÜ+ 3
)
ÜÜ3 4
.
ÜÜ4 5
	SetTarget
ÜÜ5 >
(
ÜÜ> ?
target
ÜÜ? E
)
ÜÜE F
;
ÜÜF G
return
áá 
t
áá 
;
áá 
}
àà 	
public
çç 
static
çç 
TweenerCore
çç !
<
çç! "
Vector3
çç" )
,
çç) *
Vector3
çç+ 2
,
çç2 3
VectorOptions
çç4 A
>
ççA B
DOAnchorPos3DZ
ççC Q
(
ççQ R
this
ççR V
RectTransform
ççW d
target
ççe k
,
ççk l
float
ççm r
endValue
ççs {
,
çç{ |
floatçç} Ç
durationççÉ ã
,ççã å
boolççç ë
snappingççí ö
=ççõ ú
falseççù ¢
)çç¢ £
{
éé 	
TweenerCore
èè 
<
èè 
Vector3
èè 
,
èè  
Vector3
èè! (
,
èè( )
VectorOptions
èè* 7
>
èè7 8
t
èè9 :
=
èè; <
DOTween
èè= D
.
èèD E
To
èèE G
(
èèG H
(
èèH I
)
èèI J
=>
èèK M
target
èèN T
.
èèT U 
anchoredPosition3D
èèU g
,
èèg h
x
èèi j
=>
èèk m
target
èèn t
.
èèt u!
anchoredPosition3Dèèu á
=èèà â
xèèä ã
,èèã å
newèèç ê
Vector3èèë ò
(èèò ô
$numèèô ö
,èèö õ
$numèèú ù
,èèù û
endValueèèü ß
)èèß ®
,èè® ©
durationèè™ ≤
)èè≤ ≥
;èè≥ ¥
t
êê 
.
êê 

SetOptions
êê 
(
êê 
AxisConstraint
êê '
.
êê' (
Z
êê( )
,
êê) *
snapping
êê+ 3
)
êê3 4
.
êê4 5
	SetTarget
êê5 >
(
êê> ?
target
êê? E
)
êêE F
;
êêF G
return
ëë 
t
ëë 
;
ëë 
}
íí 	
public
òò 
static
òò 
TweenerCore
òò !
<
òò! "
Vector2
òò" )
,
òò) *
Vector2
òò+ 2
,
òò2 3
VectorOptions
òò4 A
>
òòA B
DOAnchorMax
òòC N
(
òòN O
this
òòO S
RectTransform
òòT a
target
òòb h
,
òòh i
Vector2
òòj q
endValue
òòr z
,
òòz {
floatòò| Å
durationòòÇ ä
,òòä ã
boolòòå ê
snappingòòë ô
=òòö õ
falseòòú °
)òò° ¢
{
ôô 	
TweenerCore
öö 
<
öö 
Vector2
öö 
,
öö  
Vector2
öö! (
,
öö( )
VectorOptions
öö* 7
>
öö7 8
t
öö9 :
=
öö; <
DOTween
öö= D
.
ööD E
To
ööE G
(
ööG H
(
ööH I
)
ööI J
=>
ööK M
target
ööN T
.
ööT U
	anchorMax
ööU ^
,
öö^ _
x
öö` a
=>
ööb d
target
ööe k
.
öök l
	anchorMax
ööl u
=
ööv w
x
ööx y
,
ööy z
endValueöö{ É
,ööÉ Ñ
durationööÖ ç
)ööç é
;ööé è
t
õõ 
.
õõ 

SetOptions
õõ 
(
õõ 
snapping
õõ !
)
õõ! "
.
õõ" #
	SetTarget
õõ# ,
(
õõ, -
target
õõ- 3
)
õõ3 4
;
õõ4 5
return
úú 
t
úú 
;
úú 
}
ùù 	
public
££ 
static
££ 
TweenerCore
££ !
<
££! "
Vector2
££" )
,
££) *
Vector2
££+ 2
,
££2 3
VectorOptions
££4 A
>
££A B
DOAnchorMin
££C N
(
££N O
this
££O S
RectTransform
££T a
target
££b h
,
££h i
Vector2
££j q
endValue
££r z
,
££z {
float££| Å
duration££Ç ä
,££ä ã
bool££å ê
snapping££ë ô
=££ö õ
false££ú °
)££° ¢
{
§§ 	
TweenerCore
•• 
<
•• 
Vector2
•• 
,
••  
Vector2
••! (
,
••( )
VectorOptions
••* 7
>
••7 8
t
••9 :
=
••; <
DOTween
••= D
.
••D E
To
••E G
(
••G H
(
••H I
)
••I J
=>
••K M
target
••N T
.
••T U
	anchorMin
••U ^
,
••^ _
x
••` a
=>
••b d
target
••e k
.
••k l
	anchorMin
••l u
=
••v w
x
••x y
,
••y z
endValue••{ É
,••É Ñ
duration••Ö ç
)••ç é
;••é è
t
¶¶ 
.
¶¶ 

SetOptions
¶¶ 
(
¶¶ 
snapping
¶¶ !
)
¶¶! "
.
¶¶" #
	SetTarget
¶¶# ,
(
¶¶, -
target
¶¶- 3
)
¶¶3 4
;
¶¶4 5
return
ßß 
t
ßß 
;
ßß 
}
®® 	
public
≠≠ 
static
≠≠ 
TweenerCore
≠≠ !
<
≠≠! "
Vector2
≠≠" )
,
≠≠) *
Vector2
≠≠+ 2
,
≠≠2 3
VectorOptions
≠≠4 A
>
≠≠A B
DOPivot
≠≠C J
(
≠≠J K
this
≠≠K O
RectTransform
≠≠P ]
target
≠≠^ d
,
≠≠d e
Vector2
≠≠f m
endValue
≠≠n v
,
≠≠v w
float
≠≠x }
duration≠≠~ Ü
)≠≠Ü á
{
ÆÆ 	
TweenerCore
ØØ 
<
ØØ 
Vector2
ØØ 
,
ØØ  
Vector2
ØØ! (
,
ØØ( )
VectorOptions
ØØ* 7
>
ØØ7 8
t
ØØ9 :
=
ØØ; <
DOTween
ØØ= D
.
ØØD E
To
ØØE G
(
ØØG H
(
ØØH I
)
ØØI J
=>
ØØK M
target
ØØN T
.
ØØT U
pivot
ØØU Z
,
ØØZ [
x
ØØ\ ]
=>
ØØ^ `
target
ØØa g
.
ØØg h
pivot
ØØh m
=
ØØn o
x
ØØp q
,
ØØq r
endValue
ØØs {
,
ØØ{ |
durationØØ} Ö
)ØØÖ Ü
;ØØÜ á
t
∞∞ 
.
∞∞ 
	SetTarget
∞∞ 
(
∞∞ 
target
∞∞ 
)
∞∞ 
;
∞∞  
return
±± 
t
±± 
;
±± 
}
≤≤ 	
public
∂∂ 
static
∂∂ 
TweenerCore
∂∂ !
<
∂∂! "
Vector2
∂∂" )
,
∂∂) *
Vector2
∂∂+ 2
,
∂∂2 3
VectorOptions
∂∂4 A
>
∂∂A B
DOPivotX
∂∂C K
(
∂∂K L
this
∂∂L P
RectTransform
∂∂Q ^
target
∂∂_ e
,
∂∂e f
float
∂∂g l
endValue
∂∂m u
,
∂∂u v
float
∂∂w |
duration∂∂} Ö
)∂∂Ö Ü
{
∑∑ 	
TweenerCore
∏∏ 
<
∏∏ 
Vector2
∏∏ 
,
∏∏  
Vector2
∏∏! (
,
∏∏( )
VectorOptions
∏∏* 7
>
∏∏7 8
t
∏∏9 :
=
∏∏; <
DOTween
∏∏= D
.
∏∏D E
To
∏∏E G
(
∏∏G H
(
∏∏H I
)
∏∏I J
=>
∏∏K M
target
∏∏N T
.
∏∏T U
pivot
∏∏U Z
,
∏∏Z [
x
∏∏\ ]
=>
∏∏^ `
target
∏∏a g
.
∏∏g h
pivot
∏∏h m
=
∏∏n o
x
∏∏p q
,
∏∏q r
new
∏∏s v
Vector2
∏∏w ~
(
∏∏~ 
endValue∏∏ á
,∏∏á à
$num∏∏â ä
)∏∏ä ã
,∏∏ã å
duration∏∏ç ï
)∏∏ï ñ
;∏∏ñ ó
t
ππ 
.
ππ 

SetOptions
ππ 
(
ππ 
AxisConstraint
ππ '
.
ππ' (
X
ππ( )
)
ππ) *
.
ππ* +
	SetTarget
ππ+ 4
(
ππ4 5
target
ππ5 ;
)
ππ; <
;
ππ< =
return
∫∫ 
t
∫∫ 
;
∫∫ 
}
ªª 	
public
øø 
static
øø 
TweenerCore
øø !
<
øø! "
Vector2
øø" )
,
øø) *
Vector2
øø+ 2
,
øø2 3
VectorOptions
øø4 A
>
øøA B
DOPivotY
øøC K
(
øøK L
this
øøL P
RectTransform
øøQ ^
target
øø_ e
,
øøe f
float
øøg l
endValue
øøm u
,
øøu v
float
øøw |
durationøø} Ö
)øøÖ Ü
{
¿¿ 	
TweenerCore
¡¡ 
<
¡¡ 
Vector2
¡¡ 
,
¡¡  
Vector2
¡¡! (
,
¡¡( )
VectorOptions
¡¡* 7
>
¡¡7 8
t
¡¡9 :
=
¡¡; <
DOTween
¡¡= D
.
¡¡D E
To
¡¡E G
(
¡¡G H
(
¡¡H I
)
¡¡I J
=>
¡¡K M
target
¡¡N T
.
¡¡T U
pivot
¡¡U Z
,
¡¡Z [
x
¡¡\ ]
=>
¡¡^ `
target
¡¡a g
.
¡¡g h
pivot
¡¡h m
=
¡¡n o
x
¡¡p q
,
¡¡q r
new
¡¡s v
Vector2
¡¡w ~
(
¡¡~ 
$num¡¡ Ä
,¡¡Ä Å
endValue¡¡Ç ä
)¡¡ä ã
,¡¡ã å
duration¡¡ç ï
)¡¡ï ñ
;¡¡ñ ó
t
¬¬ 
.
¬¬ 

SetOptions
¬¬ 
(
¬¬ 
AxisConstraint
¬¬ '
.
¬¬' (
Y
¬¬( )
)
¬¬) *
.
¬¬* +
	SetTarget
¬¬+ 4
(
¬¬4 5
target
¬¬5 ;
)
¬¬; <
;
¬¬< =
return
√√ 
t
√√ 
;
√√ 
}
ƒƒ 	
public
   
static
   
TweenerCore
   !
<
  ! "
Vector2
  " )
,
  ) *
Vector2
  + 2
,
  2 3
VectorOptions
  4 A
>
  A B
DOSizeDelta
  C N
(
  N O
this
  O S
RectTransform
  T a
target
  b h
,
  h i
Vector2
  j q
endValue
  r z
,
  z {
float  | Å
duration  Ç ä
,  ä ã
bool  å ê
snapping  ë ô
=  ö õ
false  ú °
)  ° ¢
{
ÀÀ 	
TweenerCore
ÃÃ 
<
ÃÃ 
Vector2
ÃÃ 
,
ÃÃ  
Vector2
ÃÃ! (
,
ÃÃ( )
VectorOptions
ÃÃ* 7
>
ÃÃ7 8
t
ÃÃ9 :
=
ÃÃ; <
DOTween
ÃÃ= D
.
ÃÃD E
To
ÃÃE G
(
ÃÃG H
(
ÃÃH I
)
ÃÃI J
=>
ÃÃK M
target
ÃÃN T
.
ÃÃT U
	sizeDelta
ÃÃU ^
,
ÃÃ^ _
x
ÃÃ` a
=>
ÃÃb d
target
ÃÃe k
.
ÃÃk l
	sizeDelta
ÃÃl u
=
ÃÃv w
x
ÃÃx y
,
ÃÃy z
endValueÃÃ{ É
,ÃÃÉ Ñ
durationÃÃÖ ç
)ÃÃç é
;ÃÃé è
t
ÕÕ 
.
ÕÕ 

SetOptions
ÕÕ 
(
ÕÕ 
snapping
ÕÕ !
)
ÕÕ! "
.
ÕÕ" #
	SetTarget
ÕÕ# ,
(
ÕÕ, -
target
ÕÕ- 3
)
ÕÕ3 4
;
ÕÕ4 5
return
ŒŒ 
t
ŒŒ 
;
ŒŒ 
}
œœ 	
public
€€ 
static
€€ 
Tweener
€€ 
DOPunchAnchorPos
€€ .
(
€€. /
this
€€/ 3
RectTransform
€€4 A
target
€€B H
,
€€H I
Vector2
€€J Q
punch
€€R W
,
€€W X
float
€€Y ^
duration
€€_ g
,
€€g h
int
€€i l
vibrato
€€m t
=
€€u v
$num
€€w y
,
€€y z
float€€{ Ä

elasticity€€Å ã
=€€å ç
$num€€é è
,€€è ê
bool€€ë ï
snapping€€ñ û
=€€ü †
false€€° ¶
)€€¶ ß
{
‹‹ 	
return
›› 
DOTween
›› 
.
›› 
Punch
››  
(
››  !
(
››! "
)
››" #
=>
››$ &
target
››' -
.
››- .
anchoredPosition
››. >
,
››> ?
x
››@ A
=>
››B D
target
››E K
.
››K L
anchoredPosition
››L \
=
››] ^
x
››_ `
,
››` a
punch
››b g
,
››g h
duration
››i q
,
››q r
vibrato
››s z
,
››z {

elasticity››| Ü
)››Ü á
.
ﬁﬁ 
	SetTarget
ﬁﬁ 
(
ﬁﬁ 
target
ﬁﬁ !
)
ﬁﬁ! "
.
ﬁﬁ" #

SetOptions
ﬁﬁ# -
(
ﬁﬁ- .
snapping
ﬁﬁ. 6
)
ﬁﬁ6 7
;
ﬁﬁ7 8
}
ﬂﬂ 	
public
ÍÍ 
static
ÍÍ 
Tweener
ÍÍ 
DOShakeAnchorPos
ÍÍ .
(
ÍÍ. /
this
ÍÍ/ 3
RectTransform
ÍÍ4 A
target
ÍÍB H
,
ÍÍH I
float
ÍÍJ O
duration
ÍÍP X
,
ÍÍX Y
float
ÍÍZ _
strength
ÍÍ` h
=
ÍÍi j
$num
ÍÍk n
,
ÍÍn o
int
ÍÍp s
vibrato
ÍÍt {
=
ÍÍ| }
$numÍÍ~ Ä
,ÍÍÄ Å
floatÍÍÇ á

randomnessÍÍà í
=ÍÍì î
$numÍÍï ó
,ÍÍó ò
boolÍÍô ù
snappingÍÍû ¶
=ÍÍß ®
falseÍÍ© Æ
,ÍÍÆ Ø
boolÍÍ∞ ¥
fadeOutÍÍµ º
=ÍÍΩ æ
trueÍÍø √
)ÍÍ√ ƒ
{
ÎÎ 	
return
ÏÏ 
DOTween
ÏÏ 
.
ÏÏ 
Shake
ÏÏ  
(
ÏÏ  !
(
ÏÏ! "
)
ÏÏ" #
=>
ÏÏ$ &
target
ÏÏ' -
.
ÏÏ- .
anchoredPosition
ÏÏ. >
,
ÏÏ> ?
x
ÏÏ@ A
=>
ÏÏB D
target
ÏÏE K
.
ÏÏK L
anchoredPosition
ÏÏL \
=
ÏÏ] ^
x
ÏÏ_ `
,
ÏÏ` a
duration
ÏÏb j
,
ÏÏj k
strength
ÏÏl t
,
ÏÏt u
vibrato
ÏÏv }
,
ÏÏ} ~

randomnessÏÏ â
,ÏÏâ ä
trueÏÏã è
,ÏÏè ê
fadeOutÏÏë ò
)ÏÏò ô
.
ÌÌ 
	SetTarget
ÌÌ 
(
ÌÌ 
target
ÌÌ !
)
ÌÌ! "
.
ÌÌ" ##
SetSpecialStartupMode
ÌÌ# 8
(
ÌÌ8 9 
SpecialStartupMode
ÌÌ9 K
.
ÌÌK L
SetShake
ÌÌL T
)
ÌÌT U
.
ÌÌU V

SetOptions
ÌÌV `
(
ÌÌ` a
snapping
ÌÌa i
)
ÌÌi j
;
ÌÌj k
}
ÓÓ 	
public
¯¯ 
static
¯¯ 
Tweener
¯¯ 
DOShakeAnchorPos
¯¯ .
(
¯¯. /
this
¯¯/ 3
RectTransform
¯¯4 A
target
¯¯B H
,
¯¯H I
float
¯¯J O
duration
¯¯P X
,
¯¯X Y
Vector2
¯¯Z a
strength
¯¯b j
,
¯¯j k
int
¯¯l o
vibrato
¯¯p w
=
¯¯x y
$num
¯¯z |
,
¯¯| }
float¯¯~ É

randomness¯¯Ñ é
=¯¯è ê
$num¯¯ë ì
,¯¯ì î
bool¯¯ï ô
snapping¯¯ö ¢
=¯¯£ §
false¯¯• ™
,¯¯™ ´
bool¯¯¨ ∞
fadeOut¯¯± ∏
=¯¯π ∫
true¯¯ª ø
)¯¯ø ¿
{
˘˘ 	
return
˙˙ 
DOTween
˙˙ 
.
˙˙ 
Shake
˙˙  
(
˙˙  !
(
˙˙! "
)
˙˙" #
=>
˙˙$ &
target
˙˙' -
.
˙˙- .
anchoredPosition
˙˙. >
,
˙˙> ?
x
˙˙@ A
=>
˙˙B D
target
˙˙E K
.
˙˙K L
anchoredPosition
˙˙L \
=
˙˙] ^
x
˙˙_ `
,
˙˙` a
duration
˙˙b j
,
˙˙j k
strength
˙˙l t
,
˙˙t u
vibrato
˙˙v }
,
˙˙} ~

randomness˙˙ â
,˙˙â ä
fadeOut˙˙ã í
)˙˙í ì
.
˚˚ 
	SetTarget
˚˚ 
(
˚˚ 
target
˚˚ !
)
˚˚! "
.
˚˚" ##
SetSpecialStartupMode
˚˚# 8
(
˚˚8 9 
SpecialStartupMode
˚˚9 K
.
˚˚K L
SetShake
˚˚L T
)
˚˚T U
.
˚˚U V

SetOptions
˚˚V `
(
˚˚` a
snapping
˚˚a i
)
˚˚i j
;
˚˚j k
}
¸¸ 	
public
àà 
static
àà 
Sequence
àà 
DOJumpAnchorPos
àà .
(
àà. /
this
àà/ 3
RectTransform
àà4 A
target
ààB H
,
ààH I
Vector2
ààJ Q
endValue
ààR Z
,
ààZ [
float
àà\ a
	jumpPower
ààb k
,
ààk l
int
ààm p
numJumps
ààq y
,
àày z
floatàà{ Ä
durationààÅ â
,ààâ ä
boolààã è
snappingààê ò
=ààô ö
falseààõ †
)àà† °
{
ââ 	
if
ää 
(
ää 
numJumps
ää 
<
ää 
$num
ää 
)
ää 
numJumps
ää &
=
ää' (
$num
ää) *
;
ää* +
float
ãã 
	startPosY
ãã 
=
ãã 
$num
ãã 
;
ãã  
float
åå 
offsetY
åå 
=
åå 
-
åå 
$num
åå 
;
åå 
bool
çç 

offsetYSet
çç 
=
çç 
false
çç #
;
çç# $
Sequence
ëë 
s
ëë 
=
ëë 
DOTween
ëë  
.
ëë  !
Sequence
ëë! )
(
ëë) *
)
ëë* +
;
ëë+ ,
Tween
íí 
yTween
íí 
=
íí 
DOTween
íí "
.
íí" #
To
íí# %
(
íí% &
(
íí& '
)
íí' (
=>
íí) +
target
íí, 2
.
íí2 3
anchoredPosition
íí3 C
,
ííC D
x
ííE F
=>
ííG I
target
ííJ P
.
ííP Q
anchoredPosition
ííQ a
=
ííb c
x
ííd e
,
ííe f
new
ííg j
Vector2
íík r
(
íír s
$num
íís t
,
íít u
	jumpPower
íív 
)íí Ä
,ííÄ Å
durationííÇ ä
/ííã å
(ííç é
numJumpsííé ñ
*ííó ò
$numííô ö
)ííö õ
)ííõ ú
.
ìì 

SetOptions
ìì 
(
ìì 
AxisConstraint
ìì *
.
ìì* +
Y
ìì+ ,
,
ìì, -
snapping
ìì. 6
)
ìì6 7
.
ìì7 8
SetEase
ìì8 ?
(
ìì? @
Ease
ìì@ D
.
ììD E
OutQuad
ììE L
)
ììL M
.
ììM N
SetRelative
ììN Y
(
ììY Z
)
ììZ [
.
îî 
SetLoops
îî 
(
îî 
numJumps
îî "
*
îî# $
$num
îî% &
,
îî& '
LoopType
îî( 0
.
îî0 1
Yoyo
îî1 5
)
îî5 6
.
ïï 
OnStart
ïï 
(
ïï 
(
ïï 
)
ïï 
=>
ïï 
	startPosY
ïï '
=
ïï( )
target
ïï* 0
.
ïï0 1
anchoredPosition
ïï1 A
.
ïïA B
y
ïïB C
)
ïïC D
;
ïïD E
s
ññ 
.
ññ 
Append
ññ 
(
ññ 
DOTween
ññ 
.
ññ 
To
ññ 
(
ññ  
(
ññ  !
)
ññ! "
=>
ññ# %
target
ññ& ,
.
ññ, -
anchoredPosition
ññ- =
,
ññ= >
x
ññ? @
=>
ññA C
target
ññD J
.
ññJ K
anchoredPosition
ññK [
=
ññ\ ]
x
ññ^ _
,
ññ_ `
new
ñña d
Vector2
ññe l
(
ññl m
endValue
ññm u
.
ññu v
x
ññv w
,
ññw x
$num
ññy z
)
ññz {
,
ññ{ |
durationññ} Ö
)ññÖ Ü
.
óó 

SetOptions
óó 
(
óó  
AxisConstraint
óó  .
.
óó. /
X
óó/ 0
,
óó0 1
snapping
óó2 :
)
óó: ;
.
óó; <
SetEase
óó< C
(
óóC D
Ease
óóD H
.
óóH I
Linear
óóI O
)
óóO P
)
òò 
.
òò 
Join
òò 
(
òò 
yTween
òò 
)
òò 
.
ôô 
	SetTarget
ôô 
(
ôô 
target
ôô !
)
ôô! "
.
ôô" #
SetEase
ôô# *
(
ôô* +
DOTween
ôô+ 2
.
ôô2 3
defaultEaseType
ôô3 B
)
ôôB C
;
ôôC D
s
öö 
.
öö 
OnUpdate
öö 
(
öö 
(
öö 
)
öö 
=>
öö 
{
öö 
if
õõ 
(
õõ 
!
õõ 

offsetYSet
õõ 
)
õõ  
{
õõ! "

offsetYSet
úú 
=
úú  
true
úú! %
;
úú% &
offsetY
ùù 
=
ùù 
s
ùù 
.
ùù  

isRelative
ùù  *
?
ùù+ ,
endValue
ùù- 5
.
ùù5 6
y
ùù6 7
:
ùù8 9
endValue
ùù: B
.
ùùB C
y
ùùC D
-
ùùE F
	startPosY
ùùG P
;
ùùP Q
}
ûû 
Vector2
üü 
pos
üü 
=
üü 
target
üü $
.
üü$ %
anchoredPosition
üü% 5
;
üü5 6
pos
†† 
.
†† 
y
†† 
+=
†† 
	DOVirtual
†† "
.
††" #

EasedValue
††# -
(
††- .
$num
††. /
,
††/ 0
offsetY
††1 8
,
††8 9
s
††: ;
.
††; <*
ElapsedDirectionalPercentage
††< X
(
††X Y
)
††Y Z
,
††Z [
Ease
††\ `
.
††` a
OutQuad
††a h
)
††h i
;
††i j
target
°° 
.
°° 
anchoredPosition
°° '
=
°°( )
pos
°°* -
;
°°- .
}
¢¢ 
)
¢¢ 
;
¢¢ 
return
££ 
s
££ 
;
££ 
}
§§ 	
public
∞∞ 
static
∞∞ 
Tweener
∞∞ 
DONormalizedPos
∞∞ -
(
∞∞- .
this
∞∞. 2

ScrollRect
∞∞3 =
target
∞∞> D
,
∞∞D E
Vector2
∞∞F M
endValue
∞∞N V
,
∞∞V W
float
∞∞X ]
duration
∞∞^ f
,
∞∞f g
bool
∞∞h l
snapping
∞∞m u
=
∞∞v w
false
∞∞x }
)
∞∞} ~
{
±± 	
return
≤≤ 
DOTween
≤≤ 
.
≤≤ 
To
≤≤ 
(
≤≤ 
(
≤≤ 
)
≤≤  
=>
≤≤! #
new
≤≤$ '
Vector2
≤≤( /
(
≤≤/ 0
target
≤≤0 6
.
≤≤6 7*
horizontalNormalizedPosition
≤≤7 S
,
≤≤S T
target
≤≤U [
.
≤≤[ \(
verticalNormalizedPosition
≤≤\ v
)
≤≤v w
,
≤≤w x
x
≥≥ 
=>
≥≥ 
{
≥≥ 
target
¥¥ 
.
¥¥ *
horizontalNormalizedPosition
¥¥ 7
=
¥¥8 9
x
¥¥: ;
.
¥¥; <
x
¥¥< =
;
¥¥= >
target
µµ 
.
µµ (
verticalNormalizedPosition
µµ 5
=
µµ6 7
x
µµ8 9
.
µµ9 :
y
µµ: ;
;
µµ; <
}
∂∂ 
,
∂∂ 
endValue
∂∂ 
,
∂∂ 
duration
∂∂ %
)
∂∂% &
.
∑∑ 

SetOptions
∑∑ 
(
∑∑ 
snapping
∑∑ $
)
∑∑$ %
.
∑∑% &
	SetTarget
∑∑& /
(
∑∑/ 0
target
∑∑0 6
)
∑∑6 7
;
∑∑7 8
}
∏∏ 	
public
ΩΩ 
static
ΩΩ 
Tweener
ΩΩ '
DOHorizontalNormalizedPos
ΩΩ 7
(
ΩΩ7 8
this
ΩΩ8 <

ScrollRect
ΩΩ= G
target
ΩΩH N
,
ΩΩN O
float
ΩΩP U
endValue
ΩΩV ^
,
ΩΩ^ _
float
ΩΩ` e
duration
ΩΩf n
,
ΩΩn o
bool
ΩΩp t
snapping
ΩΩu }
=
ΩΩ~ 
falseΩΩÄ Ö
)ΩΩÖ Ü
{
ææ 	
return
øø 
DOTween
øø 
.
øø 
To
øø 
(
øø 
(
øø 
)
øø  
=>
øø! #
target
øø$ *
.
øø* +*
horizontalNormalizedPosition
øø+ G
,
øøG H
x
øøI J
=>
øøK M
target
øøN T
.
øøT U*
horizontalNormalizedPosition
øøU q
=
øør s
x
øøt u
,
øøu v
endValue
øøw 
,øø Ä
durationøøÅ â
)øøâ ä
.
¿¿ 

SetOptions
¿¿ 
(
¿¿ 
snapping
¿¿ $
)
¿¿$ %
.
¿¿% &
	SetTarget
¿¿& /
(
¿¿/ 0
target
¿¿0 6
)
¿¿6 7
;
¿¿7 8
}
¡¡ 	
public
∆∆ 
static
∆∆ 
Tweener
∆∆ %
DOVerticalNormalizedPos
∆∆ 5
(
∆∆5 6
this
∆∆6 :

ScrollRect
∆∆; E
target
∆∆F L
,
∆∆L M
float
∆∆N S
endValue
∆∆T \
,
∆∆\ ]
float
∆∆^ c
duration
∆∆d l
,
∆∆l m
bool
∆∆n r
snapping
∆∆s {
=
∆∆| }
false∆∆~ É
)∆∆É Ñ
{
«« 	
return
»» 
DOTween
»» 
.
»» 
To
»» 
(
»» 
(
»» 
)
»»  
=>
»»! #
target
»»$ *
.
»»* +(
verticalNormalizedPosition
»»+ E
,
»»E F
x
»»G H
=>
»»I K
target
»»L R
.
»»R S(
verticalNormalizedPosition
»»S m
=
»»n o
x
»»p q
,
»»q r
endValue
»»s {
,
»»{ |
duration»»} Ö
)»»Ö Ü
.
…… 

SetOptions
…… 
(
…… 
snapping
…… $
)
……$ %
.
……% &
	SetTarget
……& /
(
……/ 0
target
……0 6
)
……6 7
;
……7 8
}
   	
public
‘‘ 
static
‘‘ 
TweenerCore
‘‘ !
<
‘‘! "
float
‘‘" '
,
‘‘' (
float
‘‘) .
,
‘‘. /
FloatOptions
‘‘0 <
>
‘‘< =
DOValue
‘‘> E
(
‘‘E F
this
‘‘F J
Slider
‘‘K Q
target
‘‘R X
,
‘‘X Y
float
‘‘Z _
endValue
‘‘` h
,
‘‘h i
float
‘‘j o
duration
‘‘p x
,
‘‘x y
bool
‘‘z ~
snapping‘‘ á
=‘‘à â
false‘‘ä è
)‘‘è ê
{
’’ 	
TweenerCore
÷÷ 
<
÷÷ 
float
÷÷ 
,
÷÷ 
float
÷÷ $
,
÷÷$ %
FloatOptions
÷÷& 2
>
÷÷2 3
t
÷÷4 5
=
÷÷6 7
DOTween
÷÷8 ?
.
÷÷? @
To
÷÷@ B
(
÷÷B C
(
÷÷C D
)
÷÷D E
=>
÷÷F H
target
÷÷I O
.
÷÷O P
value
÷÷P U
,
÷÷U V
x
÷÷W X
=>
÷÷Y [
target
÷÷\ b
.
÷÷b c
value
÷÷c h
=
÷÷i j
x
÷÷k l
,
÷÷l m
endValue
÷÷n v
,
÷÷v w
duration÷÷x Ä
)÷÷Ä Å
;÷÷Å Ç
t
◊◊ 
.
◊◊ 

SetOptions
◊◊ 
(
◊◊ 
snapping
◊◊ !
)
◊◊! "
.
◊◊" #
	SetTarget
◊◊# ,
(
◊◊, -
target
◊◊- 3
)
◊◊3 4
;
◊◊4 5
return
ÿÿ 
t
ÿÿ 
;
ÿÿ 
}
ŸŸ 	
public
‚‚ 
static
‚‚ 
TweenerCore
‚‚ !
<
‚‚! "
Color
‚‚" '
,
‚‚' (
Color
‚‚) .
,
‚‚. /
ColorOptions
‚‚0 <
>
‚‚< =
DOColor
‚‚> E
(
‚‚E F
this
‚‚F J
Text
‚‚K O
target
‚‚P V
,
‚‚V W
Color
‚‚X ]
endValue
‚‚^ f
,
‚‚f g
float
‚‚h m
duration
‚‚n v
)
‚‚v w
{
„„ 	
TweenerCore
‰‰ 
<
‰‰ 
Color
‰‰ 
,
‰‰ 
Color
‰‰ $
,
‰‰$ %
ColorOptions
‰‰& 2
>
‰‰2 3
t
‰‰4 5
=
‰‰6 7
DOTween
‰‰8 ?
.
‰‰? @
To
‰‰@ B
(
‰‰B C
(
‰‰C D
)
‰‰D E
=>
‰‰F H
target
‰‰I O
.
‰‰O P
color
‰‰P U
,
‰‰U V
x
‰‰W X
=>
‰‰Y [
target
‰‰\ b
.
‰‰b c
color
‰‰c h
=
‰‰i j
x
‰‰k l
,
‰‰l m
endValue
‰‰n v
,
‰‰v w
duration‰‰x Ä
)‰‰Ä Å
;‰‰Å Ç
t
ÂÂ 
.
ÂÂ 
	SetTarget
ÂÂ 
(
ÂÂ 
target
ÂÂ 
)
ÂÂ 
;
ÂÂ  
return
ÊÊ 
t
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
public
ÒÒ 
static
ÒÒ 
TweenerCore
ÒÒ !
<
ÒÒ! "
int
ÒÒ" %
,
ÒÒ% &
int
ÒÒ' *
,
ÒÒ* +
	NoOptions
ÒÒ, 5
>
ÒÒ5 6
	DOCounter
ÒÒ7 @
(
ÒÒ@ A
this
ÚÚ 
Text
ÚÚ 
target
ÚÚ 
,
ÚÚ 
int
ÚÚ !
	fromValue
ÚÚ" +
,
ÚÚ+ ,
int
ÚÚ- 0
endValue
ÚÚ1 9
,
ÚÚ9 :
float
ÚÚ; @
duration
ÚÚA I
,
ÚÚI J
bool
ÚÚK O#
addThousandsSeparator
ÚÚP e
=
ÚÚf g
true
ÚÚh l
,
ÚÚl m
CultureInfo
ÚÚn y
cultureÚÚz Å
=ÚÚÇ É
nullÚÚÑ à
)
ÛÛ 	
{
ÛÛ	 

int
ÙÙ 
v
ÙÙ 
=
ÙÙ 
	fromValue
ÙÙ 
;
ÙÙ 
CultureInfo
ıı 
cInfo
ıı 
=
ıı 
!
ıı  !#
addThousandsSeparator
ıı! 6
?
ıı7 8
null
ıı9 =
:
ıı> ?
culture
ıı@ G
??
ııH J
CultureInfo
ııK V
.
ııV W
InvariantCulture
ııW g
;
ııg h
TweenerCore
ˆˆ 
<
ˆˆ 
int
ˆˆ 
,
ˆˆ 
int
ˆˆ  
,
ˆˆ  !
	NoOptions
ˆˆ" +
>
ˆˆ+ ,
t
ˆˆ- .
=
ˆˆ/ 0
DOTween
ˆˆ1 8
.
ˆˆ8 9
To
ˆˆ9 ;
(
ˆˆ; <
(
ˆˆ< =
)
ˆˆ= >
=>
ˆˆ? A
v
ˆˆB C
,
ˆˆC D
x
ˆˆE F
=>
ˆˆG I
{
ˆˆJ K
v
˜˜ 
=
˜˜ 
x
˜˜ 
;
˜˜ 
target
¯¯ 
.
¯¯ 
text
¯¯ 
=
¯¯ #
addThousandsSeparator
¯¯ 3
?
˘˘ 
v
˘˘ 
.
˘˘ 
ToString
˘˘  
(
˘˘  !
$str
˘˘! %
,
˘˘% &
cInfo
˘˘' ,
)
˘˘, -
:
˙˙ 
v
˙˙ 
.
˙˙ 
ToString
˙˙  
(
˙˙  !
)
˙˙! "
;
˙˙" #
}
˚˚ 
,
˚˚ 
endValue
˚˚ 
,
˚˚ 
duration
˚˚ !
)
˚˚! "
;
˚˚" #
t
¸¸ 
.
¸¸ 
	SetTarget
¸¸ 
(
¸¸ 
target
¸¸ 
)
¸¸ 
;
¸¸  
return
˝˝ 
t
˝˝ 
;
˝˝ 
}
˛˛ 	
public
ÉÉ 
static
ÉÉ 
TweenerCore
ÉÉ !
<
ÉÉ! "
Color
ÉÉ" '
,
ÉÉ' (
Color
ÉÉ) .
,
ÉÉ. /
ColorOptions
ÉÉ0 <
>
ÉÉ< =
DOFade
ÉÉ> D
(
ÉÉD E
this
ÉÉE I
Text
ÉÉJ N
target
ÉÉO U
,
ÉÉU V
float
ÉÉW \
endValue
ÉÉ] e
,
ÉÉe f
float
ÉÉg l
duration
ÉÉm u
)
ÉÉu v
{
ÑÑ 	
TweenerCore
ÖÖ 
<
ÖÖ 
Color
ÖÖ 
,
ÖÖ 
Color
ÖÖ $
,
ÖÖ$ %
ColorOptions
ÖÖ& 2
>
ÖÖ2 3
t
ÖÖ4 5
=
ÖÖ6 7
DOTween
ÖÖ8 ?
.
ÖÖ? @
ToAlpha
ÖÖ@ G
(
ÖÖG H
(
ÖÖH I
)
ÖÖI J
=>
ÖÖK M
target
ÖÖN T
.
ÖÖT U
color
ÖÖU Z
,
ÖÖZ [
x
ÖÖ\ ]
=>
ÖÖ^ `
target
ÖÖa g
.
ÖÖg h
color
ÖÖh m
=
ÖÖn o
x
ÖÖp q
,
ÖÖq r
endValue
ÖÖs {
,
ÖÖ{ |
durationÖÖ} Ö
)ÖÖÖ Ü
;ÖÖÜ á
t
ÜÜ 
.
ÜÜ 
	SetTarget
ÜÜ 
(
ÜÜ 
target
ÜÜ 
)
ÜÜ 
;
ÜÜ  
return
áá 
t
áá 
;
áá 
}
àà 	
public
ìì 
static
ìì 
TweenerCore
ìì !
<
ìì! "
string
ìì" (
,
ìì( )
string
ìì* 0
,
ìì0 1
StringOptions
ìì2 ?
>
ìì? @
DOText
ììA G
(
ììG H
this
ììH L
Text
ììM Q
target
ììR X
,
ììX Y
string
ììZ `
endValue
ììa i
,
ììi j
float
ììk p
duration
ììq y
,
ììy z
bool
ìì{ 
richTextEnabledììÄ è
=ììê ë
trueììí ñ
,ììñ ó
ScrambleModeììò §
scrambleModeìì• ±
=ìì≤ ≥
ScrambleModeìì¥ ¿
.ìì¿ ¡
Noneìì¡ ≈
,ìì≈ ∆
stringìì« Õ
scrambleCharsììŒ €
=ìì‹ ›
nullììﬁ ‚
)ìì‚ „
{
îî 	
if
ïï 
(
ïï 
endValue
ïï 
==
ïï 
null
ïï  
)
ïï  !
{
ïï" #
if
ññ 
(
ññ 
Debugger
ññ 
.
ññ 
logPriority
ññ (
>
ññ) *
$num
ññ+ ,
)
ññ, -
Debugger
ññ. 6
.
ññ6 7

LogWarning
ññ7 A
(
ññA B
$strññB †
)ññ† °
;ññ° ¢
endValue
óó 
=
óó 
$str
óó 
;
óó 
}
òò 
TweenerCore
ôô 
<
ôô 
string
ôô 
,
ôô 
string
ôô  &
,
ôô& '
StringOptions
ôô( 5
>
ôô5 6
t
ôô7 8
=
ôô9 :
DOTween
ôô; B
.
ôôB C
To
ôôC E
(
ôôE F
(
ôôF G
)
ôôG H
=>
ôôI K
target
ôôL R
.
ôôR S
text
ôôS W
,
ôôW X
x
ôôY Z
=>
ôô[ ]
target
ôô^ d
.
ôôd e
text
ôôe i
=
ôôj k
x
ôôl m
,
ôôm n
endValue
ôôo w
,
ôôw x
durationôôy Å
)ôôÅ Ç
;ôôÇ É
t
öö 
.
öö 

SetOptions
öö 
(
öö 
richTextEnabled
öö (
,
öö( )
scrambleMode
öö* 6
,
öö6 7
scrambleChars
öö8 E
)
ööE F
.
õõ 
	SetTarget
õõ 
(
õõ 
target
õõ !
)
õõ! "
;
õõ" #
return
úú 
t
úú 
;
úú 
}
ùù 	
public
™™ 
static
™™ 
Tweener
™™ 
DOBlendableColor
™™ .
(
™™. /
this
™™/ 3
Graphic
™™4 ;
target
™™< B
,
™™B C
Color
™™D I
endValue
™™J R
,
™™R S
float
™™T Y
duration
™™Z b
)
™™b c
{
´´ 	
endValue
¨¨ 
=
¨¨ 
endValue
¨¨ 
-
¨¨  !
target
¨¨" (
.
¨¨( )
color
¨¨) .
;
¨¨. /
Color
≠≠ 
to
≠≠ 
=
≠≠ 
new
≠≠ 
Color
≠≠  
(
≠≠  !
$num
≠≠! "
,
≠≠" #
$num
≠≠$ %
,
≠≠% &
$num
≠≠' (
,
≠≠( )
$num
≠≠* +
)
≠≠+ ,
;
≠≠, -
return
ÆÆ 
DOTween
ÆÆ 
.
ÆÆ 
To
ÆÆ 
(
ÆÆ 
(
ÆÆ 
)
ÆÆ  
=>
ÆÆ! #
to
ÆÆ$ &
,
ÆÆ& '
x
ÆÆ( )
=>
ÆÆ* ,
{
ÆÆ- .
Color
ØØ 
diff
ØØ 
=
ØØ 
x
ØØ 
-
ØØ  
to
ØØ! #
;
ØØ# $
to
∞∞ 
=
∞∞ 
x
∞∞ 
;
∞∞ 
target
±± 
.
±± 
color
±± 
+=
±± 
diff
±±  $
;
±±$ %
}
≤≤ 
,
≤≤ 
endValue
≤≤ 
,
≤≤ 
duration
≤≤ !
)
≤≤! "
.
≥≥ 
	Blendable
≥≥ 
(
≥≥ 
)
≥≥ 
.
≥≥ 
	SetTarget
≥≥ &
(
≥≥& '
target
≥≥' -
)
≥≥- .
;
≥≥. /
}
¥¥ 	
public
øø 
static
øø 
Tweener
øø 
DOBlendableColor
øø .
(
øø. /
this
øø/ 3
Image
øø4 9
target
øø: @
,
øø@ A
Color
øøB G
endValue
øøH P
,
øøP Q
float
øøR W
duration
øøX `
)
øø` a
{
¿¿ 	
endValue
¡¡ 
=
¡¡ 
endValue
¡¡ 
-
¡¡  !
target
¡¡" (
.
¡¡( )
color
¡¡) .
;
¡¡. /
Color
¬¬ 
to
¬¬ 
=
¬¬ 
new
¬¬ 
Color
¬¬  
(
¬¬  !
$num
¬¬! "
,
¬¬" #
$num
¬¬$ %
,
¬¬% &
$num
¬¬' (
,
¬¬( )
$num
¬¬* +
)
¬¬+ ,
;
¬¬, -
return
√√ 
DOTween
√√ 
.
√√ 
To
√√ 
(
√√ 
(
√√ 
)
√√  
=>
√√! #
to
√√$ &
,
√√& '
x
√√( )
=>
√√* ,
{
√√- .
Color
ƒƒ 
diff
ƒƒ 
=
ƒƒ 
x
ƒƒ 
-
ƒƒ  
to
ƒƒ! #
;
ƒƒ# $
to
≈≈ 
=
≈≈ 
x
≈≈ 
;
≈≈ 
target
∆∆ 
.
∆∆ 
color
∆∆ 
+=
∆∆ 
diff
∆∆  $
;
∆∆$ %
}
«« 
,
«« 
endValue
«« 
,
«« 
duration
«« !
)
««! "
.
»» 
	Blendable
»» 
(
»» 
)
»» 
.
»» 
	SetTarget
»» &
(
»»& '
target
»»' -
)
»»- .
;
»». /
}
…… 	
public
‘‘ 
static
‘‘ 
Tweener
‘‘ 
DOBlendableColor
‘‘ .
(
‘‘. /
this
‘‘/ 3
Text
‘‘4 8
target
‘‘9 ?
,
‘‘? @
Color
‘‘A F
endValue
‘‘G O
,
‘‘O P
float
‘‘Q V
duration
‘‘W _
)
‘‘_ `
{
’’ 	
endValue
÷÷ 
=
÷÷ 
endValue
÷÷ 
-
÷÷  !
target
÷÷" (
.
÷÷( )
color
÷÷) .
;
÷÷. /
Color
◊◊ 
to
◊◊ 
=
◊◊ 
new
◊◊ 
Color
◊◊  
(
◊◊  !
$num
◊◊! "
,
◊◊" #
$num
◊◊$ %
,
◊◊% &
$num
◊◊' (
,
◊◊( )
$num
◊◊* +
)
◊◊+ ,
;
◊◊, -
return
ÿÿ 
DOTween
ÿÿ 
.
ÿÿ 
To
ÿÿ 
(
ÿÿ 
(
ÿÿ 
)
ÿÿ  
=>
ÿÿ! #
to
ÿÿ$ &
,
ÿÿ& '
x
ÿÿ( )
=>
ÿÿ* ,
{
ÿÿ- .
Color
ŸŸ 
diff
ŸŸ 
=
ŸŸ 
x
ŸŸ 
-
ŸŸ  
to
ŸŸ! #
;
ŸŸ# $
to
⁄⁄ 
=
⁄⁄ 
x
⁄⁄ 
;
⁄⁄ 
target
€€ 
.
€€ 
color
€€ 
+=
€€ 
diff
€€  $
;
€€$ %
}
‹‹ 
,
‹‹ 
endValue
‹‹ 
,
‹‹ 
duration
‹‹ !
)
‹‹! "
.
›› 
	Blendable
›› 
(
›› 
)
›› 
.
›› 
	SetTarget
›› &
(
››& '
target
››' -
)
››- .
;
››. /
}
ﬁﬁ 	
public
ÓÓ 
static
ÓÓ 
TweenerCore
ÓÓ !
<
ÓÓ! "
Vector2
ÓÓ" )
,
ÓÓ) *
Vector2
ÓÓ+ 2
,
ÓÓ2 3
CircleOptions
ÓÓ4 A
>
ÓÓA B
DOShapeCircle
ÓÓC P
(
ÓÓP Q
this
ÔÔ 
RectTransform
ÔÔ 
target
ÔÔ %
,
ÔÔ% &
Vector2
ÔÔ' .
center
ÔÔ/ 5
,
ÔÔ5 6
float
ÔÔ7 <
endValueDegrees
ÔÔ= L
,
ÔÔL M
float
ÔÔN S
duration
ÔÔT \
,
ÔÔ\ ]
bool
ÔÔ^ b
relativeCenter
ÔÔc q
=
ÔÔr s
false
ÔÔt y
,
ÔÔy z
bool
ÔÔ{ 
snappingÔÔÄ à
=ÔÔâ ä
falseÔÔã ê
)
 	
{
ÒÒ 	
TweenerCore
ÚÚ 
<
ÚÚ 
Vector2
ÚÚ 
,
ÚÚ  
Vector2
ÚÚ! (
,
ÚÚ( )
CircleOptions
ÚÚ* 7
>
ÚÚ7 8
t
ÚÚ9 :
=
ÚÚ; <
DOTween
ÚÚ= D
.
ÚÚD E
To
ÚÚE G
(
ÚÚG H
CirclePlugin
ÛÛ 
.
ÛÛ 
Get
ÛÛ  
(
ÛÛ  !
)
ÛÛ! "
,
ÛÛ" #
(
ÛÛ$ %
)
ÛÛ% &
=>
ÛÛ' )
target
ÛÛ* 0
.
ÛÛ0 1
anchoredPosition
ÛÛ1 A
,
ÛÛA B
x
ÛÛC D
=>
ÛÛE G
target
ÛÛH N
.
ÛÛN O
anchoredPosition
ÛÛO _
=
ÛÛ` a
x
ÛÛb c
,
ÛÛc d
center
ÛÛe k
,
ÛÛk l
duration
ÛÛm u
)
ÙÙ 
;
ÙÙ 
t
ıı 
.
ıı 

SetOptions
ıı 
(
ıı 
endValueDegrees
ıı (
,
ıı( )
relativeCenter
ıı* 8
,
ıı8 9
snapping
ıı: B
)
ııB C
.
ııC D
	SetTarget
ııD M
(
ııM N
target
ııN T
)
ııT U
;
ııU V
return
ˆˆ 
t
ˆˆ 
;
ˆˆ 
}
˜˜ 	
public
ÅÅ 
static
ÅÅ 
class
ÅÅ 
Utils
ÅÅ !
{
ÇÇ 	
public
áá 
static
áá 
Vector2
áá !#
SwitchToRectTransform
áá" 7
(
áá7 8
RectTransform
áá8 E
from
ááF J
,
ááJ K
RectTransform
ááL Y
to
ááZ \
)
áá\ ]
{
àà 
Vector2
ââ 

localPoint
ââ "
;
ââ" #
Vector2
ää $
fromPivotDerivedOffset
ää .
=
ää/ 0
new
ää1 4
Vector2
ää5 <
(
ää< =
from
ää= A
.
ääA B
rect
ääB F
.
ääF G
width
ääG L
*
ääM N
$num
ääO S
+
ääT U
from
ääV Z
.
ääZ [
rect
ää[ _
.
ää_ `
xMin
ää` d
,
ääd e
from
ääf j
.
ääj k
rect
ääk o
.
ääo p
height
ääp v
*
ääw x
$num
ääy }
+
ää~ 
fromääÄ Ñ
.ääÑ Ö
rectääÖ â
.ääâ ä
yMinäää é
)ääé è
;ääè ê
Vector2
ãã 
screenP
ãã 
=
ãã  !"
RectTransformUtility
ãã" 6
.
ãã6 7 
WorldToScreenPoint
ãã7 I
(
ããI J
null
ããJ N
,
ããN O
from
ããP T
.
ããT U
position
ããU ]
)
ãã] ^
;
ãã^ _
screenP
åå 
+=
åå $
fromPivotDerivedOffset
åå 1
;
åå1 2"
RectTransformUtility
çç $
.
çç$ %0
"ScreenPointToLocalPointInRectangle
çç% G
(
ççG H
to
ççH J
,
ççJ K
screenP
ççL S
,
ççS T
null
ççU Y
,
ççY Z
out
çç[ ^

localPoint
çç_ i
)
ççi j
;
ççj k
Vector2
éé  
pivotDerivedOffset
éé *
=
éé+ ,
new
éé- 0
Vector2
éé1 8
(
éé8 9
to
éé9 ;
.
éé; <
rect
éé< @
.
éé@ A
width
ééA F
*
ééG H
$num
ééI M
+
ééN O
to
ééP R
.
ééR S
rect
ééS W
.
ééW X
xMin
ééX \
,
éé\ ]
to
éé^ `
.
éé` a
rect
ééa e
.
éée f
height
ééf l
*
éém n
$num
ééo s
+
éét u
to
éév x
.
ééx y
rect
ééy }
.
éé} ~
yMinéé~ Ç
)ééÇ É
;ééÉ Ñ
return
èè 
to
èè 
.
èè 
anchoredPosition
èè *
+
èè+ ,

localPoint
èè- 7
-
èè8 9 
pivotDerivedOffset
èè: L
;
èèL M
}
êê 
}
ëë 	
}
íí 
}ìì ¶J
HD:\REGame\Assets\Plugins\Demigiant\DOTween\Modules\DOTweenModuleAudio.cs
	namespace 	
DG
 
. 
Tweening 
{ 
public 
static 
class 
DOTweenModuleAudio '
{ 
public 
static 
TweenerCore !
<! "
float" '
,' (
float) .
,. /
FloatOptions0 <
>< =
DOFade> D
(D E
thisE I
AudioSourceJ U
targetV \
,\ ]
float^ c
endValued l
,l m
floatn s
durationt |
)| }
{ 	
if 
( 
endValue 
< 
$num 
) 
endValue &
=' (
$num) *
;* +
else 
if 
( 
endValue 
> 
$num  !
)! "
endValue# +
=, -
$num. /
;/ 0
TweenerCore 
< 
float 
, 
float $
,$ %
FloatOptions& 2
>2 3
t4 5
=6 7
DOTween8 ?
.? @
To@ B
(B C
(C D
)D E
=>F H
targetI O
.O P
volumeP V
,V W
xX Y
=>Z \
target] c
.c d
volumed j
=k l
xm n
,n o
endValuep x
,x y
duration	z Ç
)
Ç É
;
É Ñ
t 
. 
	SetTarget 
( 
target 
) 
;  
return 
t 
; 
}   	
public%% 
static%% 
TweenerCore%% !
<%%! "
float%%" '
,%%' (
float%%) .
,%%. /
FloatOptions%%0 <
>%%< =
DOPitch%%> E
(%%E F
this%%F J
AudioSource%%K V
target%%W ]
,%%] ^
float%%_ d
endValue%%e m
,%%m n
float%%o t
duration%%u }
)%%} ~
{&& 	
TweenerCore'' 
<'' 
float'' 
,'' 
float'' $
,''$ %
FloatOptions''& 2
>''2 3
t''4 5
=''6 7
DOTween''8 ?
.''? @
To''@ B
(''B C
(''C D
)''D E
=>''F H
target''I O
.''O P
pitch''P U
,''U V
x''W X
=>''Y [
target''\ b
.''b c
pitch''c h
=''i j
x''k l
,''l m
endValue''n v
,''v w
duration	''x Ä
)
''Ä Å
;
''Å Ç
t(( 
.(( 
	SetTarget(( 
((( 
target(( 
)(( 
;((  
return)) 
t)) 
;)) 
}** 	
public66 
static66 
TweenerCore66 !
<66! "
float66" '
,66' (
float66) .
,66. /
FloatOptions660 <
>66< =

DOSetFloat66> H
(66H I
this66I M

AudioMixer66N X
target66Y _
,66_ `
string66a g
	floatName66h q
,66q r
float66s x
endValue	66y Å
,
66Å Ç
float
66É à
duration
66â ë
)
66ë í
{77 	
TweenerCore88 
<88 
float88 
,88 
float88 $
,88$ %
FloatOptions88& 2
>882 3
t884 5
=886 7
DOTween888 ?
.88? @
To88@ B
(88B C
(88C D
)88D E
=>88E G
{88H I
float99 
currVal99 !
;99! "
target:: 
.:: 
GetFloat:: #
(::# $
	floatName::$ -
,::- .
out::/ 2
currVal::3 :
)::: ;
;::; <
return;; 
currVal;; "
;;;" #
}<< 
,<< 
x<< 
=><< 
target<< 
.<< 
SetFloat<< &
(<<& '
	floatName<<' 0
,<<0 1
x<<2 3
)<<3 4
,<<4 5
endValue<<6 >
,<<> ?
duration<<@ H
)<<H I
;<<I J
t== 
.== 
	SetTarget== 
(== 
target== 
)== 
;==  
return>> 
t>> 
;>> 
}?? 	
publicKK 
staticKK 
intKK 

DOCompleteKK $
(KK$ %
thisKK% )

AudioMixerKK* 4
targetKK5 ;
,KK; <
boolKK= A
withCallbacksKKB O
=KKP Q
falseKKR W
)KKW X
{LL 	
returnMM 
DOTweenMM 
.MM 
CompleteMM #
(MM# $
targetMM$ *
,MM* +
withCallbacksMM, 9
)MM9 :
;MM: ;
}NN 	
publicVV 
staticVV 
intVV 
DOKillVV  
(VV  !
thisVV! %

AudioMixerVV& 0
targetVV1 7
,VV7 8
boolVV9 =
completeVV> F
=VVG H
falseVVI N
)VVN O
{WW 	
returnXX 
DOTweenXX 
.XX 
KillXX 
(XX  
targetXX  &
,XX& '
completeXX( 0
)XX0 1
;XX1 2
}YY 	
public`` 
static`` 
int`` 
DOFlip``  
(``  !
this``! %

AudioMixer``& 0
target``1 7
)``7 8
{aa 	
returnbb 
DOTweenbb 
.bb 
Flipbb 
(bb  
targetbb  &
)bb& '
;bb' (
}cc 	
publicmm 
staticmm 
intmm 
DOGotomm  
(mm  !
thismm! %

AudioMixermm& 0
targetmm1 7
,mm7 8
floatmm9 >
tomm? A
,mmA B
boolmmC G
andPlaymmH O
=mmP Q
falsemmR W
)mmW X
{nn 	
returnoo 
DOTweenoo 
.oo 
Gotooo 
(oo  
targetoo  &
,oo& '
tooo( *
,oo* +
andPlayoo, 3
)oo3 4
;oo4 5
}pp 	
publicww 
staticww 
intww 
DOPauseww !
(ww! "
thisww" &

AudioMixerww' 1
targetww2 8
)ww8 9
{xx 	
returnyy 
DOTweenyy 
.yy 
Pauseyy  
(yy  !
targetyy! '
)yy' (
;yy( )
}zz 	
public
ÅÅ 
static
ÅÅ 
int
ÅÅ 
DOPlay
ÅÅ  
(
ÅÅ  !
this
ÅÅ! %

AudioMixer
ÅÅ& 0
target
ÅÅ1 7
)
ÅÅ7 8
{
ÇÇ 	
return
ÉÉ 
DOTween
ÉÉ 
.
ÉÉ 
Play
ÉÉ 
(
ÉÉ  
target
ÉÉ  &
)
ÉÉ& '
;
ÉÉ' (
}
ÑÑ 	
public
ãã 
static
ãã 
int
ãã 
DOPlayBackwards
ãã )
(
ãã) *
this
ãã* .

AudioMixer
ãã/ 9
target
ãã: @
)
ãã@ A
{
åå 	
return
çç 
DOTween
çç 
.
çç 
PlayBackwards
çç (
(
çç( )
target
çç) /
)
çç/ 0
;
çç0 1
}
éé 	
public
ïï 
static
ïï 
int
ïï 
DOPlayForward
ïï '
(
ïï' (
this
ïï( ,

AudioMixer
ïï- 7
target
ïï8 >
)
ïï> ?
{
ññ 	
return
óó 
DOTween
óó 
.
óó 
PlayForward
óó &
(
óó& '
target
óó' -
)
óó- .
;
óó. /
}
òò 	
public
üü 
static
üü 
int
üü 
	DORestart
üü #
(
üü# $
this
üü$ (

AudioMixer
üü) 3
target
üü4 :
)
üü: ;
{
†† 	
return
°° 
DOTween
°° 
.
°° 
Restart
°° "
(
°°" #
target
°°# )
)
°°) *
;
°°* +
}
¢¢ 	
public
©© 
static
©© 
int
©© 
DORewind
©© "
(
©©" #
this
©©# '

AudioMixer
©©( 2
target
©©3 9
)
©©9 :
{
™™ 	
return
´´ 
DOTween
´´ 
.
´´ 
Rewind
´´ !
(
´´! "
target
´´" (
)
´´( )
;
´´) *
}
¨¨ 	
public
≥≥ 
static
≥≥ 
int
≥≥ 
DOSmoothRewind
≥≥ (
(
≥≥( )
this
≥≥) -

AudioMixer
≥≥. 8
target
≥≥9 ?
)
≥≥? @
{
¥¥ 	
return
µµ 
DOTween
µµ 
.
µµ 
SmoothRewind
µµ '
(
µµ' (
target
µµ( .
)
µµ. /
;
µµ/ 0
}
∂∂ 	
public
ΩΩ 
static
ΩΩ 
int
ΩΩ 
DOTogglePause
ΩΩ '
(
ΩΩ' (
this
ΩΩ( ,

AudioMixer
ΩΩ- 7
target
ΩΩ8 >
)
ΩΩ> ?
{
ææ 	
return
øø 
DOTween
øø 
.
øø 
TogglePause
øø &
(
øø& '
target
øø' -
)
øø- .
;
øø. /
}
¿¿ 	
}
»» 
}…… 